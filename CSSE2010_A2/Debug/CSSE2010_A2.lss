
CSSE2010_A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00001324  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  00800172  00800172  0000142a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021c8  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001046  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f4  00000000  00000000  00004956  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  00005e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bdb  00000000  00000000  000064f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015e8  00000000  00000000  000070cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000086b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_5>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_20>
      54:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_21>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	53 74       	andi	r21, 0x43	; 67
      7e:	75 64       	ori	r23, 0x45	; 69
      80:	65 6e       	ori	r22, 0xE5	; 229
      82:	74 20       	and	r7, r4
      84:	4e 75       	andi	r20, 0x5E	; 94
      86:	6d 62       	ori	r22, 0x2D	; 45
      88:	65 72       	andi	r22, 0x25	; 37
      8a:	3a 20       	and	r3, r10
      8c:	34 38       	cpi	r19, 0x84	; 132
      8e:	38 34       	cpi	r19, 0x48	; 72
      90:	30 34       	cpi	r19, 0x40	; 64
      92:	36 38       	cpi	r19, 0x86	; 134
	...

00000095 <__c.2249>:
      95:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
      a5:	20 62 79 20 4c 61 63 68 6c 61 6e 20 48 6f 6c 6c      by Lachlan Holl
      b5:	69 64 61 79 00                                      iday.

000000ba <__c.2247>:
      ba:	45 6c 65 76 61 74 6f 72 20 43 6f 6e 74 72 6f 6c     Elevator Control
      ca:	6c 65 72 00                                         ler.

000000ce <__c.2040>:
      ce:	1b 5b 32 4a 00                                      .[2J.

000000d3 <__c.2025>:
      d3:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e4 e2       	ldi	r30, 0x24	; 36
      f0:	f3 e1       	ldi	r31, 0x13	; 19
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a2 37       	cpi	r26, 0x72	; 114
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	22 e0       	ldi	r18, 0x02	; 2
     100:	a2 e7       	ldi	r26, 0x72	; 114
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a2 3a       	cpi	r26, 0xA2	; 162
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <main>
     112:	0c 94 90 09 	jmp	0x1320	; 0x1320 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     11a:	e8 e6       	ldi	r30, 0x68	; 104
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	82 60       	ori	r24, 0x02	; 2
     122:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     124:	8b b3       	in	r24, 0x1b	; 27
     126:	82 60       	ori	r24, 0x02	; 2
     128:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     12a:	ec e6       	ldi	r30, 0x6C	; 108
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	8f 60       	ori	r24, 0x0F	; 15
     132:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     134:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
     138:	08 95       	ret

0000013a <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     13a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     13e:	18 16       	cp	r1, r24
     140:	14 f5       	brge	.+68     	; 0x186 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     142:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     146:	6f b7       	in	r22, 0x3f	; 63
		cli();
     148:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	09 c0       	rjmp	.+18     	; 0x160 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     14e:	f9 01       	movw	r30, r18
     150:	ed 58       	subi	r30, 0x8D	; 141
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	40 81       	ld	r20, Z
     156:	f9 01       	movw	r30, r18
     158:	ee 58       	subi	r30, 0x8E	; 142
     15a:	fe 4f       	sbci	r31, 0xFE	; 254
     15c:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     15e:	9f 5f       	subi	r25, 0xFF	; 255
     160:	29 2f       	mov	r18, r25
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <__data_end>
     168:	04 2e       	mov	r0, r20
     16a:	00 0c       	add	r0, r0
     16c:	55 0b       	sbc	r21, r21
     16e:	24 17       	cp	r18, r20
     170:	35 07       	cpc	r19, r21
     172:	6c f3       	brlt	.-38     	; 0x14e <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     174:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <__data_end>
     178:	91 50       	subi	r25, 0x01	; 1
     17a:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <__data_end>
		
		if(interrupts_were_enabled) {
     17e:	66 23       	and	r22, r22
     180:	1c f4       	brge	.+6      	; 0x188 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     182:	78 94       	sei
     184:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     186:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     188:	08 95       	ret

0000018a <__vector_5>:


// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	8f 93       	push	r24
     19c:	9f 93       	push	r25
     19e:	ef 93       	push	r30
     1a0:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1a2:	43 b1       	in	r20, 0x03	; 3
     1a4:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	26 c0       	rjmp	.+76     	; 0x1f6 <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     1aa:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <__data_end>
     1ae:	94 30       	cpi	r25, 0x04	; 4
     1b0:	0c f5       	brge	.+66     	; 0x1f4 <__vector_5+0x6a>
     1b2:	24 2f       	mov	r18, r20
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	08 2e       	mov	r0, r24
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_5+0x34>
     1ba:	35 95       	asr	r19
     1bc:	27 95       	ror	r18
     1be:	0a 94       	dec	r0
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <__vector_5+0x30>
     1c2:	20 ff       	sbrs	r18, 0
     1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <__vector_5+0x6a>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     1c6:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <last_button_state>
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	08 2e       	mov	r0, r24
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_5+0x4a>
     1d0:	35 95       	asr	r19
     1d2:	27 95       	ror	r18
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     1d8:	20 fd       	sbrc	r18, 0
     1da:	0c c0       	rjmp	.+24     	; 0x1f4 <__vector_5+0x6a>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     1dc:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <__data_end>
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	9e 0f       	add	r25, r30
     1e4:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <__data_end>
     1e8:	0e 2e       	mov	r0, r30
     1ea:	00 0c       	add	r0, r0
     1ec:	ff 0b       	sbc	r31, r31
     1ee:	ed 58       	subi	r30, 0x8D	; 141
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1f4:	8f 5f       	subi	r24, 0xFF	; 255
     1f6:	84 30       	cpi	r24, 0x04	; 4
     1f8:	c0 f2       	brcs	.-80     	; 0x1aa <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     1fa:	40 93 77 01 	sts	0x0177, r20	; 0x800177 <last_button_state>
}
     1fe:	ff 91       	pop	r31
     200:	ef 91       	pop	r30
     202:	9f 91       	pop	r25
     204:	8f 91       	pop	r24
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
     210:	0f 90       	pop	r0
     212:	1f 90       	pop	r1
     214:	18 95       	reti

00000216 <initialise_display>:
	(1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0) | (0<<8)
	};

void initialise_display(void) {
	// clear the LED matrix
	ledmatrix_clear();
     216:	0e 94 22 04 	call	0x844	; 0x844 <ledmatrix_clear>
     21a:	08 95       	ret

0000021c <start_display>:
}

void start_display(void) {
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	28 97       	sbiw	r28, 0x08	; 8
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     232:	0e 94 22 04 	call	0x844	; 0x844 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     236:	10 e0       	ldi	r17, 0x00	; 0
     238:	2c c0       	rjmp	.+88     	; 0x292 <start_display+0x76>
		col_data = elevator_display[col];
     23a:	e1 2f       	mov	r30, r17
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	e2 5f       	subi	r30, 0xF2	; 242
     244:	fe 4f       	sbci	r31, 0xFE	; 254
     246:	20 81       	ld	r18, Z
     248:	31 81       	ldd	r19, Z+1	; 0x01
		// using the 9th bit as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x0100) {
     24a:	30 ff       	sbrs	r19, 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <start_display+0x36>
			colour = COLOUR_RED;
     24e:	9f e0       	ldi	r25, 0x0F	; 15
     250:	01 c0       	rjmp	.+2      	; 0x254 <start_display+0x38>
		} else {
			colour = COLOUR_GREEN;
     252:	90 ef       	ldi	r25, 0xF0	; 240
		}
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	14 c0       	rjmp	.+40     	; 0x280 <start_display+0x64>
			if(col_data & 0x01) {
     258:	20 ff       	sbrs	r18, 0
     25a:	08 c0       	rjmp	.+16     	; 0x26c <start_display+0x50>
				column_colour_data[i] = colour;
     25c:	e1 e0       	ldi	r30, 0x01	; 1
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	ec 0f       	add	r30, r28
     262:	fd 1f       	adc	r31, r29
     264:	e8 0f       	add	r30, r24
     266:	f1 1d       	adc	r31, r1
     268:	90 83       	st	Z, r25
     26a:	07 c0       	rjmp	.+14     	; 0x27a <start_display+0x5e>
				} else {
				column_colour_data[i] = 0;
     26c:	e1 e0       	ldi	r30, 0x01	; 1
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ec 0f       	add	r30, r28
     272:	fd 1f       	adc	r31, r29
     274:	e8 0f       	add	r30, r24
     276:	f1 1d       	adc	r31, r1
     278:	10 82       	st	Z, r1
			}
			col_data >>= 1;
     27a:	36 95       	lsr	r19
     27c:	27 95       	ror	r18
			colour = COLOUR_RED;
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	88 30       	cpi	r24, 0x08	; 8
     282:	50 f3       	brcs	.-44     	; 0x258 <start_display+0x3c>
				column_colour_data[i] = 0;
			}
			col_data >>= 1;
		}
		//column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
     284:	be 01       	movw	r22, r28
     286:	6f 5f       	subi	r22, 0xFF	; 255
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	81 2f       	mov	r24, r17
     28c:	0e 94 05 04 	call	0x80a	; 0x80a <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     290:	1f 5f       	subi	r17, 0xFF	; 255
     292:	10 31       	cpi	r17, 0x10	; 16
     294:	90 f2       	brcs	.-92     	; 0x23a <start_display+0x1e>
		}
		//column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
	
}
     296:	28 96       	adiw	r28, 0x08	; 8
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <start_display_animation>:

void start_display_animation(uint8_t frame) {
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	28 97       	sbiw	r28, 0x08	; 8
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	08 2f       	mov	r16, r24
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
     2c4:	19 e0       	ldi	r17, 0x09	; 9
     2c6:	3a c0       	rjmp	.+116    	; 0x33c <start_display_animation+0x92>
		col_data = (1<<7)|(1<<(3-frame))|(1<<(4+frame))|(1<<0);
     2c8:	40 2f       	mov	r20, r16
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	23 e0       	ldi	r18, 0x03	; 3
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	24 1b       	sub	r18, r20
     2d2:	35 0b       	sbc	r19, r21
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <start_display_animation+0x36>
     2dc:	66 0f       	add	r22, r22
     2de:	77 1f       	adc	r23, r23
     2e0:	2a 95       	dec	r18
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <start_display_animation+0x32>
     2e4:	9b 01       	movw	r18, r22
     2e6:	20 68       	ori	r18, 0x80	; 128
     2e8:	4c 5f       	subi	r20, 0xFC	; 252
     2ea:	5f 4f       	sbci	r21, 0xFF	; 255
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <start_display_animation+0x48>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	4a 95       	dec	r20
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <start_display_animation+0x44>
     2f6:	28 2b       	or	r18, r24
     2f8:	39 2b       	or	r19, r25
     2fa:	21 60       	ori	r18, 0x01	; 1
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	15 c0       	rjmp	.+42     	; 0x32a <start_display_animation+0x80>
			if(col_data & 0x01) {
     300:	20 ff       	sbrs	r18, 0
     302:	09 c0       	rjmp	.+18     	; 0x316 <start_display_animation+0x6c>
				column_colour_data[i] = COLOUR_GREEN;
     304:	e1 e0       	ldi	r30, 0x01	; 1
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ec 0f       	add	r30, r28
     30a:	fd 1f       	adc	r31, r29
     30c:	e8 0f       	add	r30, r24
     30e:	f1 1d       	adc	r31, r1
     310:	90 ef       	ldi	r25, 0xF0	; 240
     312:	90 83       	st	Z, r25
     314:	07 c0       	rjmp	.+14     	; 0x324 <start_display_animation+0x7a>
				} else {
				column_colour_data[i] = 0;
     316:	e1 e0       	ldi	r30, 0x01	; 1
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ec 0f       	add	r30, r28
     31c:	fd 1f       	adc	r31, r29
     31e:	e8 0f       	add	r30, r24
     320:	f1 1d       	adc	r31, r1
     322:	10 82       	st	Z, r1
			}
			col_data >>= 1;
     324:	36 95       	lsr	r19
     326:	27 95       	ror	r18
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
		col_data = (1<<7)|(1<<(3-frame))|(1<<(4+frame))|(1<<0);
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	88 30       	cpi	r24, 0x08	; 8
     32c:	48 f3       	brcs	.-46     	; 0x300 <start_display_animation+0x56>
				} else {
				column_colour_data[i] = 0;
			}
			col_data >>= 1;
		}
		ledmatrix_update_column(col, column_colour_data);
     32e:	be 01       	movw	r22, r28
     330:	6f 5f       	subi	r22, 0xFF	; 255
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	81 2f       	mov	r24, r17
     336:	0e 94 05 04 	call	0x80a	; 0x80a <ledmatrix_update_column>
void start_display_animation(uint8_t frame) {
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
     33a:	1f 5f       	subi	r17, 0xFF	; 255
     33c:	1f 30       	cpi	r17, 0x0F	; 15
     33e:	20 f2       	brcs	.-120    	; 0x2c8 <start_display_animation+0x1e>
			}
			col_data >>= 1;
		}
		ledmatrix_update_column(col, column_colour_data);
	}
}
     340:	28 96       	adiw	r28, 0x08	; 8
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	08 95       	ret

00000356 <update_square_colour>:
 */
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	
	// first check that this is a square within the game field
	// if outside the game field, don't update anything
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
     356:	88 30       	cpi	r24, 0x08	; 8
     358:	08 f5       	brcc	.+66     	; 0x39c <update_square_colour+0x46>
     35a:	60 31       	cpi	r22, 0x10	; 16
     35c:	f8 f4       	brcc	.+62     	; 0x39c <update_square_colour+0x46>
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;

	if (object == ELEVATOR) {
     35e:	41 30       	cpi	r20, 0x01	; 1
     360:	61 f0       	breq	.+24     	; 0x37a <update_square_colour+0x24>
		colour = MATRIX_COLOUR_ELEVATOR;
	} else if (object == FLOOR) {
     362:	42 30       	cpi	r20, 0x02	; 2
     364:	61 f0       	breq	.+24     	; 0x37e <update_square_colour+0x28>
		colour = MATRIX_COLOUR_FLOOR;
	} else if (object == TRAVELLER_TO_0) {
     366:	43 30       	cpi	r20, 0x03	; 3
     368:	61 f0       	breq	.+24     	; 0x382 <update_square_colour+0x2c>
		colour = MATRIX_COLOUR_TRAVELLER_0;
	} else if (object == TRAVELLER_TO_1) {
     36a:	44 30       	cpi	r20, 0x04	; 4
     36c:	61 f0       	breq	.+24     	; 0x386 <update_square_colour+0x30>
	colour = MATRIX_COLOUR_TRAVELLER_1;
	} else if (object == TRAVELLER_TO_2) {
     36e:	45 30       	cpi	r20, 0x05	; 5
     370:	61 f0       	breq	.+24     	; 0x38a <update_square_colour+0x34>
	colour = MATRIX_COLOUR_TRAVELLER_2;
	} else if (object == TRAVELLER_TO_3) {
     372:	46 30       	cpi	r20, 0x06	; 6
     374:	61 f4       	brne	.+24     	; 0x38e <update_square_colour+0x38>
	colour = MATRIX_COLOUR_TRAVELLER_3;
     376:	43 e1       	ldi	r20, 0x13	; 19
     378:	0b c0       	rjmp	.+22     	; 0x390 <update_square_colour+0x3a>
	
	// determine which colour corresponds to this object
	PixelColour colour;

	if (object == ELEVATOR) {
		colour = MATRIX_COLOUR_ELEVATOR;
     37a:	4f e0       	ldi	r20, 0x0F	; 15
     37c:	09 c0       	rjmp	.+18     	; 0x390 <update_square_colour+0x3a>
	} else if (object == FLOOR) {
		colour = MATRIX_COLOUR_FLOOR;
     37e:	40 ef       	ldi	r20, 0xF0	; 240
     380:	07 c0       	rjmp	.+14     	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_0) {
		colour = MATRIX_COLOUR_TRAVELLER_0;
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	05 c0       	rjmp	.+10     	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_1) {
	colour = MATRIX_COLOUR_TRAVELLER_1;
     386:	41 e1       	ldi	r20, 0x11	; 17
     388:	03 c0       	rjmp	.+6      	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_2) {
	colour = MATRIX_COLOUR_TRAVELLER_2;
     38a:	45 e3       	ldi	r20, 0x35	; 53
     38c:	01 c0       	rjmp	.+2      	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_3) {
	colour = MATRIX_COLOUR_TRAVELLER_3;
	} else {
		// anything unexpected (or empty) will be black
		colour = MATRIX_COLOUR_EMPTY;
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	96 2f       	mov	r25, r22
     392:	68 2f       	mov	r22, r24
	/* x and y are swapped here because the ledmatrix.c code
	 * treats the matrix as being horizontal, while the elevator
	 * controller treats the matrix vertically. We also want x
	 * to be interpreted as from bottom to top, not top to bottom.
	 */
	ledmatrix_update_pixel(15 - y, x, colour); 
     394:	8f e0       	ldi	r24, 0x0F	; 15
     396:	89 1b       	sub	r24, r25
     398:	0e 94 e6 03 	call	0x7cc	; 0x7cc <ledmatrix_update_pixel>
     39c:	08 95       	ret

0000039e <initialise_hardware>:
 * @arg none
 * @retval none
*/
void initialise_hardware(void) {
	
	ledmatrix_setup();
     39e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <ledmatrix_setup>
	init_button_interrupts();
     3a2:	0e 94 8d 00 	call	0x11a	; 0x11a <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	7b e4       	ldi	r23, 0x4B	; 75
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 8c 04 	call	0x918	; 0x918 <init_serial_stdio>
	
	init_timer0();
     3b4:	0e 94 c0 05 	call	0xb80	; 0xb80 <init_timer0>
	
	// Turn on global interrupts
	sei();
     3b8:	78 94       	sei
     3ba:	08 95       	ret

000003bc <start_screen>:
/**
 * @brief Displays the "EC" start screen with elevator symbol
 * @arg none
 * @retval none
*/
void start_screen(void) {
     3bc:	8f 92       	push	r8
     3be:	9f 92       	push	r9
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     3d0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <clear_terminal>
	move_terminal_cursor(10,10);
     3d4:	6a e0       	ldi	r22, 0x0A	; 10
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <move_terminal_cursor>
	printf_P(PSTR("Elevator Controller"));
     3e0:	8a eb       	ldi	r24, 0xBA	; 186
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	9f 93       	push	r25
     3e6:	8f 93       	push	r24
     3e8:	0e 94 a2 06 	call	0xd44	; 0xd44 <printf_P>
	move_terminal_cursor(10,12);
     3ec:	6c e0       	ldi	r22, 0x0C	; 12
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <move_terminal_cursor>
	printf_P(PSTR("CSSE2010 project by Lachlan Holliday"));
     3f8:	85 e9       	ldi	r24, 0x95	; 149
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	9f 93       	push	r25
     3fe:	8f 93       	push	r24
     400:	0e 94 a2 06 	call	0xd44	; 0xd44 <printf_P>
	move_terminal_cursor(10,14);
     404:	6e e0       	ldi	r22, 0x0E	; 14
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	8a e0       	ldi	r24, 0x0A	; 10
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <move_terminal_cursor>
	printf_P(PSTR("Student Number: 48840468"));
     410:	8c e7       	ldi	r24, 0x7C	; 124
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	0e 94 a2 06 	call	0xd44	; 0xd44 <printf_P>
	
	// Show start screen
	start_display();
     41c:	0e 94 0e 01 	call	0x21c	; 0x21c <start_display>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
	
	// Animation variables
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
	uint8_t frame = 0;
	uint8_t doors_opening_closing = 1; // 1 => opening, 0 => closing
     42c:	d1 e0       	ldi	r29, 0x01	; 1
	start_display();
	
	// Animation variables
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
	uint8_t frame = 0;
     42e:	c0 e0       	ldi	r28, 0x00	; 0
	// Show start screen
	start_display();
	
	// Animation variables
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
     430:	0f 2e       	mov	r0, r31
     432:	f6 e9       	ldi	r31, 0x96	; 150
     434:	8f 2e       	mov	r8, r31
     436:	91 2c       	mov	r9, r1
     438:	a1 2c       	mov	r10, r1
     43a:	b1 2c       	mov	r11, r1
     43c:	f0 2d       	mov	r31, r0
	
	// Show start screen
	start_display();
	
	// Animation variables
	uint32_t doors_frame_time = 0;
     43e:	c1 2c       	mov	r12, r1
     440:	d1 2c       	mov	r13, r1
     442:	76 01       	movw	r14, r12
	// Wait until a button is pressed, or 's' is pressed on the terminal
	while(1) {
		
		// Don't worry about this if/else tree. Its purely for animating
		// the elevator doors on the start screen
		if (get_current_time() - doors_frame_time  > interval_delay) {
     444:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_current_time>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	8c 19       	sub	r24, r12
     44e:	9d 09       	sbc	r25, r13
     450:	ae 09       	sbc	r26, r14
     452:	bf 09       	sbc	r27, r15
     454:	88 16       	cp	r8, r24
     456:	99 06       	cpc	r9, r25
     458:	aa 06       	cpc	r10, r26
     45a:	bb 06       	cpc	r11, r27
     45c:	c0 f5       	brcc	.+112    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			start_display_animation(frame);
     45e:	8c 2f       	mov	r24, r28
     460:	0e 94 55 01 	call	0x2aa	; 0x2aa <start_display_animation>
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
     464:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_current_time>
     468:	6b 01       	movw	r12, r22
     46a:	7c 01       	movw	r14, r24
			if (doors_opening_closing) {
     46c:	dd 23       	and	r29, r29
     46e:	b1 f0       	breq	.+44     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
				interval_delay = 150;
				frame++;
     470:	cf 5f       	subi	r28, 0xFF	; 255
				if (frame == 1) interval_delay = 2000;
     472:	c1 30       	cpi	r28, 0x01	; 1
     474:	41 f0       	breq	.+16     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		// the elevator doors on the start screen
		if (get_current_time() - doors_frame_time  > interval_delay) {
			start_display_animation(frame);
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
			if (doors_opening_closing) {
				interval_delay = 150;
     476:	0f 2e       	mov	r0, r31
     478:	f6 e9       	ldi	r31, 0x96	; 150
     47a:	8f 2e       	mov	r8, r31
     47c:	91 2c       	mov	r9, r1
     47e:	a1 2c       	mov	r10, r1
     480:	b1 2c       	mov	r11, r1
     482:	f0 2d       	mov	r31, r0
     484:	08 c0       	rjmp	.+16     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
				frame++;
				if (frame == 1) interval_delay = 2000;
     486:	0f 2e       	mov	r0, r31
     488:	f0 ed       	ldi	r31, 0xD0	; 208
     48a:	8f 2e       	mov	r8, r31
     48c:	f7 e0       	ldi	r31, 0x07	; 7
     48e:	9f 2e       	mov	r9, r31
     490:	a1 2c       	mov	r10, r1
     492:	b1 2c       	mov	r11, r1
     494:	f0 2d       	mov	r31, r0
				if (frame == 3) doors_opening_closing = 0;
     496:	c3 30       	cpi	r28, 0x03	; 3
     498:	d1 f4       	brne	.+52     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     49a:	16 c0       	rjmp	.+44     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
			} else {
				interval_delay = 150;
				frame--;
     49c:	c1 50       	subi	r28, 0x01	; 1
				if (frame == 2) interval_delay = 500;
     49e:	c2 30       	cpi	r28, 0x02	; 2
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
				interval_delay = 150;
				frame++;
				if (frame == 1) interval_delay = 2000;
				if (frame == 3) doors_opening_closing = 0;
			} else {
				interval_delay = 150;
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f6 e9       	ldi	r31, 0x96	; 150
     4a6:	8f 2e       	mov	r8, r31
     4a8:	91 2c       	mov	r9, r1
     4aa:	a1 2c       	mov	r10, r1
     4ac:	b1 2c       	mov	r11, r1
     4ae:	f0 2d       	mov	r31, r0
     4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				frame--;
				if (frame == 2) interval_delay = 500;
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f4 ef       	ldi	r31, 0xF4	; 244
     4b6:	8f 2e       	mov	r8, r31
     4b8:	99 24       	eor	r9, r9
     4ba:	93 94       	inc	r9
     4bc:	a1 2c       	mov	r10, r1
     4be:	b1 2c       	mov	r11, r1
     4c0:	f0 2d       	mov	r31, r0
				if (frame == 0) doors_opening_closing = 1;
     4c2:	cc 23       	and	r28, r28
     4c4:	19 f0       	breq	.+6      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
			if (doors_opening_closing) {
				interval_delay = 150;
				frame++;
				if (frame == 1) interval_delay = 2000;
				if (frame == 3) doors_opening_closing = 0;
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			} else {
				interval_delay = 150;
				frame--;
				if (frame == 2) interval_delay = 500;
				if (frame == 0) doors_opening_closing = 1;
     4cc:	d1 e0       	ldi	r29, 0x01	; 1
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     4ce:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <serial_input_available>
     4d2:	88 23       	and	r24, r24
     4d4:	39 f0       	breq	.+14     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			serial_input = fgetc(stdin);
     4d6:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__iob>
     4da:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__iob+0x1>
     4de:	0e 94 4e 06 	call	0xc9c	; 0xc9c <fgetc>
     4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     4e6:	83 37       	cpi	r24, 0x73	; 115
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     4ea:	83 35       	cpi	r24, 0x53	; 83
     4ec:	29 f0       	breq	.+10     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     4ee:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     4f2:	8f 3f       	cpi	r24, 0xFF	; 255
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     4f6:	a6 cf       	rjmp	.-180    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			break;
		}
	}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	bf 90       	pop	r11
     506:	af 90       	pop	r10
     508:	9f 90       	pop	r9
     50a:	8f 90       	pop	r8
     50c:	08 95       	ret

0000050e <draw_floors>:
/**
 * @brief Draws 4 lines of "FLOOR" coloured pixels
 * @arg none
 * @retval none
*/
void draw_floors(void) {
     50e:	cf 93       	push	r28
	for (uint8_t i = 0; i < WIDTH; i++) {
     510:	c0 e0       	ldi	r28, 0x00	; 0
     512:	15 c0       	rjmp	.+42     	; 0x53e <draw_floors+0x30>
		update_square_colour(i, FLOOR_0, FLOOR);
     514:	42 e0       	ldi	r20, 0x02	; 2
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	8c 2f       	mov	r24, r28
     51a:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_1, FLOOR);
     51e:	42 e0       	ldi	r20, 0x02	; 2
     520:	64 e0       	ldi	r22, 0x04	; 4
     522:	8c 2f       	mov	r24, r28
     524:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_2, FLOOR);
     528:	42 e0       	ldi	r20, 0x02	; 2
     52a:	68 e0       	ldi	r22, 0x08	; 8
     52c:	8c 2f       	mov	r24, r28
     52e:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_3, FLOOR);
     532:	42 e0       	ldi	r20, 0x02	; 2
     534:	6c e0       	ldi	r22, 0x0C	; 12
     536:	8c 2f       	mov	r24, r28
     538:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
 * @brief Draws 4 lines of "FLOOR" coloured pixels
 * @arg none
 * @retval none
*/
void draw_floors(void) {
	for (uint8_t i = 0; i < WIDTH; i++) {
     53c:	cf 5f       	subi	r28, 0xFF	; 255
     53e:	c8 30       	cpi	r28, 0x08	; 8
     540:	48 f3       	brcs	.-46     	; 0x514 <draw_floors+0x6>
		update_square_colour(i, FLOOR_0, FLOOR);
		update_square_colour(i, FLOOR_1, FLOOR);
		update_square_colour(i, FLOOR_2, FLOOR);
		update_square_colour(i, FLOOR_3, FLOOR);
	}
}
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <draw_elevator>:
/**
 * @brief Draws the elevator at the current_position
 * @arg none
 * @retval none
*/
void draw_elevator(void) {
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	static uint8_t old_position; // static variables maintain their value, every time the function is called
	
	int8_t y = 0; // Height position to draw elevator (i.e. y axis)
	
	// Clear where the elevator was
	if (old_position > current_position) { // Elevator going down - clear above
     54a:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <old_position.2276>
     54e:	26 2f       	mov	r18, r22
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <current_position>
     556:	08 2e       	mov	r0, r24
     558:	00 0c       	add	r0, r0
     55a:	99 0b       	sbc	r25, r25
     55c:	82 17       	cp	r24, r18
     55e:	93 07       	cpc	r25, r19
     560:	1c f4       	brge	.+6      	; 0x568 <draw_elevator+0x22>
		y = old_position + 3;
     562:	c3 e0       	ldi	r28, 0x03	; 3
     564:	c6 0f       	add	r28, r22
     566:	07 c0       	rjmp	.+14     	; 0x576 <draw_elevator+0x30>
		} else if (old_position < current_position) { // Elevator going up - clear below
     568:	28 17       	cp	r18, r24
     56a:	39 07       	cpc	r19, r25
     56c:	1c f4       	brge	.+6      	; 0x574 <draw_elevator+0x2e>
		y = old_position + 1;
     56e:	c1 e0       	ldi	r28, 0x01	; 1
     570:	c6 0f       	add	r28, r22
     572:	01 c0       	rjmp	.+2      	; 0x576 <draw_elevator+0x30>
void draw_elevator(void) {
	
	// Store where it used to be with old_position
	static uint8_t old_position; // static variables maintain their value, every time the function is called
	
	int8_t y = 0; // Height position to draw elevator (i.e. y axis)
     574:	c0 e0       	ldi	r28, 0x00	; 0
	if (old_position > current_position) { // Elevator going down - clear above
		y = old_position + 3;
		} else if (old_position < current_position) { // Elevator going up - clear below
		y = old_position + 1;
	}
	if (y % 4 != 0) { // Do not draw over the floor's LEDs
     576:	8c 2f       	mov	r24, r28
     578:	83 70       	andi	r24, 0x03	; 3
     57a:	51 f0       	breq	.+20     	; 0x590 <draw_elevator+0x4a>
		update_square_colour(1, y, EMPTY_SQUARE);
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	6c 2f       	mov	r22, r28
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(2, y, EMPTY_SQUARE);
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	6c 2f       	mov	r22, r28
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
	}
	old_position = current_position;
     590:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <current_position>
     594:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <old_position.2276>
	
	// Draw a 2x3 block representing the elevator
	for (uint8_t i = 1; i <= 3; i++) { // 3 is the height of the elevator sprite on the LED matrix
     598:	c1 e0       	ldi	r28, 0x01	; 1
     59a:	11 c0       	rjmp	.+34     	; 0x5be <draw_elevator+0x78>
		y = current_position + i; // Adds current floor position to i=1->3 to draw elevator as 3-high block
     59c:	d0 91 87 01 	lds	r29, 0x0187	; 0x800187 <current_position>
     5a0:	dc 0f       	add	r29, r28
		if (y % 4 != 0) { // Do not draw on the floor
     5a2:	8d 2f       	mov	r24, r29
     5a4:	83 70       	andi	r24, 0x03	; 3
     5a6:	51 f0       	breq	.+20     	; 0x5bc <draw_elevator+0x76>
			update_square_colour(1, y, ELEVATOR);
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	6d 2f       	mov	r22, r29
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
			update_square_colour(2, y, ELEVATOR); // Elevator is 2 LEDs wide so draw twice
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	6d 2f       	mov	r22, r29
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(2, y, EMPTY_SQUARE);
	}
	old_position = current_position;
	
	// Draw a 2x3 block representing the elevator
	for (uint8_t i = 1; i <= 3; i++) { // 3 is the height of the elevator sprite on the LED matrix
     5bc:	cf 5f       	subi	r28, 0xFF	; 255
     5be:	c4 30       	cpi	r28, 0x04	; 4
     5c0:	68 f3       	brcs	.-38     	; 0x59c <draw_elevator+0x56>
		if (y % 4 != 0) { // Do not draw on the floor
			update_square_colour(1, y, ELEVATOR);
			update_square_colour(2, y, ELEVATOR); // Elevator is 2 LEDs wide so draw twice
		}
	}
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <handle_inputs>:
		with the particular button that was pressed.
	
	*/
	
	// We need to check if any button has been pushed
	uint8_t btn = button_pushed();
     5c8:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
	
	if (btn == BUTTON0_PUSHED) {
     5cc:	81 11       	cpse	r24, r1
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <handle_inputs+0xe>
		// Move to Floor 0
		destination = FLOOR_0;
     5d0:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <destination>
     5d4:	11 c0       	rjmp	.+34     	; 0x5f8 <handle_inputs+0x30>
	} else if (btn == BUTTON1_PUSHED) {
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	21 f4       	brne	.+8      	; 0x5e2 <handle_inputs+0x1a>
		// Move to Floor 1
		destination = FLOOR_1;
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <destination>
     5e0:	0b c0       	rjmp	.+22     	; 0x5f8 <handle_inputs+0x30>
	} else if (btn == BUTTON2_PUSHED) {
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	21 f4       	brne	.+8      	; 0x5ee <handle_inputs+0x26>
		// Move to Floor 2
		destination = FLOOR_2;
     5e6:	88 e0       	ldi	r24, 0x08	; 8
     5e8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <destination>
     5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <handle_inputs+0x30>
	
	} else if (btn == BUTTON3_PUSHED) {
     5ee:	83 30       	cpi	r24, 0x03	; 3
     5f0:	19 f4       	brne	.+6      	; 0x5f8 <handle_inputs+0x30>
		// Move to Floor 3
		destination = FLOOR_3;
     5f2:	8c e0       	ldi	r24, 0x0C	; 12
     5f4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <destination>
	// Check for if a '0, 1, 2, 3' is pressed
	// There are two steps to this
	// 1) collect any serial input (if available)
	// 2) check if the input is equal to the character 's'
	char serial_input = -1;
	if (serial_input_available()) {
     5f8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <serial_input_available>
     5fc:	88 23       	and	r24, r24
     5fe:	39 f0       	breq	.+14     	; 0x60e <handle_inputs+0x46>
		serial_input = fgetc(stdin);
     600:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__iob>
     604:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__iob+0x1>
     608:	0e 94 4e 06 	call	0xc9c	; 0xc9c <fgetc>
     60c:	01 c0       	rjmp	.+2      	; 0x610 <handle_inputs+0x48>
	
	// Check for if a '0, 1, 2, 3' is pressed
	// There are two steps to this
	// 1) collect any serial input (if available)
	// 2) check if the input is equal to the character 's'
	char serial_input = -1;
     60e:	8f ef       	ldi	r24, 0xFF	; 255
	if (serial_input_available()) {
		serial_input = fgetc(stdin);
	}
	// If the serial input is 's', then exit the start screen
	if (serial_input == '0') {
     610:	80 33       	cpi	r24, 0x30	; 48
     612:	19 f4       	brne	.+6      	; 0x61a <handle_inputs+0x52>
		destination = FLOOR_0;
     614:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <destination>
     618:	08 95       	ret
	} else if (serial_input == '1') {
     61a:	81 33       	cpi	r24, 0x31	; 49
     61c:	21 f4       	brne	.+8      	; 0x626 <handle_inputs+0x5e>
		destination = FLOOR_1;
     61e:	84 e0       	ldi	r24, 0x04	; 4
     620:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <destination>
     624:	08 95       	ret
	} else if (serial_input == '2') {
     626:	82 33       	cpi	r24, 0x32	; 50
     628:	21 f4       	brne	.+8      	; 0x632 <handle_inputs+0x6a>
		destination = FLOOR_2;
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <destination>
     630:	08 95       	ret
	} else if (serial_input == '3') {
     632:	83 33       	cpi	r24, 0x33	; 51
     634:	19 f4       	brne	.+6      	; 0x63c <handle_inputs+0x74>
		destination = FLOOR_3;
     636:	8c e0       	ldi	r24, 0x0C	; 12
     638:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <destination>
     63c:	08 95       	ret

0000063e <start_elevator_emulator>:
 * @retval none
*/
void start_elevator_emulator(void) {
	
	// Clear the serial terminal
	clear_terminal();
     63e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <clear_terminal>
	
	// Initialise Display
	initialise_display();
     642:	0e 94 0b 01 	call	0x216	; 0x216 <initialise_display>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     646:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
	clear_serial_input_buffer();
     64a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <clear_serial_input_buffer>

	time_since_move = get_current_time();
     64e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_current_time>
     652:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <time_since_move>
     656:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <time_since_move+0x1>
     65a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <time_since_move+0x2>
     65e:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <time_since_move+0x3>
	
	current_position = FLOOR_0;
     662:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <current_position>
	destination      = FLOOR_0;
     666:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <destination>
	current_floor    = FLOOR_0;
     66a:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <current_floor>
	direction        = "Stationary";
     66e:	8e e2       	ldi	r24, 0x2E	; 46
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <direction+0x1>
     676:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <direction>
	moved            = true;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <moved>
	
	
	// Draw the floors and elevator
	draw_elevator();
     680:	0e 94 a3 02 	call	0x546	; 0x546 <draw_elevator>
	draw_floors();
     684:	0e 94 87 02 	call	0x50e	; 0x50e <draw_floors>
	
	current_position = FLOOR_0;
     688:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <current_position>
	destination = FLOOR_0;
     68c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <destination>
	
	while(true) {
		
		// Only update the elevator every 200 ms
		if (get_current_time() - time_since_move > 200) {	
     690:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_current_time>
     694:	00 91 7f 01 	lds	r16, 0x017F	; 0x80017f <time_since_move>
     698:	10 91 80 01 	lds	r17, 0x0180	; 0x800180 <time_since_move+0x1>
     69c:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <time_since_move+0x2>
     6a0:	30 91 82 01 	lds	r19, 0x0182	; 0x800182 <time_since_move+0x3>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	80 1b       	sub	r24, r16
     6aa:	91 0b       	sbc	r25, r17
     6ac:	a2 0b       	sbc	r26, r18
     6ae:	b3 0b       	sbc	r27, r19
     6b0:	89 3c       	cpi	r24, 0xC9	; 201
     6b2:	91 05       	cpc	r25, r1
     6b4:	a1 05       	cpc	r26, r1
     6b6:	b1 05       	cpc	r27, r1
     6b8:	08 f4       	brcc	.+2      	; 0x6bc <start_elevator_emulator+0x7e>
     6ba:	43 c0       	rjmp	.+134    	; 0x742 <start_elevator_emulator+0x104>
			
			
			

			// Adjust the elevator based on where it needs to go
			if (destination - current_position > 0) { // Move up
     6bc:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <current_position>
     6c0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <destination>
     6c4:	08 2e       	mov	r0, r24
     6c6:	00 0c       	add	r0, r0
     6c8:	99 0b       	sbc	r25, r25
     6ca:	82 1b       	sub	r24, r18
     6cc:	91 09       	sbc	r25, r1
     6ce:	27 fd       	sbrc	r18, 7
     6d0:	93 95       	inc	r25
     6d2:	18 16       	cp	r1, r24
     6d4:	19 06       	cpc	r1, r25
     6d6:	6c f4       	brge	.+26     	; 0x6f2 <start_elevator_emulator+0xb4>
				current_position++;
     6d8:	2f 5f       	subi	r18, 0xFF	; 255
     6da:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <current_position>
				moved = true;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <moved>
				direction = "Up";
     6e4:	89 e3       	ldi	r24, 0x39	; 57
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <direction+0x1>
     6ec:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <direction>
     6f0:	15 c0       	rjmp	.+42     	; 0x71c <start_elevator_emulator+0xde>
			} else if (destination - current_position < 0) { // Move down
     6f2:	99 23       	and	r25, r25
     6f4:	6c f4       	brge	.+26     	; 0x710 <start_elevator_emulator+0xd2>
				current_position--;
     6f6:	21 50       	subi	r18, 0x01	; 1
     6f8:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <current_position>
				moved = true;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <moved>

				direction = "Down";
     702:	8c e3       	ldi	r24, 0x3C	; 60
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <direction+0x1>
     70a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <direction>
     70e:	06 c0       	rjmp	.+12     	; 0x71c <start_elevator_emulator+0xde>
			} else {
				direction = "Stationary";
     710:	8e e2       	ldi	r24, 0x2E	; 46
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <direction+0x1>
     718:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <direction>
			}
			
			 if (current_position % 4 == 0) {
     71c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <current_position>
     720:	98 2f       	mov	r25, r24
     722:	93 70       	andi	r25, 0x03	; 3
     724:	11 f4       	brne	.+4      	; 0x72a <start_elevator_emulator+0xec>
				 current_floor = current_position;
     726:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <current_floor>
			 }
			
			// As we have potentially changed the elevator position, lets redraw it
			draw_elevator();
     72a:	0e 94 a3 02 	call	0x546	; 0x546 <draw_elevator>
			
			time_since_move = get_current_time(); // Reset delay until next movement update
     72e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_current_time>
     732:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <time_since_move>
     736:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <time_since_move+0x1>
     73a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <time_since_move+0x2>
     73e:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <time_since_move+0x3>
		}
		if (moved) {
     742:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <moved>
     746:	88 23       	and	r24, r24
     748:	a1 f1       	breq	.+104    	; 0x7b2 <start_elevator_emulator+0x174>
			clear_terminal();
     74a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <clear_terminal>
            uint8_t floor_num = current_floor / 4;
     74e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <current_floor>
     752:	88 23       	and	r24, r24
     754:	0c f4       	brge	.+2      	; 0x758 <start_elevator_emulator+0x11a>
     756:	8d 5f       	subi	r24, 0xFD	; 253
     758:	18 2f       	mov	r17, r24
     75a:	15 95       	asr	r17
     75c:	15 95       	asr	r17
			move_terminal_cursor(10,10);
     75e:	6a e0       	ldi	r22, 0x0A	; 10
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	8a e0       	ldi	r24, 0x0A	; 10
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 a6 05 	call	0xb4c	; 0xb4c <move_terminal_cursor>
			printf("Current Level: %d", floor_num);
     76a:	1f 92       	push	r1
     76c:	1f 93       	push	r17
     76e:	81 e4       	ldi	r24, 0x41	; 65
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	0e 94 8c 06 	call	0xd18	; 0xd18 <printf>
			move_terminal_cursor(10,12);
     77a:	6c e0       	ldi	r22, 0x0C	; 12
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	8a e0       	ldi	r24, 0x0A	; 10
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 a6 05 	call	0xb4c	; 0xb4c <move_terminal_cursor>
			printf("Direction: %s", direction);
     786:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <direction+0x1>
     78a:	8f 93       	push	r24
     78c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <direction>
     790:	8f 93       	push	r24
     792:	83 e5       	ldi	r24, 0x53	; 83
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	0e 94 8c 06 	call	0xd18	; 0xd18 <printf>
			moved = false;
     79e:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <moved>
     7a2:	8d b7       	in	r24, 0x3d	; 61
     7a4:	9e b7       	in	r25, 0x3e	; 62
     7a6:	08 96       	adiw	r24, 0x08	; 8
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	9e bf       	out	0x3e, r25	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	8d bf       	out	0x3d, r24	; 61
		}
		
		// Handle any button or key inputs
		handle_inputs();
     7b2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <handle_inputs>
	}
     7b6:	6c cf       	rjmp	.-296    	; 0x690 <start_elevator_emulator+0x52>

000007b8 <main>:
/* Main */

int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     7b8:	0e 94 cf 01 	call	0x39e	; 0x39e <initialise_hardware>
	
	// Show the splash screen message. Returns when display is complete
	start_screen();
     7bc:	0e 94 de 01 	call	0x3bc	; 0x3bc <start_screen>
	
	// Start elevator controller software
	start_elevator_emulator();
     7c0:	0e 94 1f 03 	call	0x63e	; 0x63e <start_elevator_emulator>

000007c4 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     7c4:	80 e8       	ldi	r24, 0x80	; 128
     7c6:	0e 94 74 05 	call	0xae8	; 0xae8 <spi_setup_master>
     7ca:	08 95       	ret

000007cc <ledmatrix_update_pixel>:
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	80 31       	cpi	r24, 0x10	; 16
     7d4:	b0 f4       	brcc	.+44     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7d6:	68 30       	cpi	r22, 0x08	; 8
     7d8:	a0 f4       	brcc	.+40     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7da:	14 2f       	mov	r17, r20
     7dc:	c6 2f       	mov	r28, r22
     7de:	d8 2f       	mov	r29, r24
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	0e 94 a0 05 	call	0xb40	; 0xb40 <spi_send_byte>
     7e6:	6c 2f       	mov	r22, r28
     7e8:	67 70       	andi	r22, 0x07	; 7
     7ea:	80 e1       	ldi	r24, 0x10	; 16
     7ec:	68 9f       	mul	r22, r24
     7ee:	90 01       	movw	r18, r0
     7f0:	11 24       	eor	r1, r1
     7f2:	8d 2f       	mov	r24, r29
     7f4:	8f 70       	andi	r24, 0x0F	; 15
     7f6:	82 2b       	or	r24, r18
     7f8:	0e 94 a0 05 	call	0xb40	; 0xb40 <spi_send_byte>
     7fc:	81 2f       	mov	r24, r17
     7fe:	0e 94 a0 05 	call	0xb40	; 0xb40 <spi_send_byte>
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	08 95       	ret

0000080a <ledmatrix_update_column>:
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	80 31       	cpi	r24, 0x10	; 16
     812:	a0 f4       	brcc	.+40     	; 0x83c <ledmatrix_update_column+0x32>
     814:	8b 01       	movw	r16, r22
     816:	c8 2f       	mov	r28, r24
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	0e 94 a0 05 	call	0xb40	; 0xb40 <spi_send_byte>
     81e:	8c 2f       	mov	r24, r28
     820:	8f 70       	andi	r24, 0x0F	; 15
     822:	0e 94 a0 05 	call	0xb40	; 0xb40 <spi_send_byte>
     826:	c0 e0       	ldi	r28, 0x00	; 0
     828:	07 c0       	rjmp	.+14     	; 0x838 <ledmatrix_update_column+0x2e>
     82a:	f8 01       	movw	r30, r16
     82c:	ec 0f       	add	r30, r28
     82e:	f1 1d       	adc	r31, r1
     830:	80 81       	ld	r24, Z
     832:	0e 94 a0 05 	call	0xb40	; 0xb40 <spi_send_byte>
     836:	cf 5f       	subi	r28, 0xFF	; 255
     838:	c8 30       	cpi	r28, 0x08	; 8
     83a:	b8 f3       	brcs	.-18     	; 0x82a <ledmatrix_update_column+0x20>
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     844:	8f e0       	ldi	r24, 0x0F	; 15
     846:	0e 94 a0 05 	call	0xb40	; 0xb40 <spi_send_byte>
     84a:	08 95       	ret

0000084c <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     84c:	cf 93       	push	r28
     84e:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     850:	8a 30       	cpi	r24, 0x0A	; 10
     852:	19 f4       	brne	.+6      	; 0x85a <uart_put_char+0xe>
		uart_put_char('\r', stream);
     854:	8d e0       	ldi	r24, 0x0D	; 13
     856:	0e 94 26 04 	call	0x84c	; 0x84c <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     85a:	9f b7       	in	r25, 0x3f	; 63
     85c:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     85e:	02 c0       	rjmp	.+4      	; 0x864 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     860:	99 23       	and	r25, r25
     862:	29 f1       	breq	.+74     	; 0x8ae <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     864:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     868:	8f 3f       	cpi	r24, 0xFF	; 255
     86a:	d1 f3       	breq	.-12     	; 0x860 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     86c:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     86e:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <out_insert_pos>
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	8e 0f       	add	r24, r30
     876:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <out_insert_pos>
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	e6 57       	subi	r30, 0x76	; 118
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     882:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     886:	8f 5f       	subi	r24, 0xFF	; 255
     888:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     88c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <out_insert_pos>
     890:	8f 3f       	cpi	r24, 0xFF	; 255
     892:	11 f4       	brne	.+4      	; 0x898 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     894:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     898:	e1 ec       	ldi	r30, 0xC1	; 193
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	80 62       	ori	r24, 0x20	; 32
     8a0:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     8a2:	99 23       	and	r25, r25
     8a4:	39 f0       	breq	.+14     	; 0x8b4 <uart_put_char+0x68>
		sei();
     8a6:	78 94       	sei
	}
	return 0;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
}
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     8bc:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     8c0:	88 23       	and	r24, r24
     8c2:	e1 f3       	breq	.-8      	; 0x8bc <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     8c4:	2f b7       	in	r18, 0x3f	; 63
     8c6:	20 78       	andi	r18, 0x80	; 128
	cli();
     8c8:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     8ca:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <input_insert_pos>
     8ce:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <bytes_in_input_buffer>
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	83 1b       	sub	r24, r19
     8d6:	91 09       	sbc	r25, r1
     8d8:	5a f4       	brpl	.+22     	; 0x8f0 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     8da:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <input_insert_pos>
     8de:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	e8 1b       	sub	r30, r24
     8e6:	f1 09       	sbc	r31, r1
     8e8:	e6 56       	subi	r30, 0x66	; 102
     8ea:	fd 4f       	sbci	r31, 0xFD	; 253
     8ec:	80 81       	ld	r24, Z
     8ee:	0a c0       	rjmp	.+20     	; 0x904 <__stack+0x5>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     8f0:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <input_insert_pos>
     8f4:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	e8 1b       	sub	r30, r24
     8fc:	f1 09       	sbc	r31, r1
     8fe:	e6 57       	subi	r30, 0x76	; 118
     900:	fd 4f       	sbci	r31, 0xFD	; 253
     902:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     904:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <bytes_in_input_buffer>
     908:	91 50       	subi	r25, 0x01	; 1
     90a:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <bytes_in_input_buffer>
	if(interrupts_enabled) {
     90e:	22 23       	and	r18, r18
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
		sei();
     912:	78 94       	sei
	}	
	return c;
}
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	08 95       	ret

00000918 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     918:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <out_insert_pos>
	bytes_in_out_buffer = 0;
     91c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <bytes_in_out_buffer>
	input_insert_pos = 0;
     920:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <input_insert_pos>
	bytes_in_input_buffer = 0;
     924:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <bytes_in_input_buffer>
	input_overrun = 0;
     928:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     92c:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	aa 1f       	adc	r26, r26
     93a:	bb 1f       	adc	r27, r27
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	aa 1f       	adc	r26, r26
     942:	bb 1f       	adc	r27, r27
     944:	9c 01       	movw	r18, r24
     946:	ad 01       	movw	r20, r26
     948:	22 0f       	add	r18, r18
     94a:	33 1f       	adc	r19, r19
     94c:	44 1f       	adc	r20, r20
     94e:	55 1f       	adc	r21, r21
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	72 e1       	ldi	r23, 0x12	; 18
     954:	8a e7       	ldi	r24, 0x7A	; 122
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__divmodsi4>
     95c:	ba 01       	movw	r22, r20
     95e:	a9 01       	movw	r20, r18
     960:	4f 5f       	subi	r20, 0xFF	; 255
     962:	5f 4f       	sbci	r21, 0xFF	; 255
     964:	6f 4f       	sbci	r22, 0xFF	; 255
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	db 01       	movw	r26, r22
     96a:	ca 01       	movw	r24, r20
     96c:	1a f4       	brpl	.+6      	; 0x974 <init_serial_stdio+0x5c>
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	a1 1d       	adc	r26, r1
     972:	b1 1d       	adc	r27, r1
     974:	b5 95       	asr	r27
     976:	a7 95       	ror	r26
     978:	97 95       	ror	r25
     97a:	87 95       	ror	r24
     97c:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     97e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     982:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     986:	e1 ec       	ldi	r30, 0xC1	; 193
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	88 e1       	ldi	r24, 0x18	; 24
     98c:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     98e:	80 81       	ld	r24, Z
     990:	80 68       	ori	r24, 0x80	; 128
     992:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     994:	ec e9       	ldi	r30, 0x9C	; 156
     996:	f2 e0       	ldi	r31, 0x02	; 2
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	93 83       	std	Z+3, r25	; 0x03
     99e:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     9a0:	91 83       	std	Z+1, r25	; 0x01
     9a2:	80 83       	st	Z, r24
     9a4:	08 95       	ret

000009a6 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     9a6:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <bytes_in_input_buffer>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	91 11       	cpse	r25, r1
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <serial_input_available+0xc>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
}
     9b2:	08 95       	ret

000009b4 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     9b4:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <input_insert_pos>
	bytes_in_input_buffer = 0;
     9b8:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <bytes_in_input_buffer>
     9bc:	08 95       	ret

000009be <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	2f 93       	push	r18
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     9d2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     9d6:	88 23       	and	r24, r24
     9d8:	29 f1       	breq	.+74     	; 0xa24 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     9da:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <out_insert_pos>
     9de:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <bytes_in_out_buffer>
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	82 1b       	sub	r24, r18
     9e6:	91 09       	sbc	r25, r1
     9e8:	5a f4       	brpl	.+22     	; 0xa00 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     9ea:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <out_insert_pos>
     9ee:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	e8 1b       	sub	r30, r24
     9f6:	f1 09       	sbc	r31, r1
     9f8:	e7 57       	subi	r30, 0x77	; 119
     9fa:	fd 4f       	sbci	r31, 0xFD	; 253
     9fc:	90 81       	ld	r25, Z
     9fe:	0a c0       	rjmp	.+20     	; 0xa14 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     a00:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <out_insert_pos>
     a04:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	e8 1b       	sub	r30, r24
     a0c:	f1 09       	sbc	r31, r1
     a0e:	e6 57       	subi	r30, 0x76	; 118
     a10:	fe 4f       	sbci	r31, 0xFE	; 254
     a12:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     a14:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     a18:	81 50       	subi	r24, 0x01	; 1
     a1a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     a1e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a22:	05 c0       	rjmp	.+10     	; 0xa2e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     a24:	e1 ec       	ldi	r30, 0xC1	; 193
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	8f 7d       	andi	r24, 0xDF	; 223
     a2c:	80 83       	st	Z, r24
	}
}
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	4f 93       	push	r20
     a52:	5f 93       	push	r21
     a54:	6f 93       	push	r22
     a56:	7f 93       	push	r23
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	cf 93       	push	r28
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     a66:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     a6a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <do_echo>
     a6e:	88 23       	and	r24, r24
     a70:	49 f0       	breq	.+18     	; 0xa84 <__vector_20+0x42>
     a72:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bytes_in_out_buffer>
     a76:	8f 3f       	cpi	r24, 0xFF	; 255
     a78:	29 f0       	breq	.+10     	; 0xa84 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	8c 2f       	mov	r24, r28
     a80:	0e 94 26 04 	call	0x84c	; 0x84c <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     a84:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     a88:	80 31       	cpi	r24, 0x10	; 16
     a8a:	20 f0       	brcs	.+8      	; 0xa94 <__vector_20+0x52>
		input_overrun = 1;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <input_overrun>
     a92:	18 c0       	rjmp	.+48     	; 0xac4 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     a94:	cd 30       	cpi	r28, 0x0D	; 13
     a96:	09 f4       	brne	.+2      	; 0xa9a <__vector_20+0x58>
			c = '\n';
     a98:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     a9a:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <input_insert_pos>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	8e 0f       	add	r24, r30
     aa2:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <input_insert_pos>
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	e6 57       	subi	r30, 0x76	; 118
     aaa:	fd 4f       	sbci	r31, 0xFD	; 253
     aac:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     aae:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <bytes_in_input_buffer>
     ab2:	8f 5f       	subi	r24, 0xFF	; 255
     ab4:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     ab8:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <input_insert_pos>
     abc:	80 31       	cpi	r24, 0x10	; 16
     abe:	11 f4       	brne	.+4      	; 0xac4 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     ac0:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <input_insert_pos>
		}
	}
}
     ac4:	ff 91       	pop	r31
     ac6:	ef 91       	pop	r30
     ac8:	cf 91       	pop	r28
     aca:	bf 91       	pop	r27
     acc:	af 91       	pop	r26
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	7f 91       	pop	r23
     ad4:	6f 91       	pop	r22
     ad6:	5f 91       	pop	r21
     ad8:	4f 91       	pop	r20
     ada:	3f 91       	pop	r19
     adc:	2f 91       	pop	r18
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
     ae8:	94 b1       	in	r25, 0x04	; 4
     aea:	90 6b       	ori	r25, 0xB0	; 176
     aec:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
     aee:	95 b1       	in	r25, 0x05	; 5
     af0:	90 61       	ori	r25, 0x10	; 16
     af2:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     af4:	90 e5       	ldi	r25, 0x50	; 80
     af6:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
     af8:	88 30       	cpi	r24, 0x08	; 8
     afa:	21 f0       	breq	.+8      	; 0xb04 <spi_setup_master+0x1c>
     afc:	80 32       	cpi	r24, 0x20	; 32
     afe:	11 f0       	breq	.+4      	; 0xb04 <spi_setup_master+0x1c>
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	19 f4       	brne	.+6      	; 0xb0a <spi_setup_master+0x22>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	9d bd       	out	0x2d, r25	; 45
			break;
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     b0a:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
     b0c:	80 32       	cpi	r24, 0x20	; 32
     b0e:	69 f0       	breq	.+26     	; 0xb2a <spi_setup_master+0x42>
     b10:	28 f4       	brcc	.+10     	; 0xb1c <spi_setup_master+0x34>
     b12:	88 30       	cpi	r24, 0x08	; 8
     b14:	71 f0       	breq	.+28     	; 0xb32 <spi_setup_master+0x4a>
     b16:	80 31       	cpi	r24, 0x10	; 16
     b18:	61 f0       	breq	.+24     	; 0xb32 <spi_setup_master+0x4a>
     b1a:	0e c0       	rjmp	.+28     	; 0xb38 <spi_setup_master+0x50>
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	29 f0       	breq	.+10     	; 0xb2a <spi_setup_master+0x42>
     b20:	80 38       	cpi	r24, 0x80	; 128
     b22:	51 f4       	brne	.+20     	; 0xb38 <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1<<SPR00);
     b24:	8c b5       	in	r24, 0x2c	; 44
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
     b2a:	8c b5       	in	r24, 0x2c	; 44
     b2c:	82 60       	ori	r24, 0x02	; 2
     b2e:	8c bd       	out	0x2c, r24	; 44
			break;
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <spi_setup_master+0x50>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
     b32:	8c b5       	in	r24, 0x2c	; 44
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
     b38:	85 b1       	in	r24, 0x05	; 5
     b3a:	8f 7e       	andi	r24, 0xEF	; 239
     b3c:	85 b9       	out	0x05, r24	; 5
     b3e:	08 95       	ret

00000b40 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     b40:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
     b42:	0d b4       	in	r0, 0x2d	; 45
     b44:	07 fe       	sbrs	r0, 7
     b46:	fd cf       	rjmp	.-6      	; 0xb42 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     b48:	8e b5       	in	r24, 0x2e	; 46
     b4a:	08 95       	ret

00000b4c <move_terminal_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
     b4c:	9f 93       	push	r25
     b4e:	8f 93       	push	r24
     b50:	7f 93       	push	r23
     b52:	6f 93       	push	r22
     b54:	83 ed       	ldi	r24, 0xD3	; 211
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9f 93       	push	r25
     b5a:	8f 93       	push	r24
     b5c:	0e 94 a2 06 	call	0xd44	; 0xd44 <printf_P>
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	08 95       	ret

00000b6e <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
     b6e:	8e ec       	ldi	r24, 0xCE	; 206
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	9f 93       	push	r25
     b74:	8f 93       	push	r24
     b76:	0e 94 a2 06 	call	0xd44	; 0xd44 <printf_P>
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	08 95       	ret

00000b80 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
     b80:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <clockTicks>
     b84:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <clockTicks+0x1>
     b88:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <clockTicks+0x2>
     b8c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     b90:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     b92:	8c e7       	ldi	r24, 0x7C	; 124
     b94:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
     b9e:	ee e6       	ldi	r30, 0x6E	; 110
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	82 60       	ori	r24, 0x02	; 2
     ba6:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
     ba8:	85 b3       	in	r24, 0x15	; 21
     baa:	82 70       	andi	r24, 0x02	; 2
     bac:	85 bb       	out	0x15, r24	; 21
     bae:	08 95       	ret

00000bb0 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
     bb0:	8f b7       	in	r24, 0x3f	; 63
     bb2:	28 2f       	mov	r18, r24
     bb4:	20 78       	andi	r18, 0x80	; 128
	cli();
     bb6:	f8 94       	cli
	returnValue = clockTicks;
     bb8:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <clockTicks>
     bbc:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <clockTicks+0x1>
     bc0:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <clockTicks+0x2>
     bc4:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <clockTicks+0x3>
	if(interruptsOn) {
     bc8:	22 23       	and	r18, r18
     bca:	09 f0       	breq	.+2      	; 0xbce <get_current_time+0x1e>
		sei();
     bcc:	78 94       	sei
	}
	return returnValue;
}
     bce:	08 95       	ret

00000bd0 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
     be2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <clockTicks>
     be6:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <clockTicks+0x1>
     bea:	a0 91 7d 01 	lds	r26, 0x017D	; 0x80017d <clockTicks+0x2>
     bee:	b0 91 7e 01 	lds	r27, 0x017E	; 0x80017e <clockTicks+0x3>
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	a1 1d       	adc	r26, r1
     bf6:	b1 1d       	adc	r27, r1
     bf8:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <clockTicks>
     bfc:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <clockTicks+0x1>
     c00:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <clockTicks+0x2>
     c04:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <clockTicks+0x3>
}
     c08:	bf 91       	pop	r27
     c0a:	af 91       	pop	r26
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	0f 90       	pop	r0
     c16:	1f 90       	pop	r1
     c18:	18 95       	reti

00000c1a <__divmodsi4>:
     c1a:	05 2e       	mov	r0, r21
     c1c:	97 fb       	bst	r25, 7
     c1e:	1e f4       	brtc	.+6      	; 0xc26 <__divmodsi4+0xc>
     c20:	00 94       	com	r0
     c22:	0e 94 24 06 	call	0xc48	; 0xc48 <__negsi2>
     c26:	57 fd       	sbrc	r21, 7
     c28:	07 d0       	rcall	.+14     	; 0xc38 <__divmodsi4_neg2>
     c2a:	0e 94 2c 06 	call	0xc58	; 0xc58 <__udivmodsi4>
     c2e:	07 fc       	sbrc	r0, 7
     c30:	03 d0       	rcall	.+6      	; 0xc38 <__divmodsi4_neg2>
     c32:	4e f4       	brtc	.+18     	; 0xc46 <__divmodsi4_exit>
     c34:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__negsi2>

00000c38 <__divmodsi4_neg2>:
     c38:	50 95       	com	r21
     c3a:	40 95       	com	r20
     c3c:	30 95       	com	r19
     c3e:	21 95       	neg	r18
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	4f 4f       	sbci	r20, 0xFF	; 255
     c44:	5f 4f       	sbci	r21, 0xFF	; 255

00000c46 <__divmodsi4_exit>:
     c46:	08 95       	ret

00000c48 <__negsi2>:
     c48:	90 95       	com	r25
     c4a:	80 95       	com	r24
     c4c:	70 95       	com	r23
     c4e:	61 95       	neg	r22
     c50:	7f 4f       	sbci	r23, 0xFF	; 255
     c52:	8f 4f       	sbci	r24, 0xFF	; 255
     c54:	9f 4f       	sbci	r25, 0xFF	; 255
     c56:	08 95       	ret

00000c58 <__udivmodsi4>:
     c58:	a1 e2       	ldi	r26, 0x21	; 33
     c5a:	1a 2e       	mov	r1, r26
     c5c:	aa 1b       	sub	r26, r26
     c5e:	bb 1b       	sub	r27, r27
     c60:	fd 01       	movw	r30, r26
     c62:	0d c0       	rjmp	.+26     	; 0xc7e <__udivmodsi4_ep>

00000c64 <__udivmodsi4_loop>:
     c64:	aa 1f       	adc	r26, r26
     c66:	bb 1f       	adc	r27, r27
     c68:	ee 1f       	adc	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	a2 17       	cp	r26, r18
     c6e:	b3 07       	cpc	r27, r19
     c70:	e4 07       	cpc	r30, r20
     c72:	f5 07       	cpc	r31, r21
     c74:	20 f0       	brcs	.+8      	; 0xc7e <__udivmodsi4_ep>
     c76:	a2 1b       	sub	r26, r18
     c78:	b3 0b       	sbc	r27, r19
     c7a:	e4 0b       	sbc	r30, r20
     c7c:	f5 0b       	sbc	r31, r21

00000c7e <__udivmodsi4_ep>:
     c7e:	66 1f       	adc	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	88 1f       	adc	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	1a 94       	dec	r1
     c88:	69 f7       	brne	.-38     	; 0xc64 <__udivmodsi4_loop>
     c8a:	60 95       	com	r22
     c8c:	70 95       	com	r23
     c8e:	80 95       	com	r24
     c90:	90 95       	com	r25
     c92:	9b 01       	movw	r18, r22
     c94:	ac 01       	movw	r20, r24
     c96:	bd 01       	movw	r22, r26
     c98:	cf 01       	movw	r24, r30
     c9a:	08 95       	ret

00000c9c <fgetc>:
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
     ca2:	2b 81       	ldd	r18, Y+3	; 0x03
     ca4:	20 ff       	sbrs	r18, 0
     ca6:	33 c0       	rjmp	.+102    	; 0xd0e <fgetc+0x72>
     ca8:	26 ff       	sbrs	r18, 6
     caa:	0a c0       	rjmp	.+20     	; 0xcc0 <fgetc+0x24>
     cac:	2f 7b       	andi	r18, 0xBF	; 191
     cae:	2b 83       	std	Y+3, r18	; 0x03
     cb0:	8e 81       	ldd	r24, Y+6	; 0x06
     cb2:	9f 81       	ldd	r25, Y+7	; 0x07
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	9f 83       	std	Y+7, r25	; 0x07
     cb8:	8e 83       	std	Y+6, r24	; 0x06
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	29 c0       	rjmp	.+82     	; 0xd12 <fgetc+0x76>
     cc0:	22 ff       	sbrs	r18, 2
     cc2:	0f c0       	rjmp	.+30     	; 0xce2 <fgetc+0x46>
     cc4:	e8 81       	ld	r30, Y
     cc6:	f9 81       	ldd	r31, Y+1	; 0x01
     cc8:	80 81       	ld	r24, Z
     cca:	08 2e       	mov	r0, r24
     ccc:	00 0c       	add	r0, r0
     cce:	99 0b       	sbc	r25, r25
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	19 f4       	brne	.+6      	; 0xcda <fgetc+0x3e>
     cd4:	20 62       	ori	r18, 0x20	; 32
     cd6:	2b 83       	std	Y+3, r18	; 0x03
     cd8:	1a c0       	rjmp	.+52     	; 0xd0e <fgetc+0x72>
     cda:	31 96       	adiw	r30, 0x01	; 1
     cdc:	f9 83       	std	Y+1, r31	; 0x01
     cde:	e8 83       	st	Y, r30
     ce0:	0e c0       	rjmp	.+28     	; 0xcfe <fgetc+0x62>
     ce2:	ea 85       	ldd	r30, Y+10	; 0x0a
     ce4:	fb 85       	ldd	r31, Y+11	; 0x0b
     ce6:	09 95       	icall
     ce8:	97 ff       	sbrs	r25, 7
     cea:	09 c0       	rjmp	.+18     	; 0xcfe <fgetc+0x62>
     cec:	2b 81       	ldd	r18, Y+3	; 0x03
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <fgetc+0x5a>
     cf2:	80 e2       	ldi	r24, 0x20	; 32
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <fgetc+0x5c>
     cf6:	80 e1       	ldi	r24, 0x10	; 16
     cf8:	82 2b       	or	r24, r18
     cfa:	8b 83       	std	Y+3, r24	; 0x03
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <fgetc+0x72>
     cfe:	2e 81       	ldd	r18, Y+6	; 0x06
     d00:	3f 81       	ldd	r19, Y+7	; 0x07
     d02:	2f 5f       	subi	r18, 0xFF	; 255
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
     d06:	3f 83       	std	Y+7, r19	; 0x07
     d08:	2e 83       	std	Y+6, r18	; 0x06
     d0a:	99 27       	eor	r25, r25
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <fgetc+0x76>
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	9f ef       	ldi	r25, 0xFF	; 255
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <printf>:
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e2 e9       	ldi	r30, 0x92	; 146
     d1e:	f6 e0       	ldi	r31, 0x06	; 6
     d20:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__prologue_saves__+0x20>
     d24:	ae 01       	movw	r20, r28
     d26:	4b 5f       	subi	r20, 0xFB	; 251
     d28:	5f 4f       	sbci	r21, 0xFF	; 255
     d2a:	fa 01       	movw	r30, r20
     d2c:	61 91       	ld	r22, Z+
     d2e:	71 91       	ld	r23, Z+
     d30:	af 01       	movw	r20, r30
     d32:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__iob+0x2>
     d36:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <__iob+0x3>
     d3a:	0e 94 c8 06 	call	0xd90	; 0xd90 <vfprintf>
     d3e:	e2 e0       	ldi	r30, 0x02	; 2
     d40:	0c 94 85 09 	jmp	0x130a	; 0x130a <__epilogue_restores__+0x20>

00000d44 <printf_P>:
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e8 ea       	ldi	r30, 0xA8	; 168
     d4a:	f6 e0       	ldi	r31, 0x06	; 6
     d4c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__prologue_saves__+0x1c>
     d50:	ae 01       	movw	r20, r28
     d52:	49 5f       	subi	r20, 0xF9	; 249
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	da 01       	movw	r26, r20
     d58:	6d 91       	ld	r22, X+
     d5a:	7d 91       	ld	r23, X+
     d5c:	ad 01       	movw	r20, r26
     d5e:	0c e9       	ldi	r16, 0x9C	; 156
     d60:	12 e0       	ldi	r17, 0x02	; 2
     d62:	f8 01       	movw	r30, r16
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	dc 01       	movw	r26, r24
     d6a:	13 96       	adiw	r26, 0x03	; 3
     d6c:	2c 91       	ld	r18, X
     d6e:	13 97       	sbiw	r26, 0x03	; 3
     d70:	28 60       	ori	r18, 0x08	; 8
     d72:	13 96       	adiw	r26, 0x03	; 3
     d74:	2c 93       	st	X, r18
     d76:	0e 94 c8 06 	call	0xd90	; 0xd90 <vfprintf>
     d7a:	d8 01       	movw	r26, r16
     d7c:	12 96       	adiw	r26, 0x02	; 2
     d7e:	ed 91       	ld	r30, X+
     d80:	fc 91       	ld	r31, X
     d82:	13 97       	sbiw	r26, 0x03	; 3
     d84:	23 81       	ldd	r18, Z+3	; 0x03
     d86:	27 7f       	andi	r18, 0xF7	; 247
     d88:	23 83       	std	Z+3, r18	; 0x03
     d8a:	e4 e0       	ldi	r30, 0x04	; 4
     d8c:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__epilogue_restores__+0x1c>

00000d90 <vfprintf>:
     d90:	ab e0       	ldi	r26, 0x0B	; 11
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ee ec       	ldi	r30, 0xCE	; 206
     d96:	f6 e0       	ldi	r31, 0x06	; 6
     d98:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__prologue_saves__>
     d9c:	6c 01       	movw	r12, r24
     d9e:	7b 01       	movw	r14, r22
     da0:	8a 01       	movw	r16, r20
     da2:	fc 01       	movw	r30, r24
     da4:	17 82       	std	Z+7, r1	; 0x07
     da6:	16 82       	std	Z+6, r1	; 0x06
     da8:	83 81       	ldd	r24, Z+3	; 0x03
     daa:	81 ff       	sbrs	r24, 1
     dac:	cc c1       	rjmp	.+920    	; 0x1146 <vfprintf+0x3b6>
     dae:	ce 01       	movw	r24, r28
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	3c 01       	movw	r6, r24
     db4:	f6 01       	movw	r30, r12
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	f7 01       	movw	r30, r14
     dba:	93 fd       	sbrc	r25, 3
     dbc:	85 91       	lpm	r24, Z+
     dbe:	93 ff       	sbrs	r25, 3
     dc0:	81 91       	ld	r24, Z+
     dc2:	7f 01       	movw	r14, r30
     dc4:	88 23       	and	r24, r24
     dc6:	09 f4       	brne	.+2      	; 0xdca <vfprintf+0x3a>
     dc8:	ba c1       	rjmp	.+884    	; 0x113e <vfprintf+0x3ae>
     dca:	85 32       	cpi	r24, 0x25	; 37
     dcc:	39 f4       	brne	.+14     	; 0xddc <vfprintf+0x4c>
     dce:	93 fd       	sbrc	r25, 3
     dd0:	85 91       	lpm	r24, Z+
     dd2:	93 ff       	sbrs	r25, 3
     dd4:	81 91       	ld	r24, Z+
     dd6:	7f 01       	movw	r14, r30
     dd8:	85 32       	cpi	r24, 0x25	; 37
     dda:	29 f4       	brne	.+10     	; 0xde6 <vfprintf+0x56>
     ddc:	b6 01       	movw	r22, r12
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
     de4:	e7 cf       	rjmp	.-50     	; 0xdb4 <vfprintf+0x24>
     de6:	91 2c       	mov	r9, r1
     de8:	21 2c       	mov	r2, r1
     dea:	31 2c       	mov	r3, r1
     dec:	ff e1       	ldi	r31, 0x1F	; 31
     dee:	f3 15       	cp	r31, r3
     df0:	d8 f0       	brcs	.+54     	; 0xe28 <vfprintf+0x98>
     df2:	8b 32       	cpi	r24, 0x2B	; 43
     df4:	79 f0       	breq	.+30     	; 0xe14 <vfprintf+0x84>
     df6:	38 f4       	brcc	.+14     	; 0xe06 <vfprintf+0x76>
     df8:	80 32       	cpi	r24, 0x20	; 32
     dfa:	79 f0       	breq	.+30     	; 0xe1a <vfprintf+0x8a>
     dfc:	83 32       	cpi	r24, 0x23	; 35
     dfe:	a1 f4       	brne	.+40     	; 0xe28 <vfprintf+0x98>
     e00:	23 2d       	mov	r18, r3
     e02:	20 61       	ori	r18, 0x10	; 16
     e04:	1d c0       	rjmp	.+58     	; 0xe40 <vfprintf+0xb0>
     e06:	8d 32       	cpi	r24, 0x2D	; 45
     e08:	61 f0       	breq	.+24     	; 0xe22 <vfprintf+0x92>
     e0a:	80 33       	cpi	r24, 0x30	; 48
     e0c:	69 f4       	brne	.+26     	; 0xe28 <vfprintf+0x98>
     e0e:	23 2d       	mov	r18, r3
     e10:	21 60       	ori	r18, 0x01	; 1
     e12:	16 c0       	rjmp	.+44     	; 0xe40 <vfprintf+0xb0>
     e14:	83 2d       	mov	r24, r3
     e16:	82 60       	ori	r24, 0x02	; 2
     e18:	38 2e       	mov	r3, r24
     e1a:	e3 2d       	mov	r30, r3
     e1c:	e4 60       	ori	r30, 0x04	; 4
     e1e:	3e 2e       	mov	r3, r30
     e20:	2a c0       	rjmp	.+84     	; 0xe76 <vfprintf+0xe6>
     e22:	f3 2d       	mov	r31, r3
     e24:	f8 60       	ori	r31, 0x08	; 8
     e26:	1d c0       	rjmp	.+58     	; 0xe62 <vfprintf+0xd2>
     e28:	37 fc       	sbrc	r3, 7
     e2a:	2d c0       	rjmp	.+90     	; 0xe86 <vfprintf+0xf6>
     e2c:	20 ed       	ldi	r18, 0xD0	; 208
     e2e:	28 0f       	add	r18, r24
     e30:	2a 30       	cpi	r18, 0x0A	; 10
     e32:	40 f0       	brcs	.+16     	; 0xe44 <vfprintf+0xb4>
     e34:	8e 32       	cpi	r24, 0x2E	; 46
     e36:	b9 f4       	brne	.+46     	; 0xe66 <vfprintf+0xd6>
     e38:	36 fc       	sbrc	r3, 6
     e3a:	81 c1       	rjmp	.+770    	; 0x113e <vfprintf+0x3ae>
     e3c:	23 2d       	mov	r18, r3
     e3e:	20 64       	ori	r18, 0x40	; 64
     e40:	32 2e       	mov	r3, r18
     e42:	19 c0       	rjmp	.+50     	; 0xe76 <vfprintf+0xe6>
     e44:	36 fe       	sbrs	r3, 6
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <vfprintf+0xc4>
     e48:	8a e0       	ldi	r24, 0x0A	; 10
     e4a:	98 9e       	mul	r9, r24
     e4c:	20 0d       	add	r18, r0
     e4e:	11 24       	eor	r1, r1
     e50:	92 2e       	mov	r9, r18
     e52:	11 c0       	rjmp	.+34     	; 0xe76 <vfprintf+0xe6>
     e54:	ea e0       	ldi	r30, 0x0A	; 10
     e56:	2e 9e       	mul	r2, r30
     e58:	20 0d       	add	r18, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	22 2e       	mov	r2, r18
     e5e:	f3 2d       	mov	r31, r3
     e60:	f0 62       	ori	r31, 0x20	; 32
     e62:	3f 2e       	mov	r3, r31
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <vfprintf+0xe6>
     e66:	8c 36       	cpi	r24, 0x6C	; 108
     e68:	21 f4       	brne	.+8      	; 0xe72 <vfprintf+0xe2>
     e6a:	83 2d       	mov	r24, r3
     e6c:	80 68       	ori	r24, 0x80	; 128
     e6e:	38 2e       	mov	r3, r24
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <vfprintf+0xe6>
     e72:	88 36       	cpi	r24, 0x68	; 104
     e74:	41 f4       	brne	.+16     	; 0xe86 <vfprintf+0xf6>
     e76:	f7 01       	movw	r30, r14
     e78:	93 fd       	sbrc	r25, 3
     e7a:	85 91       	lpm	r24, Z+
     e7c:	93 ff       	sbrs	r25, 3
     e7e:	81 91       	ld	r24, Z+
     e80:	7f 01       	movw	r14, r30
     e82:	81 11       	cpse	r24, r1
     e84:	b3 cf       	rjmp	.-154    	; 0xdec <vfprintf+0x5c>
     e86:	98 2f       	mov	r25, r24
     e88:	9f 7d       	andi	r25, 0xDF	; 223
     e8a:	95 54       	subi	r25, 0x45	; 69
     e8c:	93 30       	cpi	r25, 0x03	; 3
     e8e:	28 f4       	brcc	.+10     	; 0xe9a <vfprintf+0x10a>
     e90:	0c 5f       	subi	r16, 0xFC	; 252
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	9f e3       	ldi	r25, 0x3F	; 63
     e96:	99 83       	std	Y+1, r25	; 0x01
     e98:	0d c0       	rjmp	.+26     	; 0xeb4 <vfprintf+0x124>
     e9a:	83 36       	cpi	r24, 0x63	; 99
     e9c:	31 f0       	breq	.+12     	; 0xeaa <vfprintf+0x11a>
     e9e:	83 37       	cpi	r24, 0x73	; 115
     ea0:	71 f0       	breq	.+28     	; 0xebe <vfprintf+0x12e>
     ea2:	83 35       	cpi	r24, 0x53	; 83
     ea4:	09 f0       	breq	.+2      	; 0xea8 <vfprintf+0x118>
     ea6:	59 c0       	rjmp	.+178    	; 0xf5a <vfprintf+0x1ca>
     ea8:	21 c0       	rjmp	.+66     	; 0xeec <vfprintf+0x15c>
     eaa:	f8 01       	movw	r30, r16
     eac:	80 81       	ld	r24, Z
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	0e 5f       	subi	r16, 0xFE	; 254
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	88 24       	eor	r8, r8
     eb6:	83 94       	inc	r8
     eb8:	91 2c       	mov	r9, r1
     eba:	53 01       	movw	r10, r6
     ebc:	13 c0       	rjmp	.+38     	; 0xee4 <vfprintf+0x154>
     ebe:	28 01       	movw	r4, r16
     ec0:	f2 e0       	ldi	r31, 0x02	; 2
     ec2:	4f 0e       	add	r4, r31
     ec4:	51 1c       	adc	r5, r1
     ec6:	f8 01       	movw	r30, r16
     ec8:	a0 80       	ld	r10, Z
     eca:	b1 80       	ldd	r11, Z+1	; 0x01
     ecc:	36 fe       	sbrs	r3, 6
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <vfprintf+0x146>
     ed0:	69 2d       	mov	r22, r9
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x14a>
     ed6:	6f ef       	ldi	r22, 0xFF	; 255
     ed8:	7f ef       	ldi	r23, 0xFF	; 255
     eda:	c5 01       	movw	r24, r10
     edc:	0e 94 b4 08 	call	0x1168	; 0x1168 <strnlen>
     ee0:	4c 01       	movw	r8, r24
     ee2:	82 01       	movw	r16, r4
     ee4:	f3 2d       	mov	r31, r3
     ee6:	ff 77       	andi	r31, 0x7F	; 127
     ee8:	3f 2e       	mov	r3, r31
     eea:	16 c0       	rjmp	.+44     	; 0xf18 <vfprintf+0x188>
     eec:	28 01       	movw	r4, r16
     eee:	22 e0       	ldi	r18, 0x02	; 2
     ef0:	42 0e       	add	r4, r18
     ef2:	51 1c       	adc	r5, r1
     ef4:	f8 01       	movw	r30, r16
     ef6:	a0 80       	ld	r10, Z
     ef8:	b1 80       	ldd	r11, Z+1	; 0x01
     efa:	36 fe       	sbrs	r3, 6
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <vfprintf+0x174>
     efe:	69 2d       	mov	r22, r9
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <vfprintf+0x178>
     f04:	6f ef       	ldi	r22, 0xFF	; 255
     f06:	7f ef       	ldi	r23, 0xFF	; 255
     f08:	c5 01       	movw	r24, r10
     f0a:	0e 94 a9 08 	call	0x1152	; 0x1152 <strnlen_P>
     f0e:	4c 01       	movw	r8, r24
     f10:	f3 2d       	mov	r31, r3
     f12:	f0 68       	ori	r31, 0x80	; 128
     f14:	3f 2e       	mov	r3, r31
     f16:	82 01       	movw	r16, r4
     f18:	33 fc       	sbrc	r3, 3
     f1a:	1b c0       	rjmp	.+54     	; 0xf52 <vfprintf+0x1c2>
     f1c:	82 2d       	mov	r24, r2
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	88 16       	cp	r8, r24
     f22:	99 06       	cpc	r9, r25
     f24:	b0 f4       	brcc	.+44     	; 0xf52 <vfprintf+0x1c2>
     f26:	b6 01       	movw	r22, r12
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
     f30:	2a 94       	dec	r2
     f32:	f4 cf       	rjmp	.-24     	; 0xf1c <vfprintf+0x18c>
     f34:	f5 01       	movw	r30, r10
     f36:	37 fc       	sbrc	r3, 7
     f38:	85 91       	lpm	r24, Z+
     f3a:	37 fe       	sbrs	r3, 7
     f3c:	81 91       	ld	r24, Z+
     f3e:	5f 01       	movw	r10, r30
     f40:	b6 01       	movw	r22, r12
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
     f48:	21 10       	cpse	r2, r1
     f4a:	2a 94       	dec	r2
     f4c:	21 e0       	ldi	r18, 0x01	; 1
     f4e:	82 1a       	sub	r8, r18
     f50:	91 08       	sbc	r9, r1
     f52:	81 14       	cp	r8, r1
     f54:	91 04       	cpc	r9, r1
     f56:	71 f7       	brne	.-36     	; 0xf34 <vfprintf+0x1a4>
     f58:	e8 c0       	rjmp	.+464    	; 0x112a <vfprintf+0x39a>
     f5a:	84 36       	cpi	r24, 0x64	; 100
     f5c:	11 f0       	breq	.+4      	; 0xf62 <vfprintf+0x1d2>
     f5e:	89 36       	cpi	r24, 0x69	; 105
     f60:	41 f5       	brne	.+80     	; 0xfb2 <vfprintf+0x222>
     f62:	f8 01       	movw	r30, r16
     f64:	37 fe       	sbrs	r3, 7
     f66:	07 c0       	rjmp	.+14     	; 0xf76 <vfprintf+0x1e6>
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	0c 5f       	subi	r16, 0xFC	; 252
     f72:	1f 4f       	sbci	r17, 0xFF	; 255
     f74:	08 c0       	rjmp	.+16     	; 0xf86 <vfprintf+0x1f6>
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	07 2e       	mov	r0, r23
     f7c:	00 0c       	add	r0, r0
     f7e:	88 0b       	sbc	r24, r24
     f80:	99 0b       	sbc	r25, r25
     f82:	0e 5f       	subi	r16, 0xFE	; 254
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	f3 2d       	mov	r31, r3
     f88:	ff 76       	andi	r31, 0x6F	; 111
     f8a:	3f 2e       	mov	r3, r31
     f8c:	97 ff       	sbrs	r25, 7
     f8e:	09 c0       	rjmp	.+18     	; 0xfa2 <vfprintf+0x212>
     f90:	90 95       	com	r25
     f92:	80 95       	com	r24
     f94:	70 95       	com	r23
     f96:	61 95       	neg	r22
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	f0 68       	ori	r31, 0x80	; 128
     fa0:	3f 2e       	mov	r3, r31
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	a3 01       	movw	r20, r6
     fa8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__ultoa_invert>
     fac:	88 2e       	mov	r8, r24
     fae:	86 18       	sub	r8, r6
     fb0:	45 c0       	rjmp	.+138    	; 0x103c <vfprintf+0x2ac>
     fb2:	85 37       	cpi	r24, 0x75	; 117
     fb4:	31 f4       	brne	.+12     	; 0xfc2 <vfprintf+0x232>
     fb6:	23 2d       	mov	r18, r3
     fb8:	2f 7e       	andi	r18, 0xEF	; 239
     fba:	b2 2e       	mov	r11, r18
     fbc:	2a e0       	ldi	r18, 0x0A	; 10
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	25 c0       	rjmp	.+74     	; 0x100c <vfprintf+0x27c>
     fc2:	93 2d       	mov	r25, r3
     fc4:	99 7f       	andi	r25, 0xF9	; 249
     fc6:	b9 2e       	mov	r11, r25
     fc8:	8f 36       	cpi	r24, 0x6F	; 111
     fca:	c1 f0       	breq	.+48     	; 0xffc <vfprintf+0x26c>
     fcc:	18 f4       	brcc	.+6      	; 0xfd4 <vfprintf+0x244>
     fce:	88 35       	cpi	r24, 0x58	; 88
     fd0:	79 f0       	breq	.+30     	; 0xff0 <vfprintf+0x260>
     fd2:	b5 c0       	rjmp	.+362    	; 0x113e <vfprintf+0x3ae>
     fd4:	80 37       	cpi	r24, 0x70	; 112
     fd6:	19 f0       	breq	.+6      	; 0xfde <vfprintf+0x24e>
     fd8:	88 37       	cpi	r24, 0x78	; 120
     fda:	21 f0       	breq	.+8      	; 0xfe4 <vfprintf+0x254>
     fdc:	b0 c0       	rjmp	.+352    	; 0x113e <vfprintf+0x3ae>
     fde:	e9 2f       	mov	r30, r25
     fe0:	e0 61       	ori	r30, 0x10	; 16
     fe2:	be 2e       	mov	r11, r30
     fe4:	b4 fe       	sbrs	r11, 4
     fe6:	0d c0       	rjmp	.+26     	; 0x1002 <vfprintf+0x272>
     fe8:	fb 2d       	mov	r31, r11
     fea:	f4 60       	ori	r31, 0x04	; 4
     fec:	bf 2e       	mov	r11, r31
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <vfprintf+0x272>
     ff0:	34 fe       	sbrs	r3, 4
     ff2:	0a c0       	rjmp	.+20     	; 0x1008 <vfprintf+0x278>
     ff4:	29 2f       	mov	r18, r25
     ff6:	26 60       	ori	r18, 0x06	; 6
     ff8:	b2 2e       	mov	r11, r18
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <vfprintf+0x278>
     ffc:	28 e0       	ldi	r18, 0x08	; 8
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	05 c0       	rjmp	.+10     	; 0x100c <vfprintf+0x27c>
    1002:	20 e1       	ldi	r18, 0x10	; 16
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <vfprintf+0x27c>
    1008:	20 e1       	ldi	r18, 0x10	; 16
    100a:	32 e0       	ldi	r19, 0x02	; 2
    100c:	f8 01       	movw	r30, r16
    100e:	b7 fe       	sbrs	r11, 7
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <vfprintf+0x290>
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	0c 5f       	subi	r16, 0xFC	; 252
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	06 c0       	rjmp	.+12     	; 0x102c <vfprintf+0x29c>
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 5f       	subi	r16, 0xFE	; 254
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	a3 01       	movw	r20, r6
    102e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__ultoa_invert>
    1032:	88 2e       	mov	r8, r24
    1034:	86 18       	sub	r8, r6
    1036:	fb 2d       	mov	r31, r11
    1038:	ff 77       	andi	r31, 0x7F	; 127
    103a:	3f 2e       	mov	r3, r31
    103c:	36 fe       	sbrs	r3, 6
    103e:	0d c0       	rjmp	.+26     	; 0x105a <vfprintf+0x2ca>
    1040:	23 2d       	mov	r18, r3
    1042:	2e 7f       	andi	r18, 0xFE	; 254
    1044:	a2 2e       	mov	r10, r18
    1046:	89 14       	cp	r8, r9
    1048:	58 f4       	brcc	.+22     	; 0x1060 <vfprintf+0x2d0>
    104a:	34 fe       	sbrs	r3, 4
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <vfprintf+0x2d4>
    104e:	32 fc       	sbrc	r3, 2
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <vfprintf+0x2d4>
    1052:	83 2d       	mov	r24, r3
    1054:	8e 7e       	andi	r24, 0xEE	; 238
    1056:	a8 2e       	mov	r10, r24
    1058:	05 c0       	rjmp	.+10     	; 0x1064 <vfprintf+0x2d4>
    105a:	b8 2c       	mov	r11, r8
    105c:	a3 2c       	mov	r10, r3
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <vfprintf+0x2d6>
    1060:	b8 2c       	mov	r11, r8
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <vfprintf+0x2d6>
    1064:	b9 2c       	mov	r11, r9
    1066:	a4 fe       	sbrs	r10, 4
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <vfprintf+0x2f8>
    106a:	fe 01       	movw	r30, r28
    106c:	e8 0d       	add	r30, r8
    106e:	f1 1d       	adc	r31, r1
    1070:	80 81       	ld	r24, Z
    1072:	80 33       	cpi	r24, 0x30	; 48
    1074:	21 f4       	brne	.+8      	; 0x107e <vfprintf+0x2ee>
    1076:	9a 2d       	mov	r25, r10
    1078:	99 7e       	andi	r25, 0xE9	; 233
    107a:	a9 2e       	mov	r10, r25
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <vfprintf+0x300>
    107e:	a2 fe       	sbrs	r10, 2
    1080:	06 c0       	rjmp	.+12     	; 0x108e <vfprintf+0x2fe>
    1082:	b3 94       	inc	r11
    1084:	b3 94       	inc	r11
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <vfprintf+0x300>
    1088:	8a 2d       	mov	r24, r10
    108a:	86 78       	andi	r24, 0x86	; 134
    108c:	09 f0       	breq	.+2      	; 0x1090 <vfprintf+0x300>
    108e:	b3 94       	inc	r11
    1090:	a3 fc       	sbrc	r10, 3
    1092:	11 c0       	rjmp	.+34     	; 0x10b6 <vfprintf+0x326>
    1094:	a0 fe       	sbrs	r10, 0
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0x314>
    1098:	b2 14       	cp	r11, r2
    109a:	88 f4       	brcc	.+34     	; 0x10be <vfprintf+0x32e>
    109c:	28 0c       	add	r2, r8
    109e:	92 2c       	mov	r9, r2
    10a0:	9b 18       	sub	r9, r11
    10a2:	0e c0       	rjmp	.+28     	; 0x10c0 <vfprintf+0x330>
    10a4:	b2 14       	cp	r11, r2
    10a6:	60 f4       	brcc	.+24     	; 0x10c0 <vfprintf+0x330>
    10a8:	b6 01       	movw	r22, r12
    10aa:	80 e2       	ldi	r24, 0x20	; 32
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    10b2:	b3 94       	inc	r11
    10b4:	f7 cf       	rjmp	.-18     	; 0x10a4 <vfprintf+0x314>
    10b6:	b2 14       	cp	r11, r2
    10b8:	18 f4       	brcc	.+6      	; 0x10c0 <vfprintf+0x330>
    10ba:	2b 18       	sub	r2, r11
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <vfprintf+0x332>
    10be:	98 2c       	mov	r9, r8
    10c0:	21 2c       	mov	r2, r1
    10c2:	a4 fe       	sbrs	r10, 4
    10c4:	10 c0       	rjmp	.+32     	; 0x10e6 <vfprintf+0x356>
    10c6:	b6 01       	movw	r22, r12
    10c8:	80 e3       	ldi	r24, 0x30	; 48
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    10d0:	a2 fe       	sbrs	r10, 2
    10d2:	17 c0       	rjmp	.+46     	; 0x1102 <vfprintf+0x372>
    10d4:	a1 fc       	sbrc	r10, 1
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <vfprintf+0x34e>
    10d8:	88 e7       	ldi	r24, 0x78	; 120
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <vfprintf+0x352>
    10de:	88 e5       	ldi	r24, 0x58	; 88
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	b6 01       	movw	r22, r12
    10e4:	0c c0       	rjmp	.+24     	; 0x10fe <vfprintf+0x36e>
    10e6:	8a 2d       	mov	r24, r10
    10e8:	86 78       	andi	r24, 0x86	; 134
    10ea:	59 f0       	breq	.+22     	; 0x1102 <vfprintf+0x372>
    10ec:	a1 fe       	sbrs	r10, 1
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <vfprintf+0x364>
    10f0:	8b e2       	ldi	r24, 0x2B	; 43
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <vfprintf+0x366>
    10f4:	80 e2       	ldi	r24, 0x20	; 32
    10f6:	a7 fc       	sbrc	r10, 7
    10f8:	8d e2       	ldi	r24, 0x2D	; 45
    10fa:	b6 01       	movw	r22, r12
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    1102:	89 14       	cp	r8, r9
    1104:	38 f4       	brcc	.+14     	; 0x1114 <vfprintf+0x384>
    1106:	b6 01       	movw	r22, r12
    1108:	80 e3       	ldi	r24, 0x30	; 48
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    1110:	9a 94       	dec	r9
    1112:	f7 cf       	rjmp	.-18     	; 0x1102 <vfprintf+0x372>
    1114:	8a 94       	dec	r8
    1116:	f3 01       	movw	r30, r6
    1118:	e8 0d       	add	r30, r8
    111a:	f1 1d       	adc	r31, r1
    111c:	80 81       	ld	r24, Z
    111e:	b6 01       	movw	r22, r12
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    1126:	81 10       	cpse	r8, r1
    1128:	f5 cf       	rjmp	.-22     	; 0x1114 <vfprintf+0x384>
    112a:	22 20       	and	r2, r2
    112c:	09 f4       	brne	.+2      	; 0x1130 <vfprintf+0x3a0>
    112e:	42 ce       	rjmp	.-892    	; 0xdb4 <vfprintf+0x24>
    1130:	b6 01       	movw	r22, r12
    1132:	80 e2       	ldi	r24, 0x20	; 32
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 bf 08 	call	0x117e	; 0x117e <fputc>
    113a:	2a 94       	dec	r2
    113c:	f6 cf       	rjmp	.-20     	; 0x112a <vfprintf+0x39a>
    113e:	f6 01       	movw	r30, r12
    1140:	86 81       	ldd	r24, Z+6	; 0x06
    1142:	97 81       	ldd	r25, Z+7	; 0x07
    1144:	02 c0       	rjmp	.+4      	; 0x114a <vfprintf+0x3ba>
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	9f ef       	ldi	r25, 0xFF	; 255
    114a:	2b 96       	adiw	r28, 0x0b	; 11
    114c:	e2 e1       	ldi	r30, 0x12	; 18
    114e:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__epilogue_restores__>

00001152 <strnlen_P>:
    1152:	fc 01       	movw	r30, r24
    1154:	05 90       	lpm	r0, Z+
    1156:	61 50       	subi	r22, 0x01	; 1
    1158:	70 40       	sbci	r23, 0x00	; 0
    115a:	01 10       	cpse	r0, r1
    115c:	d8 f7       	brcc	.-10     	; 0x1154 <strnlen_P+0x2>
    115e:	80 95       	com	r24
    1160:	90 95       	com	r25
    1162:	8e 0f       	add	r24, r30
    1164:	9f 1f       	adc	r25, r31
    1166:	08 95       	ret

00001168 <strnlen>:
    1168:	fc 01       	movw	r30, r24
    116a:	61 50       	subi	r22, 0x01	; 1
    116c:	70 40       	sbci	r23, 0x00	; 0
    116e:	01 90       	ld	r0, Z+
    1170:	01 10       	cpse	r0, r1
    1172:	d8 f7       	brcc	.-10     	; 0x116a <strnlen+0x2>
    1174:	80 95       	com	r24
    1176:	90 95       	com	r25
    1178:	8e 0f       	add	r24, r30
    117a:	9f 1f       	adc	r25, r31
    117c:	08 95       	ret

0000117e <fputc>:
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	fb 01       	movw	r30, r22
    1188:	23 81       	ldd	r18, Z+3	; 0x03
    118a:	21 fd       	sbrc	r18, 1
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <fputc+0x16>
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f ef       	ldi	r25, 0xFF	; 255
    1192:	2c c0       	rjmp	.+88     	; 0x11ec <fputc+0x6e>
    1194:	22 ff       	sbrs	r18, 2
    1196:	16 c0       	rjmp	.+44     	; 0x11c4 <fputc+0x46>
    1198:	46 81       	ldd	r20, Z+6	; 0x06
    119a:	57 81       	ldd	r21, Z+7	; 0x07
    119c:	24 81       	ldd	r18, Z+4	; 0x04
    119e:	35 81       	ldd	r19, Z+5	; 0x05
    11a0:	42 17       	cp	r20, r18
    11a2:	53 07       	cpc	r21, r19
    11a4:	44 f4       	brge	.+16     	; 0x11b6 <fputc+0x38>
    11a6:	a0 81       	ld	r26, Z
    11a8:	b1 81       	ldd	r27, Z+1	; 0x01
    11aa:	9d 01       	movw	r18, r26
    11ac:	2f 5f       	subi	r18, 0xFF	; 255
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	31 83       	std	Z+1, r19	; 0x01
    11b2:	20 83       	st	Z, r18
    11b4:	8c 93       	st	X, r24
    11b6:	26 81       	ldd	r18, Z+6	; 0x06
    11b8:	37 81       	ldd	r19, Z+7	; 0x07
    11ba:	2f 5f       	subi	r18, 0xFF	; 255
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	37 83       	std	Z+7, r19	; 0x07
    11c0:	26 83       	std	Z+6, r18	; 0x06
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <fputc+0x6e>
    11c4:	8b 01       	movw	r16, r22
    11c6:	ec 01       	movw	r28, r24
    11c8:	fb 01       	movw	r30, r22
    11ca:	00 84       	ldd	r0, Z+8	; 0x08
    11cc:	f1 85       	ldd	r31, Z+9	; 0x09
    11ce:	e0 2d       	mov	r30, r0
    11d0:	09 95       	icall
    11d2:	89 2b       	or	r24, r25
    11d4:	e1 f6       	brne	.-72     	; 0x118e <fputc+0x10>
    11d6:	d8 01       	movw	r26, r16
    11d8:	16 96       	adiw	r26, 0x06	; 6
    11da:	8d 91       	ld	r24, X+
    11dc:	9c 91       	ld	r25, X
    11de:	17 97       	sbiw	r26, 0x07	; 7
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	17 96       	adiw	r26, 0x07	; 7
    11e4:	9c 93       	st	X, r25
    11e6:	8e 93       	st	-X, r24
    11e8:	16 97       	sbiw	r26, 0x06	; 6
    11ea:	ce 01       	movw	r24, r28
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <__ultoa_invert>:
    11f6:	fa 01       	movw	r30, r20
    11f8:	aa 27       	eor	r26, r26
    11fa:	28 30       	cpi	r18, 0x08	; 8
    11fc:	51 f1       	breq	.+84     	; 0x1252 <__ultoa_invert+0x5c>
    11fe:	20 31       	cpi	r18, 0x10	; 16
    1200:	81 f1       	breq	.+96     	; 0x1262 <__ultoa_invert+0x6c>
    1202:	e8 94       	clt
    1204:	6f 93       	push	r22
    1206:	6e 7f       	andi	r22, 0xFE	; 254
    1208:	6e 5f       	subi	r22, 0xFE	; 254
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	8f 4f       	sbci	r24, 0xFF	; 255
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	af 4f       	sbci	r26, 0xFF	; 255
    1212:	b1 e0       	ldi	r27, 0x01	; 1
    1214:	3e d0       	rcall	.+124    	; 0x1292 <__ultoa_invert+0x9c>
    1216:	b4 e0       	ldi	r27, 0x04	; 4
    1218:	3c d0       	rcall	.+120    	; 0x1292 <__ultoa_invert+0x9c>
    121a:	67 0f       	add	r22, r23
    121c:	78 1f       	adc	r23, r24
    121e:	89 1f       	adc	r24, r25
    1220:	9a 1f       	adc	r25, r26
    1222:	a1 1d       	adc	r26, r1
    1224:	68 0f       	add	r22, r24
    1226:	79 1f       	adc	r23, r25
    1228:	8a 1f       	adc	r24, r26
    122a:	91 1d       	adc	r25, r1
    122c:	a1 1d       	adc	r26, r1
    122e:	6a 0f       	add	r22, r26
    1230:	71 1d       	adc	r23, r1
    1232:	81 1d       	adc	r24, r1
    1234:	91 1d       	adc	r25, r1
    1236:	a1 1d       	adc	r26, r1
    1238:	20 d0       	rcall	.+64     	; 0x127a <__ultoa_invert+0x84>
    123a:	09 f4       	brne	.+2      	; 0x123e <__ultoa_invert+0x48>
    123c:	68 94       	set
    123e:	3f 91       	pop	r19
    1240:	2a e0       	ldi	r18, 0x0A	; 10
    1242:	26 9f       	mul	r18, r22
    1244:	11 24       	eor	r1, r1
    1246:	30 19       	sub	r19, r0
    1248:	30 5d       	subi	r19, 0xD0	; 208
    124a:	31 93       	st	Z+, r19
    124c:	de f6       	brtc	.-74     	; 0x1204 <__ultoa_invert+0xe>
    124e:	cf 01       	movw	r24, r30
    1250:	08 95       	ret
    1252:	46 2f       	mov	r20, r22
    1254:	47 70       	andi	r20, 0x07	; 7
    1256:	40 5d       	subi	r20, 0xD0	; 208
    1258:	41 93       	st	Z+, r20
    125a:	b3 e0       	ldi	r27, 0x03	; 3
    125c:	0f d0       	rcall	.+30     	; 0x127c <__ultoa_invert+0x86>
    125e:	c9 f7       	brne	.-14     	; 0x1252 <__ultoa_invert+0x5c>
    1260:	f6 cf       	rjmp	.-20     	; 0x124e <__ultoa_invert+0x58>
    1262:	46 2f       	mov	r20, r22
    1264:	4f 70       	andi	r20, 0x0F	; 15
    1266:	40 5d       	subi	r20, 0xD0	; 208
    1268:	4a 33       	cpi	r20, 0x3A	; 58
    126a:	18 f0       	brcs	.+6      	; 0x1272 <__ultoa_invert+0x7c>
    126c:	49 5d       	subi	r20, 0xD9	; 217
    126e:	31 fd       	sbrc	r19, 1
    1270:	40 52       	subi	r20, 0x20	; 32
    1272:	41 93       	st	Z+, r20
    1274:	02 d0       	rcall	.+4      	; 0x127a <__ultoa_invert+0x84>
    1276:	a9 f7       	brne	.-22     	; 0x1262 <__ultoa_invert+0x6c>
    1278:	ea cf       	rjmp	.-44     	; 0x124e <__ultoa_invert+0x58>
    127a:	b4 e0       	ldi	r27, 0x04	; 4
    127c:	a6 95       	lsr	r26
    127e:	97 95       	ror	r25
    1280:	87 95       	ror	r24
    1282:	77 95       	ror	r23
    1284:	67 95       	ror	r22
    1286:	ba 95       	dec	r27
    1288:	c9 f7       	brne	.-14     	; 0x127c <__ultoa_invert+0x86>
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	61 05       	cpc	r22, r1
    128e:	71 05       	cpc	r23, r1
    1290:	08 95       	ret
    1292:	9b 01       	movw	r18, r22
    1294:	ac 01       	movw	r20, r24
    1296:	0a 2e       	mov	r0, r26
    1298:	06 94       	lsr	r0
    129a:	57 95       	ror	r21
    129c:	47 95       	ror	r20
    129e:	37 95       	ror	r19
    12a0:	27 95       	ror	r18
    12a2:	ba 95       	dec	r27
    12a4:	c9 f7       	brne	.-14     	; 0x1298 <__ultoa_invert+0xa2>
    12a6:	62 0f       	add	r22, r18
    12a8:	73 1f       	adc	r23, r19
    12aa:	84 1f       	adc	r24, r20
    12ac:	95 1f       	adc	r25, r21
    12ae:	a0 1d       	adc	r26, r0
    12b0:	08 95       	ret

000012b2 <__prologue_saves__>:
    12b2:	2f 92       	push	r2
    12b4:	3f 92       	push	r3
    12b6:	4f 92       	push	r4
    12b8:	5f 92       	push	r5
    12ba:	6f 92       	push	r6
    12bc:	7f 92       	push	r7
    12be:	8f 92       	push	r8
    12c0:	9f 92       	push	r9
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	ca 1b       	sub	r28, r26
    12dc:	db 0b       	sbc	r29, r27
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	09 94       	ijmp

000012ea <__epilogue_restores__>:
    12ea:	2a 88       	ldd	r2, Y+18	; 0x12
    12ec:	39 88       	ldd	r3, Y+17	; 0x11
    12ee:	48 88       	ldd	r4, Y+16	; 0x10
    12f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    12f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    12f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    12f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    12f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    12fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    12fc:	b9 84       	ldd	r11, Y+9	; 0x09
    12fe:	c8 84       	ldd	r12, Y+8	; 0x08
    1300:	df 80       	ldd	r13, Y+7	; 0x07
    1302:	ee 80       	ldd	r14, Y+6	; 0x06
    1304:	fd 80       	ldd	r15, Y+5	; 0x05
    1306:	0c 81       	ldd	r16, Y+4	; 0x04
    1308:	1b 81       	ldd	r17, Y+3	; 0x03
    130a:	aa 81       	ldd	r26, Y+2	; 0x02
    130c:	b9 81       	ldd	r27, Y+1	; 0x01
    130e:	ce 0f       	add	r28, r30
    1310:	d1 1d       	adc	r29, r1
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	ed 01       	movw	r28, r26
    131e:	08 95       	ret

00001320 <_exit>:
    1320:	f8 94       	cli

00001322 <__stop_program>:
    1322:	ff cf       	rjmp	.-2      	; 0x1322 <__stop_program>
