
CSSE2010_A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001874  00001908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008001a0  008001a0  000019a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002506  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001097  00000000  00000000  000041ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000187f  00000000  00000000  00005281  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000074c  00000000  00000000  00006b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf3  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001956  00000000  00000000  00007f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00009895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_5>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__vector_20>
      54:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__vector_21>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	53 74       	andi	r21, 0x43	; 67
      7e:	75 64       	ori	r23, 0x45	; 69
      80:	65 6e       	ori	r22, 0xE5	; 229
      82:	74 20       	and	r7, r4
      84:	4e 75       	andi	r20, 0x5E	; 94
      86:	6d 62       	ori	r22, 0x2D	; 45
      88:	65 72       	andi	r22, 0x25	; 37
      8a:	3a 20       	and	r3, r10
      8c:	34 38       	cpi	r19, 0x84	; 132
      8e:	38 34       	cpi	r19, 0x48	; 72
      90:	30 34       	cpi	r19, 0x40	; 64
      92:	36 38       	cpi	r19, 0x86	; 134
	...

00000095 <__c.2283>:
      95:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
      a5:	20 62 79 20 4c 61 63 68 6c 61 6e 20 48 6f 6c 6c      by Lachlan Holl
      b5:	69 64 61 79 00                                      iday.

000000ba <__c.2281>:
      ba:	45 6c 65 76 61 74 6f 72 20 43 6f 6e 74 72 6f 6c     Elevator Control
      ca:	6c 65 72 00                                         ler.

000000ce <__c.2040>:
      ce:	1b 5b 32 4a 00                                      .[2J.

000000d3 <__c.2025>:
      d3:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e4 e7       	ldi	r30, 0x74	; 116
      f0:	f8 e1       	ldi	r31, 0x18	; 24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a0 3a       	cpi	r26, 0xA0	; 160
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	22 e0       	ldi	r18, 0x02	; 2
     100:	a0 ea       	ldi	r26, 0xA0	; 160
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a8 3e       	cpi	r26, 0xE8	; 232
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <main>
     112:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     11a:	e8 e6       	ldi	r30, 0x68	; 104
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	82 60       	ori	r24, 0x02	; 2
     122:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     124:	8b b3       	in	r24, 0x1b	; 27
     126:	82 60       	ori	r24, 0x02	; 2
     128:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     12a:	ec e6       	ldi	r30, 0x6C	; 108
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	8f 60       	ori	r24, 0x0F	; 15
     132:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     134:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
     138:	08 95       	ret

0000013a <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     13a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
     13e:	18 16       	cp	r1, r24
     140:	14 f5       	brge	.+68     	; 0x186 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     142:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     146:	6f b7       	in	r22, 0x3f	; 63
		cli();
     148:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	09 c0       	rjmp	.+18     	; 0x160 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     14e:	f9 01       	movw	r30, r18
     150:	ef 55       	subi	r30, 0x5F	; 95
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	40 81       	ld	r20, Z
     156:	f9 01       	movw	r30, r18
     158:	e0 56       	subi	r30, 0x60	; 96
     15a:	fe 4f       	sbci	r31, 0xFE	; 254
     15c:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     15e:	9f 5f       	subi	r25, 0xFF	; 255
     160:	29 2f       	mov	r18, r25
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <__data_end>
     168:	04 2e       	mov	r0, r20
     16a:	00 0c       	add	r0, r0
     16c:	55 0b       	sbc	r21, r21
     16e:	24 17       	cp	r18, r20
     170:	35 07       	cpc	r19, r21
     172:	6c f3       	brlt	.-38     	; 0x14e <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     174:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__data_end>
     178:	91 50       	subi	r25, 0x01	; 1
     17a:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end>
		
		if(interrupts_were_enabled) {
     17e:	66 23       	and	r22, r22
     180:	1c f4       	brge	.+6      	; 0x188 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     182:	78 94       	sei
     184:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     186:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     188:	08 95       	ret

0000018a <__vector_5>:


// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	8f 93       	push	r24
     19c:	9f 93       	push	r25
     19e:	ef 93       	push	r30
     1a0:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1a2:	43 b1       	in	r20, 0x03	; 3
     1a4:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	26 c0       	rjmp	.+76     	; 0x1f6 <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     1aa:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__data_end>
     1ae:	94 30       	cpi	r25, 0x04	; 4
     1b0:	0c f5       	brge	.+66     	; 0x1f4 <__vector_5+0x6a>
     1b2:	24 2f       	mov	r18, r20
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	08 2e       	mov	r0, r24
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_5+0x34>
     1ba:	35 95       	asr	r19
     1bc:	27 95       	ror	r18
     1be:	0a 94       	dec	r0
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <__vector_5+0x30>
     1c2:	20 ff       	sbrs	r18, 0
     1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <__vector_5+0x6a>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     1c6:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <last_button_state>
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	08 2e       	mov	r0, r24
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_5+0x4a>
     1d0:	35 95       	asr	r19
     1d2:	27 95       	ror	r18
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     1d8:	20 fd       	sbrc	r18, 0
     1da:	0c c0       	rjmp	.+24     	; 0x1f4 <__vector_5+0x6a>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     1dc:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__data_end>
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	9e 0f       	add	r25, r30
     1e4:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__data_end>
     1e8:	0e 2e       	mov	r0, r30
     1ea:	00 0c       	add	r0, r0
     1ec:	ff 0b       	sbc	r31, r31
     1ee:	ef 55       	subi	r30, 0x5F	; 95
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1f4:	8f 5f       	subi	r24, 0xFF	; 255
     1f6:	84 30       	cpi	r24, 0x04	; 4
     1f8:	c0 f2       	brcs	.-80     	; 0x1aa <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     1fa:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <last_button_state>
}
     1fe:	ff 91       	pop	r31
     200:	ef 91       	pop	r30
     202:	9f 91       	pop	r25
     204:	8f 91       	pop	r24
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
     210:	0f 90       	pop	r0
     212:	1f 90       	pop	r1
     214:	18 95       	reti

00000216 <initialise_display>:
	(1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0) | (0<<8)
	};

void initialise_display(void) {
	// clear the LED matrix
	ledmatrix_clear();
     216:	0e 94 b0 06 	call	0xd60	; 0xd60 <ledmatrix_clear>
     21a:	08 95       	ret

0000021c <start_display>:
}

void start_display(void) {
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	28 97       	sbiw	r28, 0x08	; 8
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     232:	0e 94 b0 06 	call	0xd60	; 0xd60 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     236:	10 e0       	ldi	r17, 0x00	; 0
     238:	2c c0       	rjmp	.+88     	; 0x292 <start_display+0x76>
		col_data = elevator_display[col];
     23a:	e1 2f       	mov	r30, r17
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	ec 5e       	subi	r30, 0xEC	; 236
     244:	fe 4f       	sbci	r31, 0xFE	; 254
     246:	20 81       	ld	r18, Z
     248:	31 81       	ldd	r19, Z+1	; 0x01
		// using the 9th bit as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x0100) {
     24a:	30 ff       	sbrs	r19, 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <start_display+0x36>
			colour = COLOUR_RED;
     24e:	9f e0       	ldi	r25, 0x0F	; 15
     250:	01 c0       	rjmp	.+2      	; 0x254 <start_display+0x38>
		} else {
			colour = COLOUR_GREEN;
     252:	90 ef       	ldi	r25, 0xF0	; 240
		}
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	14 c0       	rjmp	.+40     	; 0x280 <start_display+0x64>
			if(col_data & 0x01) {
     258:	20 ff       	sbrs	r18, 0
     25a:	08 c0       	rjmp	.+16     	; 0x26c <start_display+0x50>
				column_colour_data[i] = colour;
     25c:	e1 e0       	ldi	r30, 0x01	; 1
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	ec 0f       	add	r30, r28
     262:	fd 1f       	adc	r31, r29
     264:	e8 0f       	add	r30, r24
     266:	f1 1d       	adc	r31, r1
     268:	90 83       	st	Z, r25
     26a:	07 c0       	rjmp	.+14     	; 0x27a <start_display+0x5e>
				} else {
				column_colour_data[i] = 0;
     26c:	e1 e0       	ldi	r30, 0x01	; 1
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ec 0f       	add	r30, r28
     272:	fd 1f       	adc	r31, r29
     274:	e8 0f       	add	r30, r24
     276:	f1 1d       	adc	r31, r1
     278:	10 82       	st	Z, r1
			}
			col_data >>= 1;
     27a:	36 95       	lsr	r19
     27c:	27 95       	ror	r18
			colour = COLOUR_RED;
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	88 30       	cpi	r24, 0x08	; 8
     282:	50 f3       	brcs	.-44     	; 0x258 <start_display+0x3c>
				column_colour_data[i] = 0;
			}
			col_data >>= 1;
		}
		//column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
     284:	be 01       	movw	r22, r28
     286:	6f 5f       	subi	r22, 0xFF	; 255
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	81 2f       	mov	r24, r17
     28c:	0e 94 93 06 	call	0xd26	; 0xd26 <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     290:	1f 5f       	subi	r17, 0xFF	; 255
     292:	10 31       	cpi	r17, 0x10	; 16
     294:	90 f2       	brcs	.-92     	; 0x23a <start_display+0x1e>
		}
		//column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
	
}
     296:	28 96       	adiw	r28, 0x08	; 8
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <start_display_animation>:

void start_display_animation(uint8_t frame) {
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	28 97       	sbiw	r28, 0x08	; 8
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	08 2f       	mov	r16, r24
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
     2c4:	19 e0       	ldi	r17, 0x09	; 9
     2c6:	3a c0       	rjmp	.+116    	; 0x33c <start_display_animation+0x92>
		col_data = (1<<7)|(1<<(3-frame))|(1<<(4+frame))|(1<<0);
     2c8:	40 2f       	mov	r20, r16
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	23 e0       	ldi	r18, 0x03	; 3
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	24 1b       	sub	r18, r20
     2d2:	35 0b       	sbc	r19, r21
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <start_display_animation+0x36>
     2dc:	66 0f       	add	r22, r22
     2de:	77 1f       	adc	r23, r23
     2e0:	2a 95       	dec	r18
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <start_display_animation+0x32>
     2e4:	9b 01       	movw	r18, r22
     2e6:	20 68       	ori	r18, 0x80	; 128
     2e8:	4c 5f       	subi	r20, 0xFC	; 252
     2ea:	5f 4f       	sbci	r21, 0xFF	; 255
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <start_display_animation+0x48>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	4a 95       	dec	r20
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <start_display_animation+0x44>
     2f6:	28 2b       	or	r18, r24
     2f8:	39 2b       	or	r19, r25
     2fa:	21 60       	ori	r18, 0x01	; 1
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	15 c0       	rjmp	.+42     	; 0x32a <start_display_animation+0x80>
			if(col_data & 0x01) {
     300:	20 ff       	sbrs	r18, 0
     302:	09 c0       	rjmp	.+18     	; 0x316 <start_display_animation+0x6c>
				column_colour_data[i] = COLOUR_GREEN;
     304:	e1 e0       	ldi	r30, 0x01	; 1
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ec 0f       	add	r30, r28
     30a:	fd 1f       	adc	r31, r29
     30c:	e8 0f       	add	r30, r24
     30e:	f1 1d       	adc	r31, r1
     310:	90 ef       	ldi	r25, 0xF0	; 240
     312:	90 83       	st	Z, r25
     314:	07 c0       	rjmp	.+14     	; 0x324 <start_display_animation+0x7a>
				} else {
				column_colour_data[i] = 0;
     316:	e1 e0       	ldi	r30, 0x01	; 1
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ec 0f       	add	r30, r28
     31c:	fd 1f       	adc	r31, r29
     31e:	e8 0f       	add	r30, r24
     320:	f1 1d       	adc	r31, r1
     322:	10 82       	st	Z, r1
			}
			col_data >>= 1;
     324:	36 95       	lsr	r19
     326:	27 95       	ror	r18
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
		col_data = (1<<7)|(1<<(3-frame))|(1<<(4+frame))|(1<<0);
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	88 30       	cpi	r24, 0x08	; 8
     32c:	48 f3       	brcs	.-46     	; 0x300 <start_display_animation+0x56>
				} else {
				column_colour_data[i] = 0;
			}
			col_data >>= 1;
		}
		ledmatrix_update_column(col, column_colour_data);
     32e:	be 01       	movw	r22, r28
     330:	6f 5f       	subi	r22, 0xFF	; 255
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	81 2f       	mov	r24, r17
     336:	0e 94 93 06 	call	0xd26	; 0xd26 <ledmatrix_update_column>
void start_display_animation(uint8_t frame) {
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
     33a:	1f 5f       	subi	r17, 0xFF	; 255
     33c:	1f 30       	cpi	r17, 0x0F	; 15
     33e:	20 f2       	brcs	.-120    	; 0x2c8 <start_display_animation+0x1e>
			}
			col_data >>= 1;
		}
		ledmatrix_update_column(col, column_colour_data);
	}
}
     340:	28 96       	adiw	r28, 0x08	; 8
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	08 95       	ret

00000356 <update_square_colour>:
 */
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	
	// first check that this is a square within the game field
	// if outside the game field, don't update anything
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
     356:	88 30       	cpi	r24, 0x08	; 8
     358:	08 f5       	brcc	.+66     	; 0x39c <update_square_colour+0x46>
     35a:	60 31       	cpi	r22, 0x10	; 16
     35c:	f8 f4       	brcc	.+62     	; 0x39c <update_square_colour+0x46>
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;

	if (object == ELEVATOR) {
     35e:	41 30       	cpi	r20, 0x01	; 1
     360:	61 f0       	breq	.+24     	; 0x37a <update_square_colour+0x24>
		colour = MATRIX_COLOUR_ELEVATOR;
	} else if (object == FLOOR) {
     362:	42 30       	cpi	r20, 0x02	; 2
     364:	61 f0       	breq	.+24     	; 0x37e <update_square_colour+0x28>
		colour = MATRIX_COLOUR_FLOOR;
	} else if (object == TRAVELLER_TO_0) {
     366:	43 30       	cpi	r20, 0x03	; 3
     368:	61 f0       	breq	.+24     	; 0x382 <update_square_colour+0x2c>
		colour = MATRIX_COLOUR_TRAVELLER_0;
	} else if (object == TRAVELLER_TO_1) {
     36a:	44 30       	cpi	r20, 0x04	; 4
     36c:	61 f0       	breq	.+24     	; 0x386 <update_square_colour+0x30>
	colour = MATRIX_COLOUR_TRAVELLER_1;
	} else if (object == TRAVELLER_TO_2) {
     36e:	45 30       	cpi	r20, 0x05	; 5
     370:	61 f0       	breq	.+24     	; 0x38a <update_square_colour+0x34>
	colour = MATRIX_COLOUR_TRAVELLER_2;
	} else if (object == TRAVELLER_TO_3) {
     372:	46 30       	cpi	r20, 0x06	; 6
     374:	61 f4       	brne	.+24     	; 0x38e <update_square_colour+0x38>
	colour = MATRIX_COLOUR_TRAVELLER_3;
     376:	43 e1       	ldi	r20, 0x13	; 19
     378:	0b c0       	rjmp	.+22     	; 0x390 <update_square_colour+0x3a>
	
	// determine which colour corresponds to this object
	PixelColour colour;

	if (object == ELEVATOR) {
		colour = MATRIX_COLOUR_ELEVATOR;
     37a:	4f e0       	ldi	r20, 0x0F	; 15
     37c:	09 c0       	rjmp	.+18     	; 0x390 <update_square_colour+0x3a>
	} else if (object == FLOOR) {
		colour = MATRIX_COLOUR_FLOOR;
     37e:	40 ef       	ldi	r20, 0xF0	; 240
     380:	07 c0       	rjmp	.+14     	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_0) {
		colour = MATRIX_COLOUR_TRAVELLER_0;
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	05 c0       	rjmp	.+10     	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_1) {
	colour = MATRIX_COLOUR_TRAVELLER_1;
     386:	41 e1       	ldi	r20, 0x11	; 17
     388:	03 c0       	rjmp	.+6      	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_2) {
	colour = MATRIX_COLOUR_TRAVELLER_2;
     38a:	45 e3       	ldi	r20, 0x35	; 53
     38c:	01 c0       	rjmp	.+2      	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_3) {
	colour = MATRIX_COLOUR_TRAVELLER_3;
	} else {
		// anything unexpected (or empty) will be black
		colour = MATRIX_COLOUR_EMPTY;
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	96 2f       	mov	r25, r22
     392:	68 2f       	mov	r22, r24
	/* x and y are swapped here because the ledmatrix.c code
	 * treats the matrix as being horizontal, while the elevator
	 * controller treats the matrix vertically. We also want x
	 * to be interpreted as from bottom to top, not top to bottom.
	 */
	ledmatrix_update_pixel(15 - y, x, colour); 
     394:	8f e0       	ldi	r24, 0x0F	; 15
     396:	89 1b       	sub	r24, r25
     398:	0e 94 74 06 	call	0xce8	; 0xce8 <ledmatrix_update_pixel>
     39c:	08 95       	ret

0000039e <beep>:

/* Internal Function Definitions */


static void beep(uint16_t freq, uint16_t dur_ms)
{
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	eb 01       	movw	r28, r22
	OCR1A   = F_CPU/(16UL*freq) - 1;
     3ac:	6c 01       	movw	r12, r24
     3ae:	e1 2c       	mov	r14, r1
     3b0:	f1 2c       	mov	r15, r1
     3b2:	d7 01       	movw	r26, r14
     3b4:	c6 01       	movw	r24, r12
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	aa 1f       	adc	r26, r26
     3bc:	bb 1f       	adc	r27, r27
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	aa 1f       	adc	r26, r26
     3c4:	bb 1f       	adc	r27, r27
     3c6:	9c 01       	movw	r18, r24
     3c8:	ad 01       	movw	r20, r26
     3ca:	22 0f       	add	r18, r18
     3cc:	33 1f       	adc	r19, r19
     3ce:	44 1f       	adc	r20, r20
     3d0:	55 1f       	adc	r21, r21
     3d2:	22 0f       	add	r18, r18
     3d4:	33 1f       	adc	r19, r19
     3d6:	44 1f       	adc	r20, r20
     3d8:	55 1f       	adc	r21, r21
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	72 e1       	ldi	r23, 0x12	; 18
     3de:	8a e7       	ldi	r24, 0x7A	; 122
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 9b 08 	call	0x1136	; 0x1136 <__udivmodsi4>
     3e6:	21 50       	subi	r18, 0x01	; 1
     3e8:	31 09       	sbc	r19, r1
     3ea:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     3ee:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1   = 0;
     3f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     3f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A  = 0;
     3fa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B  = (1<<WGM12) | (1<<CS11);
     3fe:	8a e0       	ldi	r24, 0x0A	; 10
     400:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	uint32_t count = (uint32_t)freq * dur_ms * 2UL / 1000UL;
     404:	de 01       	movw	r26, r28
     406:	a7 01       	movw	r20, r14
     408:	96 01       	movw	r18, r12
     40a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__muluhisi3>
     40e:	66 0f       	add	r22, r22
     410:	77 1f       	adc	r23, r23
     412:	88 1f       	adc	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	28 ee       	ldi	r18, 0xE8	; 232
     418:	33 e0       	ldi	r19, 0x03	; 3
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	0e 94 9b 08 	call	0x1136	; 0x1136 <__udivmodsi4>
	while (count--) {
     422:	09 c0       	rjmp	.+18     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		while (!(TIFR1 & (1<<OCF1A)));
     424:	b1 9b       	sbis	0x16, 1	; 22
     426:	fe cf       	rjmp	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		TIFR1        = (1<<OCF1A);
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	86 bb       	out	0x16, r24	; 22
		BUZZER_PORT ^= (1<<BUZZER_PIN);
     42c:	8b b1       	in	r24, 0x0b	; 11
     42e:	80 58       	subi	r24, 0x80	; 128
     430:	8b b9       	out	0x0b, r24	; 11
	TCNT1   = 0;
	TCCR1A  = 0;
	TCCR1B  = (1<<WGM12) | (1<<CS11);

	uint32_t count = (uint32_t)freq * dur_ms * 2UL / 1000UL;
	while (count--) {
     432:	a7 01       	movw	r20, r14
     434:	96 01       	movw	r18, r12
     436:	69 01       	movw	r12, r18
     438:	7a 01       	movw	r14, r20
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	c8 1a       	sub	r12, r24
     43e:	d1 08       	sbc	r13, r1
     440:	e1 08       	sbc	r14, r1
     442:	f1 08       	sbc	r15, r1
     444:	23 2b       	or	r18, r19
     446:	24 2b       	or	r18, r20
     448:	25 2b       	or	r18, r21
     44a:	61 f7       	brne	.-40     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		while (!(TIFR1 & (1<<OCF1A)));
		TIFR1        = (1<<OCF1A);
		BUZZER_PORT ^= (1<<BUZZER_PIN);
	}
	TCCR1B = 0;
     44c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	BUZZER_PORT &= ~(1<<BUZZER_PIN);
     450:	8b b1       	in	r24, 0x0b	; 11
     452:	8f 77       	andi	r24, 0x7F	; 127
     454:	8b b9       	out	0x0b, r24	; 11
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	df 90       	pop	r13
     460:	cf 90       	pop	r12
     462:	08 95       	ret

00000464 <multiplex_ssd>:
			break;
		}
	}
}

static void multiplex_ssd(void) {
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
	static uint32_t last_t = 0;
	static bool show_floor = false;
	uint32_t now = get_current_time();
     468:	0e 94 66 08 	call	0x10cc	; 0x10cc <get_current_time>
	if (now == last_t) return;
     46c:	00 91 a8 01 	lds	r16, 0x01A8	; 0x8001a8 <last_t.2298>
     470:	10 91 a9 01 	lds	r17, 0x01A9	; 0x8001a9 <last_t.2298+0x1>
     474:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <last_t.2298+0x2>
     478:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <last_t.2298+0x3>
     47c:	60 17       	cp	r22, r16
     47e:	71 07       	cpc	r23, r17
     480:	82 07       	cpc	r24, r18
     482:	93 07       	cpc	r25, r19
     484:	09 f4       	brne	.+2      	; 0x488 <multiplex_ssd+0x24>
     486:	42 c0       	rjmp	.+132    	; 0x50c <multiplex_ssd+0xa8>
	last_t = now;
     488:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <last_t.2298>
     48c:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <last_t.2298+0x1>
     490:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <last_t.2298+0x2>
     494:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <last_t.2298+0x3>
	show_floor = !show_floor;
     498:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <show_floor.2299>
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	89 27       	eor	r24, r25
     4a0:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <show_floor.2299>

	if (show_floor) {
     4a4:	88 23       	and	r24, r24
     4a6:	21 f0       	breq	.+8      	; 0x4b0 <multiplex_ssd+0x4c>
		PORTD |= SSD_CC;
     4a8:	8b b1       	in	r24, 0x0b	; 11
     4aa:	84 60       	ori	r24, 0x04	; 4
     4ac:	8b b9       	out	0x0b, r24	; 11
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <multiplex_ssd+0x52>
		} else {
		PORTD &= ~SSD_CC;
     4b0:	8b b1       	in	r24, 0x0b	; 11
     4b2:	8b 7f       	andi	r24, 0xFB	; 251
     4b4:	8b b9       	out	0x0b, r24	; 11
	}

	PORTA &= ~SEG_MASK;
     4b6:	82 b1       	in	r24, 0x02	; 2
     4b8:	80 78       	andi	r24, 0x80	; 128
     4ba:	82 b9       	out	0x02, r24	; 2
	PORTD &= ~SSD_DP;
     4bc:	8b b1       	in	r24, 0x0b	; 11
     4be:	87 7f       	andi	r24, 0xF7	; 247
     4c0:	8b b9       	out	0x0b, r24	; 11

	if (show_floor) {
     4c2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <show_floor.2299>
     4c6:	88 23       	and	r24, r24
     4c8:	c9 f0       	breq	.+50     	; 0x4fc <multiplex_ssd+0x98>
		uint8_t f = current_floor / 4;
     4ca:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <current_floor>
     4ce:	ee 23       	and	r30, r30
     4d0:	0c f4       	brge	.+2      	; 0x4d4 <multiplex_ssd+0x70>
     4d2:	ed 5f       	subi	r30, 0xFD	; 253
     4d4:	e5 95       	asr	r30
     4d6:	e5 95       	asr	r30
		PORTA |= floor_seg[f];
     4d8:	92 b1       	in	r25, 0x02	; 2
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	ee 5f       	subi	r30, 0xFE	; 254
     4de:	fe 4f       	sbci	r31, 0xFE	; 254
     4e0:	80 81       	ld	r24, Z
     4e2:	89 2b       	or	r24, r25
     4e4:	82 b9       	out	0x02, r24	; 2
		if (current_position % 4 != 0) {
     4e6:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <current_position>
     4ea:	83 70       	andi	r24, 0x03	; 3
     4ec:	19 f0       	breq	.+6      	; 0x4f4 <multiplex_ssd+0x90>
			PORTD |= SSD_DP;
     4ee:	8b b1       	in	r24, 0x0b	; 11
     4f0:	88 60       	ori	r24, 0x08	; 8
     4f2:	8b b9       	out	0x0b, r24	; 11
		}
		//right
		PORTD &= ~SSD_CC;
     4f4:	8b b1       	in	r24, 0x0b	; 11
     4f6:	8b 7f       	andi	r24, 0xFB	; 251
     4f8:	8b b9       	out	0x0b, r24	; 11
     4fa:	08 c0       	rjmp	.+16     	; 0x50c <multiplex_ssd+0xa8>
		} else {
		PORTA |= last_direction;  
     4fc:	92 b1       	in	r25, 0x02	; 2
     4fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     502:	89 2b       	or	r24, r25
     504:	82 b9       	out	0x02, r24	; 2
		//left
		PORTD |= SSD_CC;
     506:	8b b1       	in	r24, 0x0b	; 11
     508:	84 60       	ori	r24, 0x04	; 4
     50a:	8b b9       	out	0x0b, r24	; 11
	}
}
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	08 95       	ret

00000512 <start_led_animation>:

bool led_animating = false;
uint32_t led_anim_start = 0;

void start_led_animation(void) {
	led_animating = true;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <led_animating>
	led_anim_start = get_current_time();
     518:	0e 94 66 08 	call	0x10cc	; 0x10cc <get_current_time>
     51c:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <led_anim_start>
     520:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <led_anim_start+0x1>
     524:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <led_anim_start+0x2>
     528:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <led_anim_start+0x3>
     52c:	08 95       	ret

0000052e <service_led_animation>:
}

void service_led_animation(void) {
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
	if (!led_animating) return;
     532:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <led_animating>
     536:	88 23       	and	r24, r24
     538:	a9 f1       	breq	.+106    	; 0x5a4 <service_led_animation+0x76>

	uint32_t dt = get_current_time() - led_anim_start;
     53a:	0e 94 66 08 	call	0x10cc	; 0x10cc <get_current_time>
     53e:	00 91 ac 01 	lds	r16, 0x01AC	; 0x8001ac <led_anim_start>
     542:	10 91 ad 01 	lds	r17, 0x01AD	; 0x8001ad <led_anim_start+0x1>
     546:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <led_anim_start+0x2>
     54a:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <led_anim_start+0x3>
     54e:	dc 01       	movw	r26, r24
     550:	cb 01       	movw	r24, r22
     552:	80 1b       	sub	r24, r16
     554:	91 0b       	sbc	r25, r17
     556:	a2 0b       	sbc	r26, r18
     558:	b3 0b       	sbc	r27, r19
	
	PORTC &= ~LED_MASK;
     55a:	28 b1       	in	r18, 0x08	; 8
     55c:	2f 70       	andi	r18, 0x0F	; 15
     55e:	28 b9       	out	0x08, r18	; 8


	if (dt < 400) { //door closed
     560:	80 39       	cpi	r24, 0x90	; 144
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	92 07       	cpc	r25, r18
     566:	a1 05       	cpc	r26, r1
     568:	b1 05       	cpc	r27, r1
     56a:	20 f4       	brcc	.+8      	; 0x574 <service_led_animation+0x46>
        PORTC |= (LED_L1|LED_L2);
     56c:	88 b1       	in	r24, 0x08	; 8
     56e:	80 66       	ori	r24, 0x60	; 96
     570:	88 b9       	out	0x08, r24	; 8
     572:	18 c0       	rjmp	.+48     	; 0x5a4 <service_led_animation+0x76>
	}
	else if (dt < 800) { // door open
     574:	80 32       	cpi	r24, 0x20	; 32
     576:	23 e0       	ldi	r18, 0x03	; 3
     578:	92 07       	cpc	r25, r18
     57a:	a1 05       	cpc	r26, r1
     57c:	b1 05       	cpc	r27, r1
     57e:	20 f4       	brcc	.+8      	; 0x588 <service_led_animation+0x5a>
        PORTC |= (LED_L0|LED_L3);
     580:	88 b1       	in	r24, 0x08	; 8
     582:	80 69       	ori	r24, 0x90	; 144
     584:	88 b9       	out	0x08, r24	; 8
     586:	0e c0       	rjmp	.+28     	; 0x5a4 <service_led_animation+0x76>
	}
	else if (dt < 1200) { //door closing
     588:	80 3b       	cpi	r24, 0xB0	; 176
     58a:	94 40       	sbci	r25, 0x04	; 4
     58c:	a1 05       	cpc	r26, r1
     58e:	b1 05       	cpc	r27, r1
     590:	20 f4       	brcc	.+8      	; 0x59a <service_led_animation+0x6c>
        PORTC |= (LED_L1|LED_L2);
     592:	88 b1       	in	r24, 0x08	; 8
     594:	80 66       	ori	r24, 0x60	; 96
     596:	88 b9       	out	0x08, r24	; 8
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <service_led_animation+0x76>
	}
	else {
		led_animating = false; //door close
     59a:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <led_animating>
        PORTC |= (LED_L1|LED_L2);
     59e:	88 b1       	in	r24, 0x08	; 8
     5a0:	80 66       	ori	r24, 0x60	; 96
     5a2:	88 b9       	out	0x08, r24	; 8
	}
}
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	08 95       	ret

000005aa <initialise_hardware>:
 * @arg none
 * @retval none
*/
void initialise_hardware(void) {
	
	ledmatrix_setup();
     5aa:	0e 94 70 06 	call	0xce0	; 0xce0 <ledmatrix_setup>
	init_button_interrupts();
     5ae:	0e 94 8d 00 	call	0x11a	; 0x11a <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	7b e4       	ldi	r23, 0x4B	; 75
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 1a 07 	call	0xe34	; 0xe34 <init_serial_stdio>
	
	init_timer0();
     5c0:	0e 94 4e 08 	call	0x109c	; 0x109c <init_timer0>
	
	// Turn on global interrupts
	sei();
     5c4:	78 94       	sei
	
	DDRA |= SEG_MASK;
     5c6:	81 b1       	in	r24, 0x01	; 1
     5c8:	8f 67       	ori	r24, 0x7F	; 127
     5ca:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~SEG_MASK;
     5cc:	82 b1       	in	r24, 0x02	; 2
     5ce:	80 78       	andi	r24, 0x80	; 128
     5d0:	82 b9       	out	0x02, r24	; 2

	DDRD |= SSD_CC | SSD_DP;
     5d2:	8a b1       	in	r24, 0x0a	; 10
     5d4:	8c 60       	ori	r24, 0x0C	; 12
     5d6:	8a b9       	out	0x0a, r24	; 10
	PORTD |=  SSD_CC;
     5d8:	8b b1       	in	r24, 0x0b	; 11
     5da:	84 60       	ori	r24, 0x04	; 4
     5dc:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~SSD_DP;
     5de:	8b b1       	in	r24, 0x0b	; 11
     5e0:	87 7f       	andi	r24, 0xF7	; 247
     5e2:	8b b9       	out	0x0b, r24	; 11
	BUZZER_DDR |= (1<<BUZZER_PIN);
     5e4:	8a b1       	in	r24, 0x0a	; 10
     5e6:	80 68       	ori	r24, 0x80	; 128
     5e8:	8a b9       	out	0x0a, r24	; 10
	
	DDRC |= LED_MASK;
     5ea:	87 b1       	in	r24, 0x07	; 7
     5ec:	80 6f       	ori	r24, 0xF0	; 240
     5ee:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~LED_MASK;
     5f0:	88 b1       	in	r24, 0x08	; 8
     5f2:	8f 70       	andi	r24, 0x0F	; 15
     5f4:	88 b9       	out	0x08, r24	; 8
     5f6:	08 95       	ret

000005f8 <start_screen>:
/**
 * @brief Displays the "EC" start screen with elevator symbol
 * @arg none
 * @retval none
*/
void start_screen(void) {
     5f8:	8f 92       	push	r8
     5fa:	9f 92       	push	r9
     5fc:	af 92       	push	r10
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     60c:	0e 94 45 08 	call	0x108a	; 0x108a <clear_terminal>
	move_terminal_cursor(10,10);
     610:	6a e0       	ldi	r22, 0x0A	; 10
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	8a e0       	ldi	r24, 0x0A	; 10
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 34 08 	call	0x1068	; 0x1068 <move_terminal_cursor>
	printf_P(PSTR("Elevator Controller"));
     61c:	8a eb       	ldi	r24, 0xBA	; 186
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9f 93       	push	r25
     622:	8f 93       	push	r24
     624:	0e 94 4a 09 	call	0x1294	; 0x1294 <printf_P>
	move_terminal_cursor(10,12);
     628:	6c e0       	ldi	r22, 0x0C	; 12
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	8a e0       	ldi	r24, 0x0A	; 10
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 34 08 	call	0x1068	; 0x1068 <move_terminal_cursor>
	printf_P(PSTR("CSSE2010 project by Lachlan Holliday"));
     634:	85 e9       	ldi	r24, 0x95	; 149
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	0e 94 4a 09 	call	0x1294	; 0x1294 <printf_P>
	move_terminal_cursor(10,14);
     640:	6e e0       	ldi	r22, 0x0E	; 14
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	8a e0       	ldi	r24, 0x0A	; 10
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 34 08 	call	0x1068	; 0x1068 <move_terminal_cursor>
	printf_P(PSTR("Student Number: 48840468"));
     64c:	8c e7       	ldi	r24, 0x7C	; 124
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	0e 94 4a 09 	call	0x1294	; 0x1294 <printf_P>
	
	// Show start screen
	start_display();
     658:	0e 94 0e 01 	call	0x21c	; 0x21c <start_display>
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
	
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
	uint8_t frame = 0;
	uint8_t doors_opening_closing = 1;
     668:	d1 e0       	ldi	r29, 0x01	; 1
	// Show start screen
	start_display();
	
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
	uint8_t frame = 0;
     66a:	c0 e0       	ldi	r28, 0x00	; 0
	
	// Show start screen
	start_display();
	
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
     66c:	0f 2e       	mov	r0, r31
     66e:	f6 e9       	ldi	r31, 0x96	; 150
     670:	8f 2e       	mov	r8, r31
     672:	91 2c       	mov	r9, r1
     674:	a1 2c       	mov	r10, r1
     676:	b1 2c       	mov	r11, r1
     678:	f0 2d       	mov	r31, r0
	printf_P(PSTR("Student Number: 48840468"));
	
	// Show start screen
	start_display();
	
	uint32_t doors_frame_time = 0;
     67a:	c1 2c       	mov	r12, r1
     67c:	d1 2c       	mov	r13, r1
     67e:	76 01       	movw	r14, r12
	while(1) {

		
		// Don't worry about this if/else tree. Its purely for animating
		// the elevator doors on the start screen
		if (get_current_time() - doors_frame_time  > interval_delay) {
     680:	0e 94 66 08 	call	0x10cc	; 0x10cc <get_current_time>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	8c 19       	sub	r24, r12
     68a:	9d 09       	sbc	r25, r13
     68c:	ae 09       	sbc	r26, r14
     68e:	bf 09       	sbc	r27, r15
     690:	88 16       	cp	r8, r24
     692:	99 06       	cpc	r9, r25
     694:	aa 06       	cpc	r10, r26
     696:	bb 06       	cpc	r11, r27
     698:	c0 f5       	brcc	.+112    	; 0x70a <start_screen+0x112>
			start_display_animation(frame);
     69a:	8c 2f       	mov	r24, r28
     69c:	0e 94 55 01 	call	0x2aa	; 0x2aa <start_display_animation>
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
     6a0:	0e 94 66 08 	call	0x10cc	; 0x10cc <get_current_time>
     6a4:	6b 01       	movw	r12, r22
     6a6:	7c 01       	movw	r14, r24
			if (doors_opening_closing) {
     6a8:	dd 23       	and	r29, r29
     6aa:	b1 f0       	breq	.+44     	; 0x6d8 <start_screen+0xe0>
				interval_delay = 150;
				frame++;
     6ac:	cf 5f       	subi	r28, 0xFF	; 255
				if (frame == 1) interval_delay = 2000;
     6ae:	c1 30       	cpi	r28, 0x01	; 1
     6b0:	41 f0       	breq	.+16     	; 0x6c2 <start_screen+0xca>
		// the elevator doors on the start screen
		if (get_current_time() - doors_frame_time  > interval_delay) {
			start_display_animation(frame);
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
			if (doors_opening_closing) {
				interval_delay = 150;
     6b2:	0f 2e       	mov	r0, r31
     6b4:	f6 e9       	ldi	r31, 0x96	; 150
     6b6:	8f 2e       	mov	r8, r31
     6b8:	91 2c       	mov	r9, r1
     6ba:	a1 2c       	mov	r10, r1
     6bc:	b1 2c       	mov	r11, r1
     6be:	f0 2d       	mov	r31, r0
     6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <start_screen+0xda>
				frame++;
				if (frame == 1) interval_delay = 2000;
     6c2:	0f 2e       	mov	r0, r31
     6c4:	f0 ed       	ldi	r31, 0xD0	; 208
     6c6:	8f 2e       	mov	r8, r31
     6c8:	f7 e0       	ldi	r31, 0x07	; 7
     6ca:	9f 2e       	mov	r9, r31
     6cc:	a1 2c       	mov	r10, r1
     6ce:	b1 2c       	mov	r11, r1
     6d0:	f0 2d       	mov	r31, r0
				if (frame == 3) doors_opening_closing = 0;
     6d2:	c3 30       	cpi	r28, 0x03	; 3
     6d4:	d1 f4       	brne	.+52     	; 0x70a <start_screen+0x112>
     6d6:	16 c0       	rjmp	.+44     	; 0x704 <start_screen+0x10c>
			} else {
				interval_delay = 150;
				frame--;
     6d8:	c1 50       	subi	r28, 0x01	; 1
				if (frame == 2) interval_delay = 500;
     6da:	c2 30       	cpi	r28, 0x02	; 2
     6dc:	41 f0       	breq	.+16     	; 0x6ee <start_screen+0xf6>
				interval_delay = 150;
				frame++;
				if (frame == 1) interval_delay = 2000;
				if (frame == 3) doors_opening_closing = 0;
			} else {
				interval_delay = 150;
     6de:	0f 2e       	mov	r0, r31
     6e0:	f6 e9       	ldi	r31, 0x96	; 150
     6e2:	8f 2e       	mov	r8, r31
     6e4:	91 2c       	mov	r9, r1
     6e6:	a1 2c       	mov	r10, r1
     6e8:	b1 2c       	mov	r11, r1
     6ea:	f0 2d       	mov	r31, r0
     6ec:	08 c0       	rjmp	.+16     	; 0x6fe <start_screen+0x106>
				frame--;
				if (frame == 2) interval_delay = 500;
     6ee:	0f 2e       	mov	r0, r31
     6f0:	f4 ef       	ldi	r31, 0xF4	; 244
     6f2:	8f 2e       	mov	r8, r31
     6f4:	99 24       	eor	r9, r9
     6f6:	93 94       	inc	r9
     6f8:	a1 2c       	mov	r10, r1
     6fa:	b1 2c       	mov	r11, r1
     6fc:	f0 2d       	mov	r31, r0
				if (frame == 0) doors_opening_closing = 1;
     6fe:	cc 23       	and	r28, r28
     700:	19 f0       	breq	.+6      	; 0x708 <start_screen+0x110>
     702:	03 c0       	rjmp	.+6      	; 0x70a <start_screen+0x112>
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
			if (doors_opening_closing) {
				interval_delay = 150;
				frame++;
				if (frame == 1) interval_delay = 2000;
				if (frame == 3) doors_opening_closing = 0;
     704:	d0 e0       	ldi	r29, 0x00	; 0
     706:	01 c0       	rjmp	.+2      	; 0x70a <start_screen+0x112>
			} else {
				interval_delay = 150;
				frame--;
				if (frame == 2) interval_delay = 500;
				if (frame == 0) doors_opening_closing = 1;
     708:	d1 e0       	ldi	r29, 0x01	; 1
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     70a:	0e 94 61 07 	call	0xec2	; 0xec2 <serial_input_available>
     70e:	88 23       	and	r24, r24
     710:	39 f0       	breq	.+14     	; 0x720 <start_screen+0x128>
			serial_input = fgetc(stdin);
     712:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__iob>
     716:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <__iob+0x1>
     71a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <fgetc>
     71e:	01 c0       	rjmp	.+2      	; 0x722 <start_screen+0x12a>
	
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     720:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     722:	83 37       	cpi	r24, 0x73	; 115
     724:	39 f0       	breq	.+14     	; 0x734 <start_screen+0x13c>
     726:	83 35       	cpi	r24, 0x53	; 83
     728:	29 f0       	breq	.+10     	; 0x734 <start_screen+0x13c>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     72a:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     72e:	8f 3f       	cpi	r24, 0xFF	; 255
     730:	09 f4       	brne	.+2      	; 0x734 <start_screen+0x13c>
     732:	a6 cf       	rjmp	.-180    	; 0x680 <start_screen+0x88>
			break;
		}
	}
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	bf 90       	pop	r11
     742:	af 90       	pop	r10
     744:	9f 90       	pop	r9
     746:	8f 90       	pop	r8
     748:	08 95       	ret

0000074a <draw_floors>:
/**
 * @brief Draws 4 lines of "FLOOR" coloured pixels
 * @arg none
 * @retval none
*/
void draw_floors(void) {
     74a:	cf 93       	push	r28
	for (uint8_t i = 0; i < WIDTH; i++) {
     74c:	c0 e0       	ldi	r28, 0x00	; 0
     74e:	15 c0       	rjmp	.+42     	; 0x77a <draw_floors+0x30>
		update_square_colour(i, FLOOR_0, FLOOR);
     750:	42 e0       	ldi	r20, 0x02	; 2
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	8c 2f       	mov	r24, r28
     756:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_1, FLOOR);
     75a:	42 e0       	ldi	r20, 0x02	; 2
     75c:	64 e0       	ldi	r22, 0x04	; 4
     75e:	8c 2f       	mov	r24, r28
     760:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_2, FLOOR);
     764:	42 e0       	ldi	r20, 0x02	; 2
     766:	68 e0       	ldi	r22, 0x08	; 8
     768:	8c 2f       	mov	r24, r28
     76a:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_3, FLOOR);
     76e:	42 e0       	ldi	r20, 0x02	; 2
     770:	6c e0       	ldi	r22, 0x0C	; 12
     772:	8c 2f       	mov	r24, r28
     774:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
 * @brief Draws 4 lines of "FLOOR" coloured pixels
 * @arg none
 * @retval none
*/
void draw_floors(void) {
	for (uint8_t i = 0; i < WIDTH; i++) {
     778:	cf 5f       	subi	r28, 0xFF	; 255
     77a:	c8 30       	cpi	r28, 0x08	; 8
     77c:	48 f3       	brcs	.-46     	; 0x750 <draw_floors+0x6>
		update_square_colour(i, FLOOR_0, FLOOR);
		update_square_colour(i, FLOOR_1, FLOOR);
		update_square_colour(i, FLOOR_2, FLOOR);
		update_square_colour(i, FLOOR_3, FLOOR);
	}
}
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <draw_traveller>:

void draw_traveller(void) {
	if (last_traveller_floor != UNDEF_FLOOR) {
     782:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <last_traveller_floor>
     786:	6f 3f       	cpi	r22, 0xFF	; 255
     788:	49 f0       	breq	.+18     	; 0x79c <draw_traveller+0x1a>
		int prev_row = last_traveller_floor + 1;
     78a:	06 2e       	mov	r0, r22
     78c:	00 0c       	add	r0, r0
     78e:	77 0b       	sbc	r23, r23
     790:	6f 5f       	subi	r22, 0xFF	; 255
     792:	7f 4f       	sbci	r23, 0xFF	; 255
		update_square_colour(TRAVELLER_COLUMN, prev_row, EMPTY_SQUARE);
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	84 e0       	ldi	r24, 0x04	; 4
     798:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
	}
	if (traveller_present) {
     79c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <traveller_present>
     7a0:	88 23       	and	r24, r24
     7a2:	f1 f0       	breq	.+60     	; 0x7e0 <draw_traveller+0x5e>
		int row = traveller_floor + 1;
     7a4:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <traveller_floor>
     7a8:	06 2e       	mov	r0, r22
     7aa:	00 0c       	add	r0, r0
     7ac:	77 0b       	sbc	r23, r23
     7ae:	6f 5f       	subi	r22, 0xFF	; 255
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
		uint8_t obj;
		switch (traveller_dest) {
     7b2:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <traveller_dest>
     7b6:	88 30       	cpi	r24, 0x08	; 8
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <draw_traveller+0x44>
     7ba:	8c 30       	cpi	r24, 0x0C	; 12
     7bc:	31 f0       	breq	.+12     	; 0x7ca <draw_traveller+0x48>
     7be:	84 30       	cpi	r24, 0x04	; 4
     7c0:	31 f0       	breq	.+12     	; 0x7ce <draw_traveller+0x4c>
			case FLOOR_0: obj = TRAVELLER_TO_0; break;
     7c2:	43 e0       	ldi	r20, 0x03	; 3
     7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <draw_traveller+0x4e>
			case FLOOR_1: obj = TRAVELLER_TO_1; break;
			case FLOOR_2: obj = TRAVELLER_TO_2; break;
     7c6:	45 e0       	ldi	r20, 0x05	; 5
     7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <draw_traveller+0x4e>
			case FLOOR_3: obj = TRAVELLER_TO_3; break;
     7ca:	46 e0       	ldi	r20, 0x06	; 6
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <draw_traveller+0x4e>
	if (traveller_present) {
		int row = traveller_floor + 1;
		uint8_t obj;
		switch (traveller_dest) {
			case FLOOR_0: obj = TRAVELLER_TO_0; break;
			case FLOOR_1: obj = TRAVELLER_TO_1; break;
     7ce:	44 e0       	ldi	r20, 0x04	; 4
			case FLOOR_2: obj = TRAVELLER_TO_2; break;
			case FLOOR_3: obj = TRAVELLER_TO_3; break;
			default:      obj = TRAVELLER_TO_0; break;
		}
		update_square_colour(TRAVELLER_COLUMN, row, obj);
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		last_traveller_floor = traveller_floor;
     7d6:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <traveller_floor>
     7da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <last_traveller_floor>
     7de:	08 95       	ret
		} else {
		last_traveller_floor = UNDEF_FLOOR;
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <last_traveller_floor>
     7e6:	08 95       	ret

000007e8 <draw_elevator>:
/**
 * @brief Draws the elevator at the current_position
 * @arg none
 * @retval none
*/
void draw_elevator(void) {
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
	static uint8_t old_position; // static variables maintain their value, every time the function is called
	
	int8_t y = 0; // Height position to draw elevator (i.e. y axis)
	
	// Clear where the elevator was
	if (old_position > current_position) { // Elevator going down - clear above
     7ec:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <old_position.2330>
     7f0:	26 2f       	mov	r18, r22
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <current_position>
     7f8:	08 2e       	mov	r0, r24
     7fa:	00 0c       	add	r0, r0
     7fc:	99 0b       	sbc	r25, r25
     7fe:	82 17       	cp	r24, r18
     800:	93 07       	cpc	r25, r19
     802:	1c f4       	brge	.+6      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		y = old_position + 3;
     804:	c3 e0       	ldi	r28, 0x03	; 3
     806:	c6 0f       	add	r28, r22
     808:	07 c0       	rjmp	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		} else if (old_position < current_position) { // Elevator going up - clear below
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	1c f4       	brge	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		y = old_position + 1;
     810:	c1 e0       	ldi	r28, 0x01	; 1
     812:	c6 0f       	add	r28, r22
     814:	01 c0       	rjmp	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
void draw_elevator(void) {
	
	// Store where it used to be with old_position
	static uint8_t old_position; // static variables maintain their value, every time the function is called
	
	int8_t y = 0; // Height position to draw elevator (i.e. y axis)
     816:	c0 e0       	ldi	r28, 0x00	; 0
	if (old_position > current_position) { // Elevator going down - clear above
		y = old_position + 3;
		} else if (old_position < current_position) { // Elevator going up - clear below
		y = old_position + 1;
	}
	if (y % 4 != 0) { // Do not draw over the floor's LEDs
     818:	8c 2f       	mov	r24, r28
     81a:	83 70       	andi	r24, 0x03	; 3
     81c:	51 f0       	breq	.+20     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		update_square_colour(1, y, EMPTY_SQUARE);
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	6c 2f       	mov	r22, r28
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(2, y, EMPTY_SQUARE);
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	6c 2f       	mov	r22, r28
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
	}
	old_position = current_position;
     832:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <current_position>
     836:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <old_position.2330>
	
	// Draw a 2x3 block representing the elevator
	for (uint8_t i = 1; i <= 3; i++) { // 3 is the height of the elevator sprite on the LED matrix
     83a:	c1 e0       	ldi	r28, 0x01	; 1
     83c:	11 c0       	rjmp	.+34     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		y = current_position + i; // Adds current floor position to i=1->3 to draw elevator as 3-high block
     83e:	d0 91 ca 01 	lds	r29, 0x01CA	; 0x8001ca <current_position>
     842:	dc 0f       	add	r29, r28
		if (y % 4 != 0) { // Do not draw on the floor
     844:	8d 2f       	mov	r24, r29
     846:	83 70       	andi	r24, 0x03	; 3
     848:	51 f0       	breq	.+20     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			update_square_colour(1, y, ELEVATOR);
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	6d 2f       	mov	r22, r29
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
			update_square_colour(2, y, ELEVATOR); // Elevator is 2 LEDs wide so draw twice
     854:	41 e0       	ldi	r20, 0x01	; 1
     856:	6d 2f       	mov	r22, r29
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(2, y, EMPTY_SQUARE);
	}
	old_position = current_position;
	
	// Draw a 2x3 block representing the elevator
	for (uint8_t i = 1; i <= 3; i++) { // 3 is the height of the elevator sprite on the LED matrix
     85e:	cf 5f       	subi	r28, 0xFF	; 255
     860:	c4 30       	cpi	r28, 0x04	; 4
     862:	68 f3       	brcs	.-38     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		if (y % 4 != 0) { // Do not draw on the floor
			update_square_colour(1, y, ELEVATOR);
			update_square_colour(2, y, ELEVATOR); // Elevator is 2 LEDs wide so draw twice
		}
	}
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <handle_inputs>:
/**
 * @brief Reads btn values and serial input and adds a traveller as appropriate
 * @arg none
 * @retval none
*/
void handle_inputs(void) {
     86a:	cf 93       	push	r28
		with the particular button that was pressed.
	
	*/
	
	// We need to check if any button has been pushed
	uint8_t btn = button_pushed();
     86c:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
     870:	c8 2f       	mov	r28, r24
	char serial_input = -1;
	if (serial_input_available()) {
     872:	0e 94 61 07 	call	0xec2	; 0xec2 <serial_input_available>
     876:	88 23       	and	r24, r24
     878:	39 f0       	breq	.+14     	; 0x888 <handle_inputs+0x1e>
		serial_input = fgetc(stdin);}
     87a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__iob>
     87e:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <__iob+0x1>
     882:	0e 94 f6 08 	call	0x11ec	; 0x11ec <fgetc>
     886:	01 c0       	rjmp	.+2      	; 0x88a <handle_inputs+0x20>
	
	*/
	
	// We need to check if any button has been pushed
	uint8_t btn = button_pushed();
	char serial_input = -1;
     888:	8f ef       	ldi	r24, 0xFF	; 255
	if (serial_input_available()) {
		serial_input = fgetc(stdin);}
		
	if (traveller_present || (current_floor != destination)) {
     88a:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <traveller_present>
     88e:	91 11       	cpse	r25, r1
     890:	7f c0       	rjmp	.+254    	; 0x990 <__stack+0x91>
     892:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <current_floor>
     896:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <destination>
     89a:	29 13       	cpse	r18, r25
     89c:	79 c0       	rjmp	.+242    	; 0x990 <__stack+0x91>
		return;
	}
	
	
	uint8_t switch_bits = (PIND >> 5) & 0b11 ;
     89e:	99 b1       	in	r25, 0x09	; 9
     8a0:	92 95       	swap	r25
     8a2:	96 95       	lsr	r25
     8a4:	97 70       	andi	r25, 0x07	; 7
     8a6:	93 70       	andi	r25, 0x03	; 3
	ElevatorFloor dest = UNDEF_FLOOR;
	switch (switch_bits) {
     8a8:	91 30       	cpi	r25, 0x01	; 1
     8aa:	39 f0       	breq	.+14     	; 0x8ba <handle_inputs+0x50>
     8ac:	60 f0       	brcs	.+24     	; 0x8c6 <handle_inputs+0x5c>
     8ae:	92 30       	cpi	r25, 0x02	; 2
     8b0:	31 f0       	breq	.+12     	; 0x8be <handle_inputs+0x54>
     8b2:	93 30       	cpi	r25, 0x03	; 3
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <handle_inputs+0x58>
		return;
	}
	
	
	uint8_t switch_bits = (PIND >> 5) & 0b11 ;
	ElevatorFloor dest = UNDEF_FLOOR;
     8b6:	9f ef       	ldi	r25, 0xFF	; 255
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <handle_inputs+0x5e>
	switch (switch_bits) {
		case 0: dest = FLOOR_0; break;
		case 1: dest = FLOOR_1; break;
     8ba:	94 e0       	ldi	r25, 0x04	; 4
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <handle_inputs+0x5e>
		case 2: dest = FLOOR_2; break;
     8be:	98 e0       	ldi	r25, 0x08	; 8
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <handle_inputs+0x5e>
		case 3: dest = FLOOR_3; break;
     8c2:	9c e0       	ldi	r25, 0x0C	; 12
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <handle_inputs+0x5e>
	
	
	uint8_t switch_bits = (PIND >> 5) & 0b11 ;
	ElevatorFloor dest = UNDEF_FLOOR;
	switch (switch_bits) {
		case 0: dest = FLOOR_0; break;
     8c6:	90 e0       	ldi	r25, 0x00	; 0
		case 1: dest = FLOOR_1; break;
		case 2: dest = FLOOR_2; break;
		case 3: dest = FLOOR_3; break;
	}
	
	if (btn == BUTTON0_PUSHED || serial_input == '0') {
     8c8:	cc 23       	and	r28, r28
     8ca:	11 f0       	breq	.+4      	; 0x8d0 <handle_inputs+0x66>
     8cc:	80 33       	cpi	r24, 0x30	; 48
     8ce:	a9 f4       	brne	.+42     	; 0x8fa <handle_inputs+0x90>
		if (dest == FLOOR_0) return;            
     8d0:	99 23       	and	r25, r25
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <handle_inputs+0x6c>
     8d4:	5d c0       	rjmp	.+186    	; 0x990 <__stack+0x91>
		traveller_dest = dest;
     8d6:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <traveller_dest>
		traveller_floor = FLOOR_0;
     8da:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <traveller_floor>
		traveller_present= true;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <traveller_present>
		destination = FLOOR_0;      
     8e4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <destination>
		draw_traveller();
     8e8:	0e 94 c1 03 	call	0x782	; 0x782 <draw_traveller>
		beep(3000, 50);
     8ec:	62 e3       	ldi	r22, 0x32	; 50
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	88 eb       	ldi	r24, 0xB8	; 184
     8f2:	9b e0       	ldi	r25, 0x0B	; 11
     8f4:	0e 94 cf 01 	call	0x39e	; 0x39e <beep>
     8f8:	4b c0       	rjmp	.+150    	; 0x990 <__stack+0x91>
	}
	else if (btn == BUTTON1_PUSHED || serial_input == '1') {
     8fa:	c1 30       	cpi	r28, 0x01	; 1
     8fc:	11 f0       	breq	.+4      	; 0x902 <__stack+0x3>
     8fe:	81 33       	cpi	r24, 0x31	; 49
     900:	b1 f4       	brne	.+44     	; 0x92e <__stack+0x2f>
		if (dest == FLOOR_1) return;
     902:	94 30       	cpi	r25, 0x04	; 4
     904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
     906:	44 c0       	rjmp	.+136    	; 0x990 <__stack+0x91>
		traveller_dest = dest;
     908:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <traveller_dest>
		traveller_floor = FLOOR_1;
     90c:	84 e0       	ldi	r24, 0x04	; 4
     90e:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <traveller_floor>
		traveller_present= true;
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <traveller_present>
		destination = FLOOR_1;
     918:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <destination>
		draw_traveller();
     91c:	0e 94 c1 03 	call	0x782	; 0x782 <draw_traveller>
		beep(3000, 50);
     920:	62 e3       	ldi	r22, 0x32	; 50
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	88 eb       	ldi	r24, 0xB8	; 184
     926:	9b e0       	ldi	r25, 0x0B	; 11
     928:	0e 94 cf 01 	call	0x39e	; 0x39e <beep>
     92c:	31 c0       	rjmp	.+98     	; 0x990 <__stack+0x91>
	}
	else if (btn == BUTTON2_PUSHED || serial_input == '2') {
     92e:	c2 30       	cpi	r28, 0x02	; 2
     930:	11 f0       	breq	.+4      	; 0x936 <__stack+0x37>
     932:	82 33       	cpi	r24, 0x32	; 50
     934:	a9 f4       	brne	.+42     	; 0x960 <__stack+0x61>
		if (dest == FLOOR_2) return;
     936:	98 30       	cpi	r25, 0x08	; 8
     938:	59 f1       	breq	.+86     	; 0x990 <__stack+0x91>
		traveller_dest = dest;
     93a:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <traveller_dest>
		traveller_floor = FLOOR_2;
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <traveller_floor>
		traveller_present = true;
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <traveller_present>
		destination = FLOOR_2;
     94a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <destination>
		draw_traveller();
     94e:	0e 94 c1 03 	call	0x782	; 0x782 <draw_traveller>
		beep(3000, 50);
     952:	62 e3       	ldi	r22, 0x32	; 50
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	88 eb       	ldi	r24, 0xB8	; 184
     958:	9b e0       	ldi	r25, 0x0B	; 11
     95a:	0e 94 cf 01 	call	0x39e	; 0x39e <beep>
     95e:	18 c0       	rjmp	.+48     	; 0x990 <__stack+0x91>
	}
	else if (btn == BUTTON3_PUSHED || serial_input == '3') {
     960:	c3 30       	cpi	r28, 0x03	; 3
     962:	11 f0       	breq	.+4      	; 0x968 <__stack+0x69>
     964:	83 33       	cpi	r24, 0x33	; 51
     966:	a1 f4       	brne	.+40     	; 0x990 <__stack+0x91>
		if (dest == FLOOR_3) return;
     968:	9c 30       	cpi	r25, 0x0C	; 12
     96a:	91 f0       	breq	.+36     	; 0x990 <__stack+0x91>
		traveller_dest = dest;
     96c:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <traveller_dest>
		traveller_floor = FLOOR_3;
     970:	8c e0       	ldi	r24, 0x0C	; 12
     972:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <traveller_floor>
		traveller_present = true;
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <traveller_present>
		destination = FLOOR_3;
     97c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <destination>
		draw_traveller();
     980:	0e 94 c1 03 	call	0x782	; 0x782 <draw_traveller>
		beep(3000, 50);
     984:	62 e3       	ldi	r22, 0x32	; 50
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	88 eb       	ldi	r24, 0xB8	; 184
     98a:	9b e0       	ldi	r25, 0x0B	; 11
     98c:	0e 94 cf 01 	call	0x39e	; 0x39e <beep>
	}
}
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <get_speed>:

uint16_t get_speed(void) {
	if (PIND & (1 << 4)) {
     994:	4c 9b       	sbis	0x09, 4	; 9
     996:	03 c0       	rjmp	.+6      	; 0x99e <get_speed+0xa>
		return 250;
     998:	8a ef       	ldi	r24, 0xFA	; 250
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	08 95       	ret
		} else {
		return 100;
     99e:	84 e6       	ldi	r24, 0x64	; 100
     9a0:	90 e0       	ldi	r25, 0x00	; 0
	}
     9a2:	08 95       	ret

000009a4 <start_elevator_emulator>:
 * @retval none
*/
void start_elevator_emulator(void) {
	
	// Clear the serial terminal
	clear_terminal();
     9a4:	0e 94 45 08 	call	0x108a	; 0x108a <clear_terminal>
	
	// Initialise Display
	initialise_display();
     9a8:	0e 94 0b 01 	call	0x216	; 0x216 <initialise_display>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     9ac:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
	clear_serial_input_buffer();
     9b0:	0e 94 68 07 	call	0xed0	; 0xed0 <clear_serial_input_buffer>

	time_since_move = get_current_time();
     9b4:	0e 94 66 08 	call	0x10cc	; 0x10cc <get_current_time>
     9b8:	60 93 c1 01 	sts	0x01C1, r22	; 0x8001c1 <time_since_move>
     9bc:	70 93 c2 01 	sts	0x01C2, r23	; 0x8001c2 <time_since_move+0x1>
     9c0:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <time_since_move+0x2>
     9c4:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <time_since_move+0x3>
	
	current_position = FLOOR_0;
     9c8:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <current_position>
	destination      = FLOOR_0;
     9cc:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <destination>
	current_floor    = FLOOR_0;
     9d0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <current_floor>
	direction        = "Stationary";
     9d4:	84 e3       	ldi	r24, 0x34	; 52
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <direction+0x1>
     9dc:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <direction>
	moved            = true;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <moved>
	traveller_dest = UNDEF_FLOOR;
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <traveller_dest>
	last_traveller_floor = UNDEF_FLOOR;
     9ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <last_traveller_floor>

	
	
	// Draw the floors and elevator
	draw_elevator();
     9f0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <draw_elevator>
	draw_floors();
     9f4:	0e 94 a5 03 	call	0x74a	; 0x74a <draw_floors>
	
	current_position = FLOOR_0;
     9f8:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <current_position>
	destination = FLOOR_0;
     9fc:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <destination>
	
	while(true) {
        multiplex_ssd();
     a00:	0e 94 32 02 	call	0x464	; 0x464 <multiplex_ssd>
		service_led_animation();
     a04:	0e 94 97 02 	call	0x52e	; 0x52e <service_led_animation>


		speed = get_speed(); 
     a08:	0e 94 ca 04 	call	0x994	; 0x994 <get_speed>
     a0c:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <speed+0x1>
     a10:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <speed>
		
		// Only update the elevator every 200 ms
		if (get_current_time() - time_since_move > speed) {	
     a14:	0e 94 66 08 	call	0x10cc	; 0x10cc <get_current_time>
     a18:	00 91 c1 01 	lds	r16, 0x01C1	; 0x8001c1 <time_since_move>
     a1c:	10 91 c2 01 	lds	r17, 0x01C2	; 0x8001c2 <time_since_move+0x1>
     a20:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <time_since_move+0x2>
     a24:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <time_since_move+0x3>
     a28:	ab 01       	movw	r20, r22
     a2a:	bc 01       	movw	r22, r24
     a2c:	40 1b       	sub	r20, r16
     a2e:	51 0b       	sbc	r21, r17
     a30:	62 0b       	sbc	r22, r18
     a32:	73 0b       	sbc	r23, r19
     a34:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <speed>
     a38:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <speed+0x1>
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	84 17       	cp	r24, r20
     a42:	95 07       	cpc	r25, r21
     a44:	a6 07       	cpc	r26, r22
     a46:	b7 07       	cpc	r27, r23
     a48:	08 f0       	brcs	.+2      	; 0xa4c <start_elevator_emulator+0xa8>
     a4a:	d8 c0       	rjmp	.+432    	; 0xbfc <start_elevator_emulator+0x258>
			uint8_t next_seg = SEG_G;


			if (destination > current_position) { // Move up
     a4c:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <destination>
     a50:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <current_position>
     a54:	89 17       	cp	r24, r25
     a56:	0c f0       	brlt	.+2      	; 0xa5a <start_elevator_emulator+0xb6>
     a58:	40 c0       	rjmp	.+128    	; 0xada <start_elevator_emulator+0x136>
				current_position++;
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <current_position>
				moved     = true;
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <moved>
				direction = "Up";
     a66:	2f e3       	ldi	r18, 0x3F	; 63
     a68:	31 e0       	ldi	r19, 0x01	; 1
     a6a:	30 93 c9 01 	sts	0x01C9, r19	; 0x8001c9 <direction+0x1>
     a6e:	20 93 c8 01 	sts	0x01C8, r18	; 0x8001c8 <direction>
				next_seg  = SEG_A;
				if (current_position % 4 == 0) {
     a72:	98 2f       	mov	r25, r24
     a74:	93 70       	andi	r25, 0x03	; 3
     a76:	09 f0       	breq	.+2      	; 0xa7a <start_elevator_emulator+0xd6>
     a78:	72 c0       	rjmp	.+228    	; 0xb5e <start_elevator_emulator+0x1ba>
					current_floor = current_position;
     a7a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <current_floor>
					if (traveller_onboard) {
     a7e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <traveller_onboard>
     a82:	88 23       	and	r24, r24
     a84:	a9 f0       	breq	.+42     	; 0xab0 <start_elevator_emulator+0x10c>
						floors_with_traveller++;
     a86:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <floors_with_traveller>
     a8a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <floors_with_traveller+0x1>
     a8e:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <floors_with_traveller+0x2>
     a92:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <floors_with_traveller+0x3>
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	a1 1d       	adc	r26, r1
     a9a:	b1 1d       	adc	r27, r1
     a9c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <floors_with_traveller>
     aa0:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <floors_with_traveller+0x1>
     aa4:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <floors_with_traveller+0x2>
     aa8:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <floors_with_traveller+0x3>

			if (destination > current_position) { // Move up
				current_position++;
				moved     = true;
				direction = "Up";
				next_seg  = SEG_A;
     aac:	c1 e0       	ldi	r28, 0x01	; 1
     aae:	5c c0       	rjmp	.+184    	; 0xb68 <start_elevator_emulator+0x1c4>
				if (current_position % 4 == 0) {
					current_floor = current_position;
					if (traveller_onboard) {
						floors_with_traveller++;
						} else {
						floors_without_traveller++;
     ab0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <floors_without_traveller>
     ab4:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <floors_without_traveller+0x1>
     ab8:	a0 91 b3 01 	lds	r26, 0x01B3	; 0x8001b3 <floors_without_traveller+0x2>
     abc:	b0 91 b4 01 	lds	r27, 0x01B4	; 0x8001b4 <floors_without_traveller+0x3>
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	a1 1d       	adc	r26, r1
     ac4:	b1 1d       	adc	r27, r1
     ac6:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <floors_without_traveller>
     aca:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <floors_without_traveller+0x1>
     ace:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <floors_without_traveller+0x2>
     ad2:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <floors_without_traveller+0x3>

			if (destination > current_position) { // Move up
				current_position++;
				moved     = true;
				direction = "Up";
				next_seg  = SEG_A;
     ad6:	c1 e0       	ldi	r28, 0x01	; 1
     ad8:	47 c0       	rjmp	.+142    	; 0xb68 <start_elevator_emulator+0x1c4>
						} else {
						floors_without_traveller++;
					}
				}
			}
			else if (destination < current_position) { // Move down
     ada:	98 17       	cp	r25, r24
     adc:	0c f0       	brlt	.+2      	; 0xae0 <start_elevator_emulator+0x13c>
     ade:	41 c0       	rjmp	.+130    	; 0xb62 <start_elevator_emulator+0x1be>
				current_position--;
     ae0:	81 50       	subi	r24, 0x01	; 1
     ae2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <current_position>
				moved     = true;
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <moved>
				direction = "Down";
     aec:	22 e4       	ldi	r18, 0x42	; 66
     aee:	31 e0       	ldi	r19, 0x01	; 1
     af0:	30 93 c9 01 	sts	0x01C9, r19	; 0x8001c9 <direction+0x1>
     af4:	20 93 c8 01 	sts	0x01C8, r18	; 0x8001c8 <direction>
				next_seg  = SEG_D;
				if (current_position % 4 == 0) {
     af8:	98 2f       	mov	r25, r24
     afa:	93 70       	andi	r25, 0x03	; 3
     afc:	a1 f5       	brne	.+104    	; 0xb66 <start_elevator_emulator+0x1c2>
					current_floor = current_position;
     afe:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <current_floor>
					if (traveller_onboard) {
     b02:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <traveller_onboard>
     b06:	88 23       	and	r24, r24
     b08:	a9 f0       	breq	.+42     	; 0xb34 <start_elevator_emulator+0x190>
						floors_with_traveller++;
     b0a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <floors_with_traveller>
     b0e:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <floors_with_traveller+0x1>
     b12:	a0 91 b7 01 	lds	r26, 0x01B7	; 0x8001b7 <floors_with_traveller+0x2>
     b16:	b0 91 b8 01 	lds	r27, 0x01B8	; 0x8001b8 <floors_with_traveller+0x3>
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	a1 1d       	adc	r26, r1
     b1e:	b1 1d       	adc	r27, r1
     b20:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <floors_with_traveller>
     b24:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <floors_with_traveller+0x1>
     b28:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <floors_with_traveller+0x2>
     b2c:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <floors_with_traveller+0x3>
			}
			else if (destination < current_position) { // Move down
				current_position--;
				moved     = true;
				direction = "Down";
				next_seg  = SEG_D;
     b30:	c8 e0       	ldi	r28, 0x08	; 8
     b32:	1a c0       	rjmp	.+52     	; 0xb68 <start_elevator_emulator+0x1c4>
				if (current_position % 4 == 0) {
					current_floor = current_position;
					if (traveller_onboard) {
						floors_with_traveller++;
						} else {
						floors_without_traveller++;
     b34:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <floors_without_traveller>
     b38:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <floors_without_traveller+0x1>
     b3c:	a0 91 b3 01 	lds	r26, 0x01B3	; 0x8001b3 <floors_without_traveller+0x2>
     b40:	b0 91 b4 01 	lds	r27, 0x01B4	; 0x8001b4 <floors_without_traveller+0x3>
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	a1 1d       	adc	r26, r1
     b48:	b1 1d       	adc	r27, r1
     b4a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <floors_without_traveller>
     b4e:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <floors_without_traveller+0x1>
     b52:	a0 93 b3 01 	sts	0x01B3, r26	; 0x8001b3 <floors_without_traveller+0x2>
     b56:	b0 93 b4 01 	sts	0x01B4, r27	; 0x8001b4 <floors_without_traveller+0x3>
			}
			else if (destination < current_position) { // Move down
				current_position--;
				moved     = true;
				direction = "Down";
				next_seg  = SEG_D;
     b5a:	c8 e0       	ldi	r28, 0x08	; 8
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <start_elevator_emulator+0x1c4>

			if (destination > current_position) { // Move up
				current_position++;
				moved     = true;
				direction = "Up";
				next_seg  = SEG_A;
     b5e:	c1 e0       	ldi	r28, 0x01	; 1
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <start_elevator_emulator+0x1c4>

		speed = get_speed(); 
		
		// Only update the elevator every 200 ms
		if (get_current_time() - time_since_move > speed) {	
			uint8_t next_seg = SEG_G;
     b62:	c0 e4       	ldi	r28, 0x40	; 64
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <start_elevator_emulator+0x1c4>
			}
			else if (destination < current_position) { // Move down
				current_position--;
				moved     = true;
				direction = "Down";
				next_seg  = SEG_D;
     b66:	c8 e0       	ldi	r28, 0x08	; 8
						floors_without_traveller++;
					}
				}
			}
			
			if (traveller_present && current_position == traveller_floor) {
     b68:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <traveller_present>
     b6c:	88 23       	and	r24, r24
     b6e:	e1 f0       	breq	.+56     	; 0xba8 <start_elevator_emulator+0x204>
     b70:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <current_position>
     b74:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <traveller_floor>
     b78:	98 13       	cpse	r25, r24
     b7a:	16 c0       	rjmp	.+44     	; 0xba8 <start_elevator_emulator+0x204>
				traveller_present = false;
     b7c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <traveller_present>
				traveller_onboard = true;  
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <traveller_onboard>
				destination = traveller_dest;
     b86:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <traveller_dest>
     b8a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <destination>
				traveller_dest = UNDEF_FLOOR;
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <traveller_dest>
				draw_traveller();
     b94:	0e 94 c1 03 	call	0x782	; 0x782 <draw_traveller>
				beep(500, 100);
     b98:	64 e6       	ldi	r22, 0x64	; 100
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	84 ef       	ldi	r24, 0xF4	; 244
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 cf 01 	call	0x39e	; 0x39e <beep>
				
				start_led_animation(); 
     ba4:	0e 94 89 02 	call	0x512	; 0x512 <start_led_animation>

			}
			
			if (traveller_onboard && current_position == destination) {
     ba8:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <traveller_onboard>
     bac:	88 23       	and	r24, r24
     bae:	81 f0       	breq	.+32     	; 0xbd0 <start_elevator_emulator+0x22c>
     bb0:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <current_position>
     bb4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <destination>
     bb8:	98 13       	cpse	r25, r24
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <start_elevator_emulator+0x22c>
				traveller_onboard = false;
     bbc:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <traveller_onboard>
				beep(500, 100);
     bc0:	64 e6       	ldi	r22, 0x64	; 100
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	84 ef       	ldi	r24, 0xF4	; 244
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 cf 01 	call	0x39e	; 0x39e <beep>
				
				start_led_animation();
     bcc:	0e 94 89 02 	call	0x512	; 0x512 <start_led_animation>

			}

			
			if (next_seg != last_direction) {
     bd0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bd4:	c8 17       	cp	r28, r24
     bd6:	31 f0       	breq	.+12     	; 0xbe4 <start_elevator_emulator+0x240>
				last_direction = next_seg;
     bd8:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
				// update left digit
				PORTA = (PORTA & ~SEG_MASK) | last_direction;
     bdc:	82 b1       	in	r24, 0x02	; 2
     bde:	80 78       	andi	r24, 0x80	; 128
     be0:	c8 2b       	or	r28, r24
     be2:	c2 b9       	out	0x02, r28	; 2
			}
			
			draw_elevator();
     be4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <draw_elevator>
			
			time_since_move = get_current_time(); // Reset delay until next movement update
     be8:	0e 94 66 08 	call	0x10cc	; 0x10cc <get_current_time>
     bec:	60 93 c1 01 	sts	0x01C1, r22	; 0x8001c1 <time_since_move>
     bf0:	70 93 c2 01 	sts	0x01C2, r23	; 0x8001c2 <time_since_move+0x1>
     bf4:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <time_since_move+0x2>
     bf8:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <time_since_move+0x3>
		}
		if (moved) {
     bfc:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <moved>
     c00:	88 23       	and	r24, r24
     c02:	09 f4       	brne	.+2      	; 0xc06 <start_elevator_emulator+0x262>
     c04:	64 c0       	rjmp	.+200    	; 0xcce <start_elevator_emulator+0x32a>
			clear_terminal();
     c06:	0e 94 45 08 	call	0x108a	; 0x108a <clear_terminal>
			uint8_t floor_num = current_floor / 4;
     c0a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <current_floor>
     c0e:	88 23       	and	r24, r24
     c10:	0c f4       	brge	.+2      	; 0xc14 <start_elevator_emulator+0x270>
     c12:	8d 5f       	subi	r24, 0xFD	; 253
     c14:	c8 2f       	mov	r28, r24
     c16:	c5 95       	asr	r28
     c18:	c5 95       	asr	r28

			move_terminal_cursor(10,10);
     c1a:	6a e0       	ldi	r22, 0x0A	; 10
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	8a e0       	ldi	r24, 0x0A	; 10
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 34 08 	call	0x1068	; 0x1068 <move_terminal_cursor>
			printf("Current Level: %d", floor_num);
     c26:	1f 92       	push	r1
     c28:	cf 93       	push	r28
     c2a:	87 e4       	ldi	r24, 0x47	; 71
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	9f 93       	push	r25
     c30:	8f 93       	push	r24
     c32:	0e 94 34 09 	call	0x1268	; 0x1268 <printf>

			move_terminal_cursor(10,12);
     c36:	6c e0       	ldi	r22, 0x0C	; 12
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	8a e0       	ldi	r24, 0x0A	; 10
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 34 08 	call	0x1068	; 0x1068 <move_terminal_cursor>
			printf("Direction: %s", direction);
     c42:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <direction+0x1>
     c46:	8f 93       	push	r24
     c48:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <direction>
     c4c:	8f 93       	push	r24
     c4e:	89 e5       	ldi	r24, 0x59	; 89
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	0e 94 34 09 	call	0x1268	; 0x1268 <printf>

			move_terminal_cursor(10,14);
     c5a:	6e e0       	ldi	r22, 0x0E	; 14
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	8a e0       	ldi	r24, 0x0A	; 10
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 34 08 	call	0x1068	; 0x1068 <move_terminal_cursor>
			printf("Floors with traveller: %lu", floors_with_traveller);
     c66:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <floors_with_traveller+0x3>
     c6a:	8f 93       	push	r24
     c6c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <floors_with_traveller+0x2>
     c70:	8f 93       	push	r24
     c72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <floors_with_traveller+0x1>
     c76:	8f 93       	push	r24
     c78:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <floors_with_traveller>
     c7c:	8f 93       	push	r24
     c7e:	87 e6       	ldi	r24, 0x67	; 103
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	9f 93       	push	r25
     c84:	8f 93       	push	r24
     c86:	0e 94 34 09 	call	0x1268	; 0x1268 <printf>

			move_terminal_cursor(10,16);
     c8a:	60 e1       	ldi	r22, 0x10	; 16
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	8a e0       	ldi	r24, 0x0A	; 10
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 34 08 	call	0x1068	; 0x1068 <move_terminal_cursor>
			printf("Floors without traveller: %lu", floors_without_traveller);
     c96:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <floors_without_traveller+0x3>
     c9a:	8f 93       	push	r24
     c9c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <floors_without_traveller+0x2>
     ca0:	8f 93       	push	r24
     ca2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <floors_without_traveller+0x1>
     ca6:	8f 93       	push	r24
     ca8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <floors_without_traveller>
     cac:	8f 93       	push	r24
     cae:	82 e8       	ldi	r24, 0x82	; 130
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	0e 94 34 09 	call	0x1268	; 0x1268 <printf>

			moved = false;
     cba:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moved>
     cbe:	8d b7       	in	r24, 0x3d	; 61
     cc0:	9e b7       	in	r25, 0x3e	; 62
     cc2:	44 96       	adiw	r24, 0x14	; 20
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	9e bf       	out	0x3e, r25	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	8d bf       	out	0x3d, r24	; 61
		}
	
		handle_inputs();
     cce:	0e 94 35 04 	call	0x86a	; 0x86a <handle_inputs>
	}
     cd2:	96 ce       	rjmp	.-724    	; 0xa00 <start_elevator_emulator+0x5c>

00000cd4 <main>:
/* Main */

int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     cd4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <initialise_hardware>
	
	// Show the splash screen message. Returns when display is complete
	start_screen();
     cd8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <start_screen>
	
	// Start elevator controller software
	start_elevator_emulator();
     cdc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <start_elevator_emulator>

00000ce0 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     ce0:	80 e8       	ldi	r24, 0x80	; 128
     ce2:	0e 94 02 08 	call	0x1004	; 0x1004 <spi_setup_master>
     ce6:	08 95       	ret

00000ce8 <ledmatrix_update_pixel>:
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	80 31       	cpi	r24, 0x10	; 16
     cf0:	b0 f4       	brcc	.+44     	; 0xd1e <ledmatrix_update_pixel+0x36>
     cf2:	68 30       	cpi	r22, 0x08	; 8
     cf4:	a0 f4       	brcc	.+40     	; 0xd1e <ledmatrix_update_pixel+0x36>
     cf6:	14 2f       	mov	r17, r20
     cf8:	c6 2f       	mov	r28, r22
     cfa:	d8 2f       	mov	r29, r24
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	0e 94 2e 08 	call	0x105c	; 0x105c <spi_send_byte>
     d02:	6c 2f       	mov	r22, r28
     d04:	67 70       	andi	r22, 0x07	; 7
     d06:	80 e1       	ldi	r24, 0x10	; 16
     d08:	68 9f       	mul	r22, r24
     d0a:	90 01       	movw	r18, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	8d 2f       	mov	r24, r29
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	82 2b       	or	r24, r18
     d14:	0e 94 2e 08 	call	0x105c	; 0x105c <spi_send_byte>
     d18:	81 2f       	mov	r24, r17
     d1a:	0e 94 2e 08 	call	0x105c	; 0x105c <spi_send_byte>
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	08 95       	ret

00000d26 <ledmatrix_update_column>:
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	80 31       	cpi	r24, 0x10	; 16
     d2e:	a0 f4       	brcc	.+40     	; 0xd58 <ledmatrix_update_column+0x32>
     d30:	8b 01       	movw	r16, r22
     d32:	c8 2f       	mov	r28, r24
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	0e 94 2e 08 	call	0x105c	; 0x105c <spi_send_byte>
     d3a:	8c 2f       	mov	r24, r28
     d3c:	8f 70       	andi	r24, 0x0F	; 15
     d3e:	0e 94 2e 08 	call	0x105c	; 0x105c <spi_send_byte>
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	07 c0       	rjmp	.+14     	; 0xd54 <ledmatrix_update_column+0x2e>
     d46:	f8 01       	movw	r30, r16
     d48:	ec 0f       	add	r30, r28
     d4a:	f1 1d       	adc	r31, r1
     d4c:	80 81       	ld	r24, Z
     d4e:	0e 94 2e 08 	call	0x105c	; 0x105c <spi_send_byte>
     d52:	cf 5f       	subi	r28, 0xFF	; 255
     d54:	c8 30       	cpi	r28, 0x08	; 8
     d56:	b8 f3       	brcs	.-18     	; 0xd46 <ledmatrix_update_column+0x20>
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     d60:	8f e0       	ldi	r24, 0x0F	; 15
     d62:	0e 94 2e 08 	call	0x105c	; 0x105c <spi_send_byte>
     d66:	08 95       	ret

00000d68 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     d68:	cf 93       	push	r28
     d6a:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     d6c:	8a 30       	cpi	r24, 0x0A	; 10
     d6e:	19 f4       	brne	.+6      	; 0xd76 <uart_put_char+0xe>
		uart_put_char('\r', stream);
     d70:	8d e0       	ldi	r24, 0x0D	; 13
     d72:	0e 94 b4 06 	call	0xd68	; 0xd68 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     d76:	9f b7       	in	r25, 0x3f	; 63
     d78:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     d7c:	99 23       	and	r25, r25
     d7e:	29 f1       	breq	.+74     	; 0xdca <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     d80:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <bytes_in_out_buffer>
     d84:	8f 3f       	cpi	r24, 0xFF	; 255
     d86:	d1 f3       	breq	.-12     	; 0xd7c <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     d88:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     d8a:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <out_insert_pos>
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	8e 0f       	add	r24, r30
     d92:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <out_insert_pos>
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	e0 53       	subi	r30, 0x30	; 48
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     d9e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <bytes_in_out_buffer>
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     da8:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <out_insert_pos>
     dac:	8f 3f       	cpi	r24, 0xFF	; 255
     dae:	11 f4       	brne	.+4      	; 0xdb4 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     db0:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     db4:	e1 ec       	ldi	r30, 0xC1	; 193
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 62       	ori	r24, 0x20	; 32
     dbc:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     dbe:	99 23       	and	r25, r25
     dc0:	39 f0       	breq	.+14     	; 0xdd0 <uart_put_char+0x68>
		sei();
     dc2:	78 94       	sei
	}
	return 0;
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	05 c0       	rjmp	.+10     	; 0xdd4 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
}
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     dd8:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <bytes_in_input_buffer>
     ddc:	88 23       	and	r24, r24
     dde:	e1 f3       	breq	.-8      	; 0xdd8 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     de0:	2f b7       	in	r18, 0x3f	; 63
     de2:	20 78       	andi	r18, 0x80	; 128
	cli();
     de4:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     de6:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <input_insert_pos>
     dea:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <bytes_in_input_buffer>
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	83 1b       	sub	r24, r19
     df2:	91 09       	sbc	r25, r1
     df4:	5a f4       	brpl	.+22     	; 0xe0c <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     df6:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <input_insert_pos>
     dfa:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <bytes_in_input_buffer>
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	e8 1b       	sub	r30, r24
     e02:	f1 09       	sbc	r31, r1
     e04:	e0 52       	subi	r30, 0x20	; 32
     e06:	fd 4f       	sbci	r31, 0xFD	; 253
     e08:	80 81       	ld	r24, Z
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     e0c:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <input_insert_pos>
     e10:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <bytes_in_input_buffer>
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	e8 1b       	sub	r30, r24
     e18:	f1 09       	sbc	r31, r1
     e1a:	e0 53       	subi	r30, 0x30	; 48
     e1c:	fd 4f       	sbci	r31, 0xFD	; 253
     e1e:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     e20:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <bytes_in_input_buffer>
     e24:	91 50       	subi	r25, 0x01	; 1
     e26:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <bytes_in_input_buffer>
	if(interrupts_enabled) {
     e2a:	22 23       	and	r18, r18
     e2c:	09 f0       	breq	.+2      	; 0xe30 <uart_get_char+0x58>
		sei();
     e2e:	78 94       	sei
	}	
	return c;
}
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	08 95       	ret

00000e34 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     e34:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <out_insert_pos>
	bytes_in_out_buffer = 0;
     e38:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <bytes_in_out_buffer>
	input_insert_pos = 0;
     e3c:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <input_insert_pos>
	bytes_in_input_buffer = 0;
     e40:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <bytes_in_input_buffer>
	input_overrun = 0;
     e44:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     e48:	40 93 bc 01 	sts	0x01BC, r20	; 0x8001bc <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	aa 1f       	adc	r26, r26
     e56:	bb 1f       	adc	r27, r27
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	aa 1f       	adc	r26, r26
     e5e:	bb 1f       	adc	r27, r27
     e60:	9c 01       	movw	r18, r24
     e62:	ad 01       	movw	r20, r26
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	44 1f       	adc	r20, r20
     e6a:	55 1f       	adc	r21, r21
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	72 e1       	ldi	r23, 0x12	; 18
     e70:	8a e7       	ldi	r24, 0x7A	; 122
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 bd 08 	call	0x117a	; 0x117a <__divmodsi4>
     e78:	ba 01       	movw	r22, r20
     e7a:	a9 01       	movw	r20, r18
     e7c:	4f 5f       	subi	r20, 0xFF	; 255
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	6f 4f       	sbci	r22, 0xFF	; 255
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	db 01       	movw	r26, r22
     e86:	ca 01       	movw	r24, r20
     e88:	1a f4       	brpl	.+6      	; 0xe90 <init_serial_stdio+0x5c>
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	a1 1d       	adc	r26, r1
     e8e:	b1 1d       	adc	r27, r1
     e90:	b5 95       	asr	r27
     e92:	a7 95       	ror	r26
     e94:	97 95       	ror	r25
     e96:	87 95       	ror	r24
     e98:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     e9a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     e9e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     ea2:	e1 ec       	ldi	r30, 0xC1	; 193
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	88 e1       	ldi	r24, 0x18	; 24
     ea8:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     eaa:	80 81       	ld	r24, Z
     eac:	80 68       	ori	r24, 0x80	; 128
     eae:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     eb0:	e2 ee       	ldi	r30, 0xE2	; 226
     eb2:	f2 e0       	ldi	r31, 0x02	; 2
     eb4:	86 e0       	ldi	r24, 0x06	; 6
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	93 83       	std	Z+3, r25	; 0x03
     eba:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
     ec0:	08 95       	ret

00000ec2 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     ec2:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <bytes_in_input_buffer>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	91 11       	cpse	r25, r1
     eca:	01 c0       	rjmp	.+2      	; 0xece <serial_input_available+0xc>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
}
     ece:	08 95       	ret

00000ed0 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     ed0:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <input_insert_pos>
	bytes_in_input_buffer = 0;
     ed4:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <bytes_in_input_buffer>
     ed8:	08 95       	ret

00000eda <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     eda:	1f 92       	push	r1
     edc:	0f 92       	push	r0
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	0f 92       	push	r0
     ee2:	11 24       	eor	r1, r1
     ee4:	2f 93       	push	r18
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     eee:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <bytes_in_out_buffer>
     ef2:	88 23       	and	r24, r24
     ef4:	29 f1       	breq	.+74     	; 0xf40 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     ef6:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <out_insert_pos>
     efa:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <bytes_in_out_buffer>
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	82 1b       	sub	r24, r18
     f02:	91 09       	sbc	r25, r1
     f04:	5a f4       	brpl	.+22     	; 0xf1c <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     f06:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <out_insert_pos>
     f0a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <bytes_in_out_buffer>
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	e8 1b       	sub	r30, r24
     f12:	f1 09       	sbc	r31, r1
     f14:	e1 53       	subi	r30, 0x31	; 49
     f16:	fd 4f       	sbci	r31, 0xFD	; 253
     f18:	90 81       	ld	r25, Z
     f1a:	0a c0       	rjmp	.+20     	; 0xf30 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     f1c:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <out_insert_pos>
     f20:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <bytes_in_out_buffer>
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	e8 1b       	sub	r30, r24
     f28:	f1 09       	sbc	r31, r1
     f2a:	e0 53       	subi	r30, 0x30	; 48
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     f30:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <bytes_in_out_buffer>
     f34:	81 50       	subi	r24, 0x01	; 1
     f36:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     f3a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     f40:	e1 ec       	ldi	r30, 0xC1	; 193
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8f 7d       	andi	r24, 0xDF	; 223
     f48:	80 83       	st	Z, r24
	}
}
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	2f 91       	pop	r18
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	2f 93       	push	r18
     f6a:	3f 93       	push	r19
     f6c:	4f 93       	push	r20
     f6e:	5f 93       	push	r21
     f70:	6f 93       	push	r22
     f72:	7f 93       	push	r23
     f74:	8f 93       	push	r24
     f76:	9f 93       	push	r25
     f78:	af 93       	push	r26
     f7a:	bf 93       	push	r27
     f7c:	cf 93       	push	r28
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     f82:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     f86:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <do_echo>
     f8a:	88 23       	and	r24, r24
     f8c:	49 f0       	breq	.+18     	; 0xfa0 <__vector_20+0x42>
     f8e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <bytes_in_out_buffer>
     f92:	8f 3f       	cpi	r24, 0xFF	; 255
     f94:	29 f0       	breq	.+10     	; 0xfa0 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	8c 2f       	mov	r24, r28
     f9c:	0e 94 b4 06 	call	0xd68	; 0xd68 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     fa0:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <bytes_in_input_buffer>
     fa4:	80 31       	cpi	r24, 0x10	; 16
     fa6:	20 f0       	brcs	.+8      	; 0xfb0 <__vector_20+0x52>
		input_overrun = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <input_overrun>
     fae:	18 c0       	rjmp	.+48     	; 0xfe0 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     fb0:	cd 30       	cpi	r28, 0x0D	; 13
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <__vector_20+0x58>
			c = '\n';
     fb4:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     fb6:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <input_insert_pos>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	8e 0f       	add	r24, r30
     fbe:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <input_insert_pos>
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	e0 53       	subi	r30, 0x30	; 48
     fc6:	fd 4f       	sbci	r31, 0xFD	; 253
     fc8:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     fca:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <bytes_in_input_buffer>
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     fd4:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <input_insert_pos>
     fd8:	80 31       	cpi	r24, 0x10	; 16
     fda:	11 f4       	brne	.+4      	; 0xfe0 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     fdc:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <input_insert_pos>
		}
	}
}
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	cf 91       	pop	r28
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1004:	94 b1       	in	r25, 0x04	; 4
    1006:	90 6b       	ori	r25, 0xB0	; 176
    1008:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    100a:	95 b1       	in	r25, 0x05	; 5
    100c:	90 61       	ori	r25, 0x10	; 16
    100e:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1010:	90 e5       	ldi	r25, 0x50	; 80
    1012:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1014:	88 30       	cpi	r24, 0x08	; 8
    1016:	21 f0       	breq	.+8      	; 0x1020 <spi_setup_master+0x1c>
    1018:	80 32       	cpi	r24, 0x20	; 32
    101a:	11 f0       	breq	.+4      	; 0x1020 <spi_setup_master+0x1c>
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	19 f4       	brne	.+6      	; 0x1026 <spi_setup_master+0x22>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	9d bd       	out	0x2d, r25	; 45
			break;
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    1026:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1028:	80 32       	cpi	r24, 0x20	; 32
    102a:	69 f0       	breq	.+26     	; 0x1046 <spi_setup_master+0x42>
    102c:	28 f4       	brcc	.+10     	; 0x1038 <spi_setup_master+0x34>
    102e:	88 30       	cpi	r24, 0x08	; 8
    1030:	71 f0       	breq	.+28     	; 0x104e <spi_setup_master+0x4a>
    1032:	80 31       	cpi	r24, 0x10	; 16
    1034:	61 f0       	breq	.+24     	; 0x104e <spi_setup_master+0x4a>
    1036:	0e c0       	rjmp	.+28     	; 0x1054 <spi_setup_master+0x50>
    1038:	80 34       	cpi	r24, 0x40	; 64
    103a:	29 f0       	breq	.+10     	; 0x1046 <spi_setup_master+0x42>
    103c:	80 38       	cpi	r24, 0x80	; 128
    103e:	51 f4       	brne	.+20     	; 0x1054 <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1<<SPR00);
    1040:	8c b5       	in	r24, 0x2c	; 44
    1042:	81 60       	ori	r24, 0x01	; 1
    1044:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1046:	8c b5       	in	r24, 0x2c	; 44
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	8c bd       	out	0x2c, r24	; 44
			break;
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <spi_setup_master+0x50>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    104e:	8c b5       	in	r24, 0x2c	; 44
    1050:	81 60       	ori	r24, 0x01	; 1
    1052:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1054:	85 b1       	in	r24, 0x05	; 5
    1056:	8f 7e       	andi	r24, 0xEF	; 239
    1058:	85 b9       	out	0x05, r24	; 5
    105a:	08 95       	ret

0000105c <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    105c:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    105e:	0d b4       	in	r0, 0x2d	; 45
    1060:	07 fe       	sbrs	r0, 7
    1062:	fd cf       	rjmp	.-6      	; 0x105e <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1064:	8e b5       	in	r24, 0x2e	; 46
    1066:	08 95       	ret

00001068 <move_terminal_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    1068:	9f 93       	push	r25
    106a:	8f 93       	push	r24
    106c:	7f 93       	push	r23
    106e:	6f 93       	push	r22
    1070:	83 ed       	ldi	r24, 0xD3	; 211
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9f 93       	push	r25
    1076:	8f 93       	push	r24
    1078:	0e 94 4a 09 	call	0x1294	; 0x1294 <printf_P>
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	08 95       	ret

0000108a <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    108a:	8e ec       	ldi	r24, 0xCE	; 206
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9f 93       	push	r25
    1090:	8f 93       	push	r24
    1092:	0e 94 4a 09 	call	0x1294	; 0x1294 <printf_P>
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	08 95       	ret

0000109c <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    109c:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <clockTicks>
    10a0:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <clockTicks+0x1>
    10a4:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <clockTicks+0x2>
    10a8:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    10ac:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    10ae:	8c e7       	ldi	r24, 0x7C	; 124
    10b0:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    10b2:	82 e0       	ldi	r24, 0x02	; 2
    10b4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    10b6:	83 e0       	ldi	r24, 0x03	; 3
    10b8:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    10ba:	ee e6       	ldi	r30, 0x6E	; 110
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    10c4:	85 b3       	in	r24, 0x15	; 21
    10c6:	82 70       	andi	r24, 0x02	; 2
    10c8:	85 bb       	out	0x15, r24	; 21
    10ca:	08 95       	ret

000010cc <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    10cc:	8f b7       	in	r24, 0x3f	; 63
    10ce:	28 2f       	mov	r18, r24
    10d0:	20 78       	andi	r18, 0x80	; 128
	cli();
    10d2:	f8 94       	cli
	returnValue = clockTicks;
    10d4:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <clockTicks>
    10d8:	70 91 be 01 	lds	r23, 0x01BE	; 0x8001be <clockTicks+0x1>
    10dc:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <clockTicks+0x2>
    10e0:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <clockTicks+0x3>
	if(interruptsOn) {
    10e4:	22 23       	and	r18, r18
    10e6:	09 f0       	breq	.+2      	; 0x10ea <get_current_time+0x1e>
		sei();
    10e8:	78 94       	sei
	}
	return returnValue;
}
    10ea:	08 95       	ret

000010ec <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
    10fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <clockTicks>
    1102:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <clockTicks+0x1>
    1106:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <clockTicks+0x2>
    110a:	b0 91 c0 01 	lds	r27, 0x01C0	; 0x8001c0 <clockTicks+0x3>
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	a1 1d       	adc	r26, r1
    1112:	b1 1d       	adc	r27, r1
    1114:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <clockTicks>
    1118:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <clockTicks+0x1>
    111c:	a0 93 bf 01 	sts	0x01BF, r26	; 0x8001bf <clockTicks+0x2>
    1120:	b0 93 c0 01 	sts	0x01C0, r27	; 0x8001c0 <clockTicks+0x3>
}
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <__udivmodsi4>:
    1136:	a1 e2       	ldi	r26, 0x21	; 33
    1138:	1a 2e       	mov	r1, r26
    113a:	aa 1b       	sub	r26, r26
    113c:	bb 1b       	sub	r27, r27
    113e:	fd 01       	movw	r30, r26
    1140:	0d c0       	rjmp	.+26     	; 0x115c <__udivmodsi4_ep>

00001142 <__udivmodsi4_loop>:
    1142:	aa 1f       	adc	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	ee 1f       	adc	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	a2 17       	cp	r26, r18
    114c:	b3 07       	cpc	r27, r19
    114e:	e4 07       	cpc	r30, r20
    1150:	f5 07       	cpc	r31, r21
    1152:	20 f0       	brcs	.+8      	; 0x115c <__udivmodsi4_ep>
    1154:	a2 1b       	sub	r26, r18
    1156:	b3 0b       	sbc	r27, r19
    1158:	e4 0b       	sbc	r30, r20
    115a:	f5 0b       	sbc	r31, r21

0000115c <__udivmodsi4_ep>:
    115c:	66 1f       	adc	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	88 1f       	adc	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	1a 94       	dec	r1
    1166:	69 f7       	brne	.-38     	; 0x1142 <__udivmodsi4_loop>
    1168:	60 95       	com	r22
    116a:	70 95       	com	r23
    116c:	80 95       	com	r24
    116e:	90 95       	com	r25
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	bd 01       	movw	r22, r26
    1176:	cf 01       	movw	r24, r30
    1178:	08 95       	ret

0000117a <__divmodsi4>:
    117a:	05 2e       	mov	r0, r21
    117c:	97 fb       	bst	r25, 7
    117e:	1e f4       	brtc	.+6      	; 0x1186 <__divmodsi4+0xc>
    1180:	00 94       	com	r0
    1182:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__negsi2>
    1186:	57 fd       	sbrc	r21, 7
    1188:	07 d0       	rcall	.+14     	; 0x1198 <__divmodsi4_neg2>
    118a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__udivmodsi4>
    118e:	07 fc       	sbrc	r0, 7
    1190:	03 d0       	rcall	.+6      	; 0x1198 <__divmodsi4_neg2>
    1192:	4e f4       	brtc	.+18     	; 0x11a6 <__divmodsi4_exit>
    1194:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__negsi2>

00001198 <__divmodsi4_neg2>:
    1198:	50 95       	com	r21
    119a:	40 95       	com	r20
    119c:	30 95       	com	r19
    119e:	21 95       	neg	r18
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	4f 4f       	sbci	r20, 0xFF	; 255
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255

000011a6 <__divmodsi4_exit>:
    11a6:	08 95       	ret

000011a8 <__negsi2>:
    11a8:	90 95       	com	r25
    11aa:	80 95       	com	r24
    11ac:	70 95       	com	r23
    11ae:	61 95       	neg	r22
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	8f 4f       	sbci	r24, 0xFF	; 255
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	08 95       	ret

000011b8 <__muluhisi3>:
    11b8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__umulhisi3>
    11bc:	a5 9f       	mul	r26, r21
    11be:	90 0d       	add	r25, r0
    11c0:	b4 9f       	mul	r27, r20
    11c2:	90 0d       	add	r25, r0
    11c4:	a4 9f       	mul	r26, r20
    11c6:	80 0d       	add	r24, r0
    11c8:	91 1d       	adc	r25, r1
    11ca:	11 24       	eor	r1, r1
    11cc:	08 95       	ret

000011ce <__umulhisi3>:
    11ce:	a2 9f       	mul	r26, r18
    11d0:	b0 01       	movw	r22, r0
    11d2:	b3 9f       	mul	r27, r19
    11d4:	c0 01       	movw	r24, r0
    11d6:	a3 9f       	mul	r26, r19
    11d8:	70 0d       	add	r23, r0
    11da:	81 1d       	adc	r24, r1
    11dc:	11 24       	eor	r1, r1
    11de:	91 1d       	adc	r25, r1
    11e0:	b2 9f       	mul	r27, r18
    11e2:	70 0d       	add	r23, r0
    11e4:	81 1d       	adc	r24, r1
    11e6:	11 24       	eor	r1, r1
    11e8:	91 1d       	adc	r25, r1
    11ea:	08 95       	ret

000011ec <fgetc>:
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ec 01       	movw	r28, r24
    11f2:	2b 81       	ldd	r18, Y+3	; 0x03
    11f4:	20 ff       	sbrs	r18, 0
    11f6:	33 c0       	rjmp	.+102    	; 0x125e <fgetc+0x72>
    11f8:	26 ff       	sbrs	r18, 6
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <fgetc+0x24>
    11fc:	2f 7b       	andi	r18, 0xBF	; 191
    11fe:	2b 83       	std	Y+3, r18	; 0x03
    1200:	8e 81       	ldd	r24, Y+6	; 0x06
    1202:	9f 81       	ldd	r25, Y+7	; 0x07
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	9f 83       	std	Y+7, r25	; 0x07
    1208:	8e 83       	std	Y+6, r24	; 0x06
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	29 c0       	rjmp	.+82     	; 0x1262 <fgetc+0x76>
    1210:	22 ff       	sbrs	r18, 2
    1212:	0f c0       	rjmp	.+30     	; 0x1232 <fgetc+0x46>
    1214:	e8 81       	ld	r30, Y
    1216:	f9 81       	ldd	r31, Y+1	; 0x01
    1218:	80 81       	ld	r24, Z
    121a:	08 2e       	mov	r0, r24
    121c:	00 0c       	add	r0, r0
    121e:	99 0b       	sbc	r25, r25
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	19 f4       	brne	.+6      	; 0x122a <fgetc+0x3e>
    1224:	20 62       	ori	r18, 0x20	; 32
    1226:	2b 83       	std	Y+3, r18	; 0x03
    1228:	1a c0       	rjmp	.+52     	; 0x125e <fgetc+0x72>
    122a:	31 96       	adiw	r30, 0x01	; 1
    122c:	f9 83       	std	Y+1, r31	; 0x01
    122e:	e8 83       	st	Y, r30
    1230:	0e c0       	rjmp	.+28     	; 0x124e <fgetc+0x62>
    1232:	ea 85       	ldd	r30, Y+10	; 0x0a
    1234:	fb 85       	ldd	r31, Y+11	; 0x0b
    1236:	09 95       	icall
    1238:	97 ff       	sbrs	r25, 7
    123a:	09 c0       	rjmp	.+18     	; 0x124e <fgetc+0x62>
    123c:	2b 81       	ldd	r18, Y+3	; 0x03
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	11 f0       	breq	.+4      	; 0x1246 <fgetc+0x5a>
    1242:	80 e2       	ldi	r24, 0x20	; 32
    1244:	01 c0       	rjmp	.+2      	; 0x1248 <fgetc+0x5c>
    1246:	80 e1       	ldi	r24, 0x10	; 16
    1248:	82 2b       	or	r24, r18
    124a:	8b 83       	std	Y+3, r24	; 0x03
    124c:	08 c0       	rjmp	.+16     	; 0x125e <fgetc+0x72>
    124e:	2e 81       	ldd	r18, Y+6	; 0x06
    1250:	3f 81       	ldd	r19, Y+7	; 0x07
    1252:	2f 5f       	subi	r18, 0xFF	; 255
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	3f 83       	std	Y+7, r19	; 0x07
    1258:	2e 83       	std	Y+6, r18	; 0x06
    125a:	99 27       	eor	r25, r25
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <fgetc+0x76>
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	9f ef       	ldi	r25, 0xFF	; 255
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <printf>:
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ea e3       	ldi	r30, 0x3A	; 58
    126e:	f9 e0       	ldi	r31, 0x09	; 9
    1270:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__prologue_saves__+0x20>
    1274:	ae 01       	movw	r20, r28
    1276:	4b 5f       	subi	r20, 0xFB	; 251
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	fa 01       	movw	r30, r20
    127c:	61 91       	ld	r22, Z+
    127e:	71 91       	ld	r23, Z+
    1280:	af 01       	movw	r20, r30
    1282:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__iob+0x2>
    1286:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <__iob+0x3>
    128a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <vfprintf>
    128e:	e2 e0       	ldi	r30, 0x02	; 2
    1290:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__epilogue_restores__+0x20>

00001294 <printf_P>:
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e0 e5       	ldi	r30, 0x50	; 80
    129a:	f9 e0       	ldi	r31, 0x09	; 9
    129c:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__prologue_saves__+0x1c>
    12a0:	ae 01       	movw	r20, r28
    12a2:	49 5f       	subi	r20, 0xF9	; 249
    12a4:	5f 4f       	sbci	r21, 0xFF	; 255
    12a6:	da 01       	movw	r26, r20
    12a8:	6d 91       	ld	r22, X+
    12aa:	7d 91       	ld	r23, X+
    12ac:	ad 01       	movw	r20, r26
    12ae:	02 ee       	ldi	r16, 0xE2	; 226
    12b0:	12 e0       	ldi	r17, 0x02	; 2
    12b2:	f8 01       	movw	r30, r16
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	93 81       	ldd	r25, Z+3	; 0x03
    12b8:	dc 01       	movw	r26, r24
    12ba:	13 96       	adiw	r26, 0x03	; 3
    12bc:	2c 91       	ld	r18, X
    12be:	13 97       	sbiw	r26, 0x03	; 3
    12c0:	28 60       	ori	r18, 0x08	; 8
    12c2:	13 96       	adiw	r26, 0x03	; 3
    12c4:	2c 93       	st	X, r18
    12c6:	0e 94 70 09 	call	0x12e0	; 0x12e0 <vfprintf>
    12ca:	d8 01       	movw	r26, r16
    12cc:	12 96       	adiw	r26, 0x02	; 2
    12ce:	ed 91       	ld	r30, X+
    12d0:	fc 91       	ld	r31, X
    12d2:	13 97       	sbiw	r26, 0x03	; 3
    12d4:	23 81       	ldd	r18, Z+3	; 0x03
    12d6:	27 7f       	andi	r18, 0xF7	; 247
    12d8:	23 83       	std	Z+3, r18	; 0x03
    12da:	e4 e0       	ldi	r30, 0x04	; 4
    12dc:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__epilogue_restores__+0x1c>

000012e0 <vfprintf>:
    12e0:	ab e0       	ldi	r26, 0x0B	; 11
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e6 e7       	ldi	r30, 0x76	; 118
    12e6:	f9 e0       	ldi	r31, 0x09	; 9
    12e8:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__prologue_saves__>
    12ec:	6c 01       	movw	r12, r24
    12ee:	7b 01       	movw	r14, r22
    12f0:	8a 01       	movw	r16, r20
    12f2:	fc 01       	movw	r30, r24
    12f4:	17 82       	std	Z+7, r1	; 0x07
    12f6:	16 82       	std	Z+6, r1	; 0x06
    12f8:	83 81       	ldd	r24, Z+3	; 0x03
    12fa:	81 ff       	sbrs	r24, 1
    12fc:	cc c1       	rjmp	.+920    	; 0x1696 <vfprintf+0x3b6>
    12fe:	ce 01       	movw	r24, r28
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	3c 01       	movw	r6, r24
    1304:	f6 01       	movw	r30, r12
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	f7 01       	movw	r30, r14
    130a:	93 fd       	sbrc	r25, 3
    130c:	85 91       	lpm	r24, Z+
    130e:	93 ff       	sbrs	r25, 3
    1310:	81 91       	ld	r24, Z+
    1312:	7f 01       	movw	r14, r30
    1314:	88 23       	and	r24, r24
    1316:	09 f4       	brne	.+2      	; 0x131a <vfprintf+0x3a>
    1318:	ba c1       	rjmp	.+884    	; 0x168e <vfprintf+0x3ae>
    131a:	85 32       	cpi	r24, 0x25	; 37
    131c:	39 f4       	brne	.+14     	; 0x132c <vfprintf+0x4c>
    131e:	93 fd       	sbrc	r25, 3
    1320:	85 91       	lpm	r24, Z+
    1322:	93 ff       	sbrs	r25, 3
    1324:	81 91       	ld	r24, Z+
    1326:	7f 01       	movw	r14, r30
    1328:	85 32       	cpi	r24, 0x25	; 37
    132a:	29 f4       	brne	.+10     	; 0x1336 <vfprintf+0x56>
    132c:	b6 01       	movw	r22, r12
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 67 0b 	call	0x16ce	; 0x16ce <fputc>
    1334:	e7 cf       	rjmp	.-50     	; 0x1304 <vfprintf+0x24>
    1336:	91 2c       	mov	r9, r1
    1338:	21 2c       	mov	r2, r1
    133a:	31 2c       	mov	r3, r1
    133c:	ff e1       	ldi	r31, 0x1F	; 31
    133e:	f3 15       	cp	r31, r3
    1340:	d8 f0       	brcs	.+54     	; 0x1378 <vfprintf+0x98>
    1342:	8b 32       	cpi	r24, 0x2B	; 43
    1344:	79 f0       	breq	.+30     	; 0x1364 <vfprintf+0x84>
    1346:	38 f4       	brcc	.+14     	; 0x1356 <vfprintf+0x76>
    1348:	80 32       	cpi	r24, 0x20	; 32
    134a:	79 f0       	breq	.+30     	; 0x136a <vfprintf+0x8a>
    134c:	83 32       	cpi	r24, 0x23	; 35
    134e:	a1 f4       	brne	.+40     	; 0x1378 <vfprintf+0x98>
    1350:	23 2d       	mov	r18, r3
    1352:	20 61       	ori	r18, 0x10	; 16
    1354:	1d c0       	rjmp	.+58     	; 0x1390 <vfprintf+0xb0>
    1356:	8d 32       	cpi	r24, 0x2D	; 45
    1358:	61 f0       	breq	.+24     	; 0x1372 <vfprintf+0x92>
    135a:	80 33       	cpi	r24, 0x30	; 48
    135c:	69 f4       	brne	.+26     	; 0x1378 <vfprintf+0x98>
    135e:	23 2d       	mov	r18, r3
    1360:	21 60       	ori	r18, 0x01	; 1
    1362:	16 c0       	rjmp	.+44     	; 0x1390 <vfprintf+0xb0>
    1364:	83 2d       	mov	r24, r3
    1366:	82 60       	ori	r24, 0x02	; 2
    1368:	38 2e       	mov	r3, r24
    136a:	e3 2d       	mov	r30, r3
    136c:	e4 60       	ori	r30, 0x04	; 4
    136e:	3e 2e       	mov	r3, r30
    1370:	2a c0       	rjmp	.+84     	; 0x13c6 <vfprintf+0xe6>
    1372:	f3 2d       	mov	r31, r3
    1374:	f8 60       	ori	r31, 0x08	; 8
    1376:	1d c0       	rjmp	.+58     	; 0x13b2 <vfprintf+0xd2>
    1378:	37 fc       	sbrc	r3, 7
    137a:	2d c0       	rjmp	.+90     	; 0x13d6 <vfprintf+0xf6>
    137c:	20 ed       	ldi	r18, 0xD0	; 208
    137e:	28 0f       	add	r18, r24
    1380:	2a 30       	cpi	r18, 0x0A	; 10
    1382:	40 f0       	brcs	.+16     	; 0x1394 <vfprintf+0xb4>
    1384:	8e 32       	cpi	r24, 0x2E	; 46
    1386:	b9 f4       	brne	.+46     	; 0x13b6 <vfprintf+0xd6>
    1388:	36 fc       	sbrc	r3, 6
    138a:	81 c1       	rjmp	.+770    	; 0x168e <vfprintf+0x3ae>
    138c:	23 2d       	mov	r18, r3
    138e:	20 64       	ori	r18, 0x40	; 64
    1390:	32 2e       	mov	r3, r18
    1392:	19 c0       	rjmp	.+50     	; 0x13c6 <vfprintf+0xe6>
    1394:	36 fe       	sbrs	r3, 6
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <vfprintf+0xc4>
    1398:	8a e0       	ldi	r24, 0x0A	; 10
    139a:	98 9e       	mul	r9, r24
    139c:	20 0d       	add	r18, r0
    139e:	11 24       	eor	r1, r1
    13a0:	92 2e       	mov	r9, r18
    13a2:	11 c0       	rjmp	.+34     	; 0x13c6 <vfprintf+0xe6>
    13a4:	ea e0       	ldi	r30, 0x0A	; 10
    13a6:	2e 9e       	mul	r2, r30
    13a8:	20 0d       	add	r18, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	22 2e       	mov	r2, r18
    13ae:	f3 2d       	mov	r31, r3
    13b0:	f0 62       	ori	r31, 0x20	; 32
    13b2:	3f 2e       	mov	r3, r31
    13b4:	08 c0       	rjmp	.+16     	; 0x13c6 <vfprintf+0xe6>
    13b6:	8c 36       	cpi	r24, 0x6C	; 108
    13b8:	21 f4       	brne	.+8      	; 0x13c2 <vfprintf+0xe2>
    13ba:	83 2d       	mov	r24, r3
    13bc:	80 68       	ori	r24, 0x80	; 128
    13be:	38 2e       	mov	r3, r24
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <vfprintf+0xe6>
    13c2:	88 36       	cpi	r24, 0x68	; 104
    13c4:	41 f4       	brne	.+16     	; 0x13d6 <vfprintf+0xf6>
    13c6:	f7 01       	movw	r30, r14
    13c8:	93 fd       	sbrc	r25, 3
    13ca:	85 91       	lpm	r24, Z+
    13cc:	93 ff       	sbrs	r25, 3
    13ce:	81 91       	ld	r24, Z+
    13d0:	7f 01       	movw	r14, r30
    13d2:	81 11       	cpse	r24, r1
    13d4:	b3 cf       	rjmp	.-154    	; 0x133c <vfprintf+0x5c>
    13d6:	98 2f       	mov	r25, r24
    13d8:	9f 7d       	andi	r25, 0xDF	; 223
    13da:	95 54       	subi	r25, 0x45	; 69
    13dc:	93 30       	cpi	r25, 0x03	; 3
    13de:	28 f4       	brcc	.+10     	; 0x13ea <vfprintf+0x10a>
    13e0:	0c 5f       	subi	r16, 0xFC	; 252
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	9f e3       	ldi	r25, 0x3F	; 63
    13e6:	99 83       	std	Y+1, r25	; 0x01
    13e8:	0d c0       	rjmp	.+26     	; 0x1404 <vfprintf+0x124>
    13ea:	83 36       	cpi	r24, 0x63	; 99
    13ec:	31 f0       	breq	.+12     	; 0x13fa <vfprintf+0x11a>
    13ee:	83 37       	cpi	r24, 0x73	; 115
    13f0:	71 f0       	breq	.+28     	; 0x140e <vfprintf+0x12e>
    13f2:	83 35       	cpi	r24, 0x53	; 83
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <vfprintf+0x118>
    13f6:	59 c0       	rjmp	.+178    	; 0x14aa <vfprintf+0x1ca>
    13f8:	21 c0       	rjmp	.+66     	; 0x143c <vfprintf+0x15c>
    13fa:	f8 01       	movw	r30, r16
    13fc:	80 81       	ld	r24, Z
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	0e 5f       	subi	r16, 0xFE	; 254
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	88 24       	eor	r8, r8
    1406:	83 94       	inc	r8
    1408:	91 2c       	mov	r9, r1
    140a:	53 01       	movw	r10, r6
    140c:	13 c0       	rjmp	.+38     	; 0x1434 <vfprintf+0x154>
    140e:	28 01       	movw	r4, r16
    1410:	f2 e0       	ldi	r31, 0x02	; 2
    1412:	4f 0e       	add	r4, r31
    1414:	51 1c       	adc	r5, r1
    1416:	f8 01       	movw	r30, r16
    1418:	a0 80       	ld	r10, Z
    141a:	b1 80       	ldd	r11, Z+1	; 0x01
    141c:	36 fe       	sbrs	r3, 6
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <vfprintf+0x146>
    1420:	69 2d       	mov	r22, r9
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <vfprintf+0x14a>
    1426:	6f ef       	ldi	r22, 0xFF	; 255
    1428:	7f ef       	ldi	r23, 0xFF	; 255
    142a:	c5 01       	movw	r24, r10
    142c:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <strnlen>
    1430:	4c 01       	movw	r8, r24
    1432:	82 01       	movw	r16, r4
    1434:	f3 2d       	mov	r31, r3
    1436:	ff 77       	andi	r31, 0x7F	; 127
    1438:	3f 2e       	mov	r3, r31
    143a:	16 c0       	rjmp	.+44     	; 0x1468 <vfprintf+0x188>
    143c:	28 01       	movw	r4, r16
    143e:	22 e0       	ldi	r18, 0x02	; 2
    1440:	42 0e       	add	r4, r18
    1442:	51 1c       	adc	r5, r1
    1444:	f8 01       	movw	r30, r16
    1446:	a0 80       	ld	r10, Z
    1448:	b1 80       	ldd	r11, Z+1	; 0x01
    144a:	36 fe       	sbrs	r3, 6
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <vfprintf+0x174>
    144e:	69 2d       	mov	r22, r9
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <vfprintf+0x178>
    1454:	6f ef       	ldi	r22, 0xFF	; 255
    1456:	7f ef       	ldi	r23, 0xFF	; 255
    1458:	c5 01       	movw	r24, r10
    145a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <strnlen_P>
    145e:	4c 01       	movw	r8, r24
    1460:	f3 2d       	mov	r31, r3
    1462:	f0 68       	ori	r31, 0x80	; 128
    1464:	3f 2e       	mov	r3, r31
    1466:	82 01       	movw	r16, r4
    1468:	33 fc       	sbrc	r3, 3
    146a:	1b c0       	rjmp	.+54     	; 0x14a2 <vfprintf+0x1c2>
    146c:	82 2d       	mov	r24, r2
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	88 16       	cp	r8, r24
    1472:	99 06       	cpc	r9, r25
    1474:	b0 f4       	brcc	.+44     	; 0x14a2 <vfprintf+0x1c2>
    1476:	b6 01       	movw	r22, r12
    1478:	80 e2       	ldi	r24, 0x20	; 32
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <fputc>
    1480:	2a 94       	dec	r2
    1482:	f4 cf       	rjmp	.-24     	; 0x146c <vfprintf+0x18c>
    1484:	f5 01       	movw	r30, r10
    1486:	37 fc       	sbrc	r3, 7
    1488:	85 91       	lpm	r24, Z+
    148a:	37 fe       	sbrs	r3, 7
    148c:	81 91       	ld	r24, Z+
    148e:	5f 01       	movw	r10, r30
    1490:	b6 01       	movw	r22, r12
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 67 0b 	call	0x16ce	; 0x16ce <fputc>
    1498:	21 10       	cpse	r2, r1
    149a:	2a 94       	dec	r2
    149c:	21 e0       	ldi	r18, 0x01	; 1
    149e:	82 1a       	sub	r8, r18
    14a0:	91 08       	sbc	r9, r1
    14a2:	81 14       	cp	r8, r1
    14a4:	91 04       	cpc	r9, r1
    14a6:	71 f7       	brne	.-36     	; 0x1484 <vfprintf+0x1a4>
    14a8:	e8 c0       	rjmp	.+464    	; 0x167a <vfprintf+0x39a>
    14aa:	84 36       	cpi	r24, 0x64	; 100
    14ac:	11 f0       	breq	.+4      	; 0x14b2 <vfprintf+0x1d2>
    14ae:	89 36       	cpi	r24, 0x69	; 105
    14b0:	41 f5       	brne	.+80     	; 0x1502 <vfprintf+0x222>
    14b2:	f8 01       	movw	r30, r16
    14b4:	37 fe       	sbrs	r3, 7
    14b6:	07 c0       	rjmp	.+14     	; 0x14c6 <vfprintf+0x1e6>
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	0c 5f       	subi	r16, 0xFC	; 252
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <vfprintf+0x1f6>
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	07 2e       	mov	r0, r23
    14cc:	00 0c       	add	r0, r0
    14ce:	88 0b       	sbc	r24, r24
    14d0:	99 0b       	sbc	r25, r25
    14d2:	0e 5f       	subi	r16, 0xFE	; 254
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	f3 2d       	mov	r31, r3
    14d8:	ff 76       	andi	r31, 0x6F	; 111
    14da:	3f 2e       	mov	r3, r31
    14dc:	97 ff       	sbrs	r25, 7
    14de:	09 c0       	rjmp	.+18     	; 0x14f2 <vfprintf+0x212>
    14e0:	90 95       	com	r25
    14e2:	80 95       	com	r24
    14e4:	70 95       	com	r23
    14e6:	61 95       	neg	r22
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8f 4f       	sbci	r24, 0xFF	; 255
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	f0 68       	ori	r31, 0x80	; 128
    14f0:	3f 2e       	mov	r3, r31
    14f2:	2a e0       	ldi	r18, 0x0A	; 10
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	a3 01       	movw	r20, r6
    14f8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__ultoa_invert>
    14fc:	88 2e       	mov	r8, r24
    14fe:	86 18       	sub	r8, r6
    1500:	45 c0       	rjmp	.+138    	; 0x158c <vfprintf+0x2ac>
    1502:	85 37       	cpi	r24, 0x75	; 117
    1504:	31 f4       	brne	.+12     	; 0x1512 <vfprintf+0x232>
    1506:	23 2d       	mov	r18, r3
    1508:	2f 7e       	andi	r18, 0xEF	; 239
    150a:	b2 2e       	mov	r11, r18
    150c:	2a e0       	ldi	r18, 0x0A	; 10
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	25 c0       	rjmp	.+74     	; 0x155c <vfprintf+0x27c>
    1512:	93 2d       	mov	r25, r3
    1514:	99 7f       	andi	r25, 0xF9	; 249
    1516:	b9 2e       	mov	r11, r25
    1518:	8f 36       	cpi	r24, 0x6F	; 111
    151a:	c1 f0       	breq	.+48     	; 0x154c <vfprintf+0x26c>
    151c:	18 f4       	brcc	.+6      	; 0x1524 <vfprintf+0x244>
    151e:	88 35       	cpi	r24, 0x58	; 88
    1520:	79 f0       	breq	.+30     	; 0x1540 <vfprintf+0x260>
    1522:	b5 c0       	rjmp	.+362    	; 0x168e <vfprintf+0x3ae>
    1524:	80 37       	cpi	r24, 0x70	; 112
    1526:	19 f0       	breq	.+6      	; 0x152e <vfprintf+0x24e>
    1528:	88 37       	cpi	r24, 0x78	; 120
    152a:	21 f0       	breq	.+8      	; 0x1534 <vfprintf+0x254>
    152c:	b0 c0       	rjmp	.+352    	; 0x168e <vfprintf+0x3ae>
    152e:	e9 2f       	mov	r30, r25
    1530:	e0 61       	ori	r30, 0x10	; 16
    1532:	be 2e       	mov	r11, r30
    1534:	b4 fe       	sbrs	r11, 4
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <vfprintf+0x272>
    1538:	fb 2d       	mov	r31, r11
    153a:	f4 60       	ori	r31, 0x04	; 4
    153c:	bf 2e       	mov	r11, r31
    153e:	09 c0       	rjmp	.+18     	; 0x1552 <vfprintf+0x272>
    1540:	34 fe       	sbrs	r3, 4
    1542:	0a c0       	rjmp	.+20     	; 0x1558 <vfprintf+0x278>
    1544:	29 2f       	mov	r18, r25
    1546:	26 60       	ori	r18, 0x06	; 6
    1548:	b2 2e       	mov	r11, r18
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <vfprintf+0x278>
    154c:	28 e0       	ldi	r18, 0x08	; 8
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	05 c0       	rjmp	.+10     	; 0x155c <vfprintf+0x27c>
    1552:	20 e1       	ldi	r18, 0x10	; 16
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <vfprintf+0x27c>
    1558:	20 e1       	ldi	r18, 0x10	; 16
    155a:	32 e0       	ldi	r19, 0x02	; 2
    155c:	f8 01       	movw	r30, r16
    155e:	b7 fe       	sbrs	r11, 7
    1560:	07 c0       	rjmp	.+14     	; 0x1570 <vfprintf+0x290>
    1562:	60 81       	ld	r22, Z
    1564:	71 81       	ldd	r23, Z+1	; 0x01
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	93 81       	ldd	r25, Z+3	; 0x03
    156a:	0c 5f       	subi	r16, 0xFC	; 252
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	06 c0       	rjmp	.+12     	; 0x157c <vfprintf+0x29c>
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 5f       	subi	r16, 0xFE	; 254
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	a3 01       	movw	r20, r6
    157e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__ultoa_invert>
    1582:	88 2e       	mov	r8, r24
    1584:	86 18       	sub	r8, r6
    1586:	fb 2d       	mov	r31, r11
    1588:	ff 77       	andi	r31, 0x7F	; 127
    158a:	3f 2e       	mov	r3, r31
    158c:	36 fe       	sbrs	r3, 6
    158e:	0d c0       	rjmp	.+26     	; 0x15aa <vfprintf+0x2ca>
    1590:	23 2d       	mov	r18, r3
    1592:	2e 7f       	andi	r18, 0xFE	; 254
    1594:	a2 2e       	mov	r10, r18
    1596:	89 14       	cp	r8, r9
    1598:	58 f4       	brcc	.+22     	; 0x15b0 <vfprintf+0x2d0>
    159a:	34 fe       	sbrs	r3, 4
    159c:	0b c0       	rjmp	.+22     	; 0x15b4 <vfprintf+0x2d4>
    159e:	32 fc       	sbrc	r3, 2
    15a0:	09 c0       	rjmp	.+18     	; 0x15b4 <vfprintf+0x2d4>
    15a2:	83 2d       	mov	r24, r3
    15a4:	8e 7e       	andi	r24, 0xEE	; 238
    15a6:	a8 2e       	mov	r10, r24
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <vfprintf+0x2d4>
    15aa:	b8 2c       	mov	r11, r8
    15ac:	a3 2c       	mov	r10, r3
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <vfprintf+0x2d6>
    15b0:	b8 2c       	mov	r11, r8
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <vfprintf+0x2d6>
    15b4:	b9 2c       	mov	r11, r9
    15b6:	a4 fe       	sbrs	r10, 4
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <vfprintf+0x2f8>
    15ba:	fe 01       	movw	r30, r28
    15bc:	e8 0d       	add	r30, r8
    15be:	f1 1d       	adc	r31, r1
    15c0:	80 81       	ld	r24, Z
    15c2:	80 33       	cpi	r24, 0x30	; 48
    15c4:	21 f4       	brne	.+8      	; 0x15ce <vfprintf+0x2ee>
    15c6:	9a 2d       	mov	r25, r10
    15c8:	99 7e       	andi	r25, 0xE9	; 233
    15ca:	a9 2e       	mov	r10, r25
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <vfprintf+0x300>
    15ce:	a2 fe       	sbrs	r10, 2
    15d0:	06 c0       	rjmp	.+12     	; 0x15de <vfprintf+0x2fe>
    15d2:	b3 94       	inc	r11
    15d4:	b3 94       	inc	r11
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <vfprintf+0x300>
    15d8:	8a 2d       	mov	r24, r10
    15da:	86 78       	andi	r24, 0x86	; 134
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <vfprintf+0x300>
    15de:	b3 94       	inc	r11
    15e0:	a3 fc       	sbrc	r10, 3
    15e2:	11 c0       	rjmp	.+34     	; 0x1606 <vfprintf+0x326>
    15e4:	a0 fe       	sbrs	r10, 0
    15e6:	06 c0       	rjmp	.+12     	; 0x15f4 <vfprintf+0x314>
    15e8:	b2 14       	cp	r11, r2
    15ea:	88 f4       	brcc	.+34     	; 0x160e <vfprintf+0x32e>
    15ec:	28 0c       	add	r2, r8
    15ee:	92 2c       	mov	r9, r2
    15f0:	9b 18       	sub	r9, r11
    15f2:	0e c0       	rjmp	.+28     	; 0x1610 <vfprintf+0x330>
    15f4:	b2 14       	cp	r11, r2
    15f6:	60 f4       	brcc	.+24     	; 0x1610 <vfprintf+0x330>
    15f8:	b6 01       	movw	r22, r12
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 67 0b 	call	0x16ce	; 0x16ce <fputc>
    1602:	b3 94       	inc	r11
    1604:	f7 cf       	rjmp	.-18     	; 0x15f4 <vfprintf+0x314>
    1606:	b2 14       	cp	r11, r2
    1608:	18 f4       	brcc	.+6      	; 0x1610 <vfprintf+0x330>
    160a:	2b 18       	sub	r2, r11
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <vfprintf+0x332>
    160e:	98 2c       	mov	r9, r8
    1610:	21 2c       	mov	r2, r1
    1612:	a4 fe       	sbrs	r10, 4
    1614:	10 c0       	rjmp	.+32     	; 0x1636 <vfprintf+0x356>
    1616:	b6 01       	movw	r22, r12
    1618:	80 e3       	ldi	r24, 0x30	; 48
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <fputc>
    1620:	a2 fe       	sbrs	r10, 2
    1622:	17 c0       	rjmp	.+46     	; 0x1652 <vfprintf+0x372>
    1624:	a1 fc       	sbrc	r10, 1
    1626:	03 c0       	rjmp	.+6      	; 0x162e <vfprintf+0x34e>
    1628:	88 e7       	ldi	r24, 0x78	; 120
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x352>
    162e:	88 e5       	ldi	r24, 0x58	; 88
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	b6 01       	movw	r22, r12
    1634:	0c c0       	rjmp	.+24     	; 0x164e <vfprintf+0x36e>
    1636:	8a 2d       	mov	r24, r10
    1638:	86 78       	andi	r24, 0x86	; 134
    163a:	59 f0       	breq	.+22     	; 0x1652 <vfprintf+0x372>
    163c:	a1 fe       	sbrs	r10, 1
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <vfprintf+0x364>
    1640:	8b e2       	ldi	r24, 0x2B	; 43
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <vfprintf+0x366>
    1644:	80 e2       	ldi	r24, 0x20	; 32
    1646:	a7 fc       	sbrc	r10, 7
    1648:	8d e2       	ldi	r24, 0x2D	; 45
    164a:	b6 01       	movw	r22, r12
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <fputc>
    1652:	89 14       	cp	r8, r9
    1654:	38 f4       	brcc	.+14     	; 0x1664 <vfprintf+0x384>
    1656:	b6 01       	movw	r22, r12
    1658:	80 e3       	ldi	r24, 0x30	; 48
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <fputc>
    1660:	9a 94       	dec	r9
    1662:	f7 cf       	rjmp	.-18     	; 0x1652 <vfprintf+0x372>
    1664:	8a 94       	dec	r8
    1666:	f3 01       	movw	r30, r6
    1668:	e8 0d       	add	r30, r8
    166a:	f1 1d       	adc	r31, r1
    166c:	80 81       	ld	r24, Z
    166e:	b6 01       	movw	r22, r12
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 67 0b 	call	0x16ce	; 0x16ce <fputc>
    1676:	81 10       	cpse	r8, r1
    1678:	f5 cf       	rjmp	.-22     	; 0x1664 <vfprintf+0x384>
    167a:	22 20       	and	r2, r2
    167c:	09 f4       	brne	.+2      	; 0x1680 <vfprintf+0x3a0>
    167e:	42 ce       	rjmp	.-892    	; 0x1304 <vfprintf+0x24>
    1680:	b6 01       	movw	r22, r12
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 67 0b 	call	0x16ce	; 0x16ce <fputc>
    168a:	2a 94       	dec	r2
    168c:	f6 cf       	rjmp	.-20     	; 0x167a <vfprintf+0x39a>
    168e:	f6 01       	movw	r30, r12
    1690:	86 81       	ldd	r24, Z+6	; 0x06
    1692:	97 81       	ldd	r25, Z+7	; 0x07
    1694:	02 c0       	rjmp	.+4      	; 0x169a <vfprintf+0x3ba>
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	9f ef       	ldi	r25, 0xFF	; 255
    169a:	2b 96       	adiw	r28, 0x0b	; 11
    169c:	e2 e1       	ldi	r30, 0x12	; 18
    169e:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__epilogue_restores__>

000016a2 <strnlen_P>:
    16a2:	fc 01       	movw	r30, r24
    16a4:	05 90       	lpm	r0, Z+
    16a6:	61 50       	subi	r22, 0x01	; 1
    16a8:	70 40       	sbci	r23, 0x00	; 0
    16aa:	01 10       	cpse	r0, r1
    16ac:	d8 f7       	brcc	.-10     	; 0x16a4 <strnlen_P+0x2>
    16ae:	80 95       	com	r24
    16b0:	90 95       	com	r25
    16b2:	8e 0f       	add	r24, r30
    16b4:	9f 1f       	adc	r25, r31
    16b6:	08 95       	ret

000016b8 <strnlen>:
    16b8:	fc 01       	movw	r30, r24
    16ba:	61 50       	subi	r22, 0x01	; 1
    16bc:	70 40       	sbci	r23, 0x00	; 0
    16be:	01 90       	ld	r0, Z+
    16c0:	01 10       	cpse	r0, r1
    16c2:	d8 f7       	brcc	.-10     	; 0x16ba <strnlen+0x2>
    16c4:	80 95       	com	r24
    16c6:	90 95       	com	r25
    16c8:	8e 0f       	add	r24, r30
    16ca:	9f 1f       	adc	r25, r31
    16cc:	08 95       	ret

000016ce <fputc>:
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	fb 01       	movw	r30, r22
    16d8:	23 81       	ldd	r18, Z+3	; 0x03
    16da:	21 fd       	sbrc	r18, 1
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <fputc+0x16>
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	9f ef       	ldi	r25, 0xFF	; 255
    16e2:	2c c0       	rjmp	.+88     	; 0x173c <fputc+0x6e>
    16e4:	22 ff       	sbrs	r18, 2
    16e6:	16 c0       	rjmp	.+44     	; 0x1714 <fputc+0x46>
    16e8:	46 81       	ldd	r20, Z+6	; 0x06
    16ea:	57 81       	ldd	r21, Z+7	; 0x07
    16ec:	24 81       	ldd	r18, Z+4	; 0x04
    16ee:	35 81       	ldd	r19, Z+5	; 0x05
    16f0:	42 17       	cp	r20, r18
    16f2:	53 07       	cpc	r21, r19
    16f4:	44 f4       	brge	.+16     	; 0x1706 <fputc+0x38>
    16f6:	a0 81       	ld	r26, Z
    16f8:	b1 81       	ldd	r27, Z+1	; 0x01
    16fa:	9d 01       	movw	r18, r26
    16fc:	2f 5f       	subi	r18, 0xFF	; 255
    16fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1700:	31 83       	std	Z+1, r19	; 0x01
    1702:	20 83       	st	Z, r18
    1704:	8c 93       	st	X, r24
    1706:	26 81       	ldd	r18, Z+6	; 0x06
    1708:	37 81       	ldd	r19, Z+7	; 0x07
    170a:	2f 5f       	subi	r18, 0xFF	; 255
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	37 83       	std	Z+7, r19	; 0x07
    1710:	26 83       	std	Z+6, r18	; 0x06
    1712:	14 c0       	rjmp	.+40     	; 0x173c <fputc+0x6e>
    1714:	8b 01       	movw	r16, r22
    1716:	ec 01       	movw	r28, r24
    1718:	fb 01       	movw	r30, r22
    171a:	00 84       	ldd	r0, Z+8	; 0x08
    171c:	f1 85       	ldd	r31, Z+9	; 0x09
    171e:	e0 2d       	mov	r30, r0
    1720:	09 95       	icall
    1722:	89 2b       	or	r24, r25
    1724:	e1 f6       	brne	.-72     	; 0x16de <fputc+0x10>
    1726:	d8 01       	movw	r26, r16
    1728:	16 96       	adiw	r26, 0x06	; 6
    172a:	8d 91       	ld	r24, X+
    172c:	9c 91       	ld	r25, X
    172e:	17 97       	sbiw	r26, 0x07	; 7
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	17 96       	adiw	r26, 0x07	; 7
    1734:	9c 93       	st	X, r25
    1736:	8e 93       	st	-X, r24
    1738:	16 97       	sbiw	r26, 0x06	; 6
    173a:	ce 01       	movw	r24, r28
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	08 95       	ret

00001746 <__ultoa_invert>:
    1746:	fa 01       	movw	r30, r20
    1748:	aa 27       	eor	r26, r26
    174a:	28 30       	cpi	r18, 0x08	; 8
    174c:	51 f1       	breq	.+84     	; 0x17a2 <__ultoa_invert+0x5c>
    174e:	20 31       	cpi	r18, 0x10	; 16
    1750:	81 f1       	breq	.+96     	; 0x17b2 <__ultoa_invert+0x6c>
    1752:	e8 94       	clt
    1754:	6f 93       	push	r22
    1756:	6e 7f       	andi	r22, 0xFE	; 254
    1758:	6e 5f       	subi	r22, 0xFE	; 254
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	af 4f       	sbci	r26, 0xFF	; 255
    1762:	b1 e0       	ldi	r27, 0x01	; 1
    1764:	3e d0       	rcall	.+124    	; 0x17e2 <__ultoa_invert+0x9c>
    1766:	b4 e0       	ldi	r27, 0x04	; 4
    1768:	3c d0       	rcall	.+120    	; 0x17e2 <__ultoa_invert+0x9c>
    176a:	67 0f       	add	r22, r23
    176c:	78 1f       	adc	r23, r24
    176e:	89 1f       	adc	r24, r25
    1770:	9a 1f       	adc	r25, r26
    1772:	a1 1d       	adc	r26, r1
    1774:	68 0f       	add	r22, r24
    1776:	79 1f       	adc	r23, r25
    1778:	8a 1f       	adc	r24, r26
    177a:	91 1d       	adc	r25, r1
    177c:	a1 1d       	adc	r26, r1
    177e:	6a 0f       	add	r22, r26
    1780:	71 1d       	adc	r23, r1
    1782:	81 1d       	adc	r24, r1
    1784:	91 1d       	adc	r25, r1
    1786:	a1 1d       	adc	r26, r1
    1788:	20 d0       	rcall	.+64     	; 0x17ca <__ultoa_invert+0x84>
    178a:	09 f4       	brne	.+2      	; 0x178e <__ultoa_invert+0x48>
    178c:	68 94       	set
    178e:	3f 91       	pop	r19
    1790:	2a e0       	ldi	r18, 0x0A	; 10
    1792:	26 9f       	mul	r18, r22
    1794:	11 24       	eor	r1, r1
    1796:	30 19       	sub	r19, r0
    1798:	30 5d       	subi	r19, 0xD0	; 208
    179a:	31 93       	st	Z+, r19
    179c:	de f6       	brtc	.-74     	; 0x1754 <__ultoa_invert+0xe>
    179e:	cf 01       	movw	r24, r30
    17a0:	08 95       	ret
    17a2:	46 2f       	mov	r20, r22
    17a4:	47 70       	andi	r20, 0x07	; 7
    17a6:	40 5d       	subi	r20, 0xD0	; 208
    17a8:	41 93       	st	Z+, r20
    17aa:	b3 e0       	ldi	r27, 0x03	; 3
    17ac:	0f d0       	rcall	.+30     	; 0x17cc <__ultoa_invert+0x86>
    17ae:	c9 f7       	brne	.-14     	; 0x17a2 <__ultoa_invert+0x5c>
    17b0:	f6 cf       	rjmp	.-20     	; 0x179e <__ultoa_invert+0x58>
    17b2:	46 2f       	mov	r20, r22
    17b4:	4f 70       	andi	r20, 0x0F	; 15
    17b6:	40 5d       	subi	r20, 0xD0	; 208
    17b8:	4a 33       	cpi	r20, 0x3A	; 58
    17ba:	18 f0       	brcs	.+6      	; 0x17c2 <__ultoa_invert+0x7c>
    17bc:	49 5d       	subi	r20, 0xD9	; 217
    17be:	31 fd       	sbrc	r19, 1
    17c0:	40 52       	subi	r20, 0x20	; 32
    17c2:	41 93       	st	Z+, r20
    17c4:	02 d0       	rcall	.+4      	; 0x17ca <__ultoa_invert+0x84>
    17c6:	a9 f7       	brne	.-22     	; 0x17b2 <__ultoa_invert+0x6c>
    17c8:	ea cf       	rjmp	.-44     	; 0x179e <__ultoa_invert+0x58>
    17ca:	b4 e0       	ldi	r27, 0x04	; 4
    17cc:	a6 95       	lsr	r26
    17ce:	97 95       	ror	r25
    17d0:	87 95       	ror	r24
    17d2:	77 95       	ror	r23
    17d4:	67 95       	ror	r22
    17d6:	ba 95       	dec	r27
    17d8:	c9 f7       	brne	.-14     	; 0x17cc <__ultoa_invert+0x86>
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	61 05       	cpc	r22, r1
    17de:	71 05       	cpc	r23, r1
    17e0:	08 95       	ret
    17e2:	9b 01       	movw	r18, r22
    17e4:	ac 01       	movw	r20, r24
    17e6:	0a 2e       	mov	r0, r26
    17e8:	06 94       	lsr	r0
    17ea:	57 95       	ror	r21
    17ec:	47 95       	ror	r20
    17ee:	37 95       	ror	r19
    17f0:	27 95       	ror	r18
    17f2:	ba 95       	dec	r27
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__ultoa_invert+0xa2>
    17f6:	62 0f       	add	r22, r18
    17f8:	73 1f       	adc	r23, r19
    17fa:	84 1f       	adc	r24, r20
    17fc:	95 1f       	adc	r25, r21
    17fe:	a0 1d       	adc	r26, r0
    1800:	08 95       	ret

00001802 <__prologue_saves__>:
    1802:	2f 92       	push	r2
    1804:	3f 92       	push	r3
    1806:	4f 92       	push	r4
    1808:	5f 92       	push	r5
    180a:	6f 92       	push	r6
    180c:	7f 92       	push	r7
    180e:	8f 92       	push	r8
    1810:	9f 92       	push	r9
    1812:	af 92       	push	r10
    1814:	bf 92       	push	r11
    1816:	cf 92       	push	r12
    1818:	df 92       	push	r13
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	ca 1b       	sub	r28, r26
    182c:	db 0b       	sbc	r29, r27
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	09 94       	ijmp

0000183a <__epilogue_restores__>:
    183a:	2a 88       	ldd	r2, Y+18	; 0x12
    183c:	39 88       	ldd	r3, Y+17	; 0x11
    183e:	48 88       	ldd	r4, Y+16	; 0x10
    1840:	5f 84       	ldd	r5, Y+15	; 0x0f
    1842:	6e 84       	ldd	r6, Y+14	; 0x0e
    1844:	7d 84       	ldd	r7, Y+13	; 0x0d
    1846:	8c 84       	ldd	r8, Y+12	; 0x0c
    1848:	9b 84       	ldd	r9, Y+11	; 0x0b
    184a:	aa 84       	ldd	r10, Y+10	; 0x0a
    184c:	b9 84       	ldd	r11, Y+9	; 0x09
    184e:	c8 84       	ldd	r12, Y+8	; 0x08
    1850:	df 80       	ldd	r13, Y+7	; 0x07
    1852:	ee 80       	ldd	r14, Y+6	; 0x06
    1854:	fd 80       	ldd	r15, Y+5	; 0x05
    1856:	0c 81       	ldd	r16, Y+4	; 0x04
    1858:	1b 81       	ldd	r17, Y+3	; 0x03
    185a:	aa 81       	ldd	r26, Y+2	; 0x02
    185c:	b9 81       	ldd	r27, Y+1	; 0x01
    185e:	ce 0f       	add	r28, r30
    1860:	d1 1d       	adc	r29, r1
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	ed 01       	movw	r28, r26
    186e:	08 95       	ret

00001870 <_exit>:
    1870:	f8 94       	cli

00001872 <__stop_program>:
    1872:	ff cf       	rjmp	.-2      	; 0x1872 <__stop_program>
