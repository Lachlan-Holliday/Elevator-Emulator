
CSSE2010_A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001228  000012bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001228  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  0080012e  0080012e  000012ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002177  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fde  00000000  00000000  0000376f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142a  00000000  00000000  0000474d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  00005b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b8a  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b8  00000000  00000000  00006d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00008222  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_5>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 b9 04 	jmp	0x972	; 0x972 <__vector_20>
      54:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_21>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	53 74       	andi	r21, 0x43	; 67
      7e:	75 64       	ori	r23, 0x45	; 69
      80:	65 6e       	ori	r22, 0xE5	; 229
      82:	74 20       	and	r7, r4
      84:	4e 75       	andi	r20, 0x5E	; 94
      86:	6d 62       	ori	r22, 0x2D	; 45
      88:	65 72       	andi	r22, 0x25	; 37
      8a:	3a 20       	and	r3, r10
      8c:	34 38       	cpi	r19, 0x84	; 132
      8e:	38 34       	cpi	r19, 0x48	; 72
      90:	30 34       	cpi	r19, 0x40	; 64
      92:	36 38       	cpi	r19, 0x86	; 134
	...

00000095 <__c.2246>:
      95:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
      a5:	20 62 79 20 4c 61 63 68 6c 61 6e 20 48 6f 6c 6c      by Lachlan Holl
      b5:	69 64 61 79 00                                      iday.

000000ba <__c.2244>:
      ba:	45 6c 65 76 61 74 6f 72 20 43 6f 6e 74 72 6f 6c     Elevator Control
      ca:	6c 65 72 00                                         ler.

000000ce <__c.2040>:
      ce:	1b 5b 32 4a 00                                      .[2J.

000000d3 <__c.2025>:
      d3:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e8 e2       	ldi	r30, 0x28	; 40
      f0:	f2 e1       	ldi	r31, 0x12	; 18
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	ae 32       	cpi	r26, 0x2E	; 46
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	22 e0       	ldi	r18, 0x02	; 2
     100:	ae e2       	ldi	r26, 0x2E	; 46
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	aa 35       	cpi	r26, 0x5A	; 90
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <main>
     112:	0c 94 12 09 	jmp	0x1224	; 0x1224 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     11a:	e8 e6       	ldi	r30, 0x68	; 104
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	82 60       	ori	r24, 0x02	; 2
     122:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     124:	8b b3       	in	r24, 0x1b	; 27
     126:	82 60       	ori	r24, 0x02	; 2
     128:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     12a:	ec e6       	ldi	r30, 0x6C	; 108
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	8f 60       	ori	r24, 0x0F	; 15
     132:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     134:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
     138:	08 95       	ret

0000013a <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     13a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     13e:	18 16       	cp	r1, r24
     140:	14 f5       	brge	.+68     	; 0x186 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     142:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     146:	6f b7       	in	r22, 0x3f	; 63
		cli();
     148:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	09 c0       	rjmp	.+18     	; 0x160 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     14e:	f9 01       	movw	r30, r18
     150:	e1 5d       	subi	r30, 0xD1	; 209
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	40 81       	ld	r20, Z
     156:	f9 01       	movw	r30, r18
     158:	e2 5d       	subi	r30, 0xD2	; 210
     15a:	fe 4f       	sbci	r31, 0xFE	; 254
     15c:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     15e:	9f 5f       	subi	r25, 0xFF	; 255
     160:	29 2f       	mov	r18, r25
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <__data_end>
     168:	04 2e       	mov	r0, r20
     16a:	00 0c       	add	r0, r0
     16c:	55 0b       	sbc	r21, r21
     16e:	24 17       	cp	r18, r20
     170:	35 07       	cpc	r19, r21
     172:	6c f3       	brlt	.-38     	; 0x14e <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     174:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
     178:	91 50       	subi	r25, 0x01	; 1
     17a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <__data_end>
		
		if(interrupts_were_enabled) {
     17e:	66 23       	and	r22, r22
     180:	1c f4       	brge	.+6      	; 0x188 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     182:	78 94       	sei
     184:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     186:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     188:	08 95       	ret

0000018a <__vector_5>:


// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	8f 93       	push	r24
     19c:	9f 93       	push	r25
     19e:	ef 93       	push	r30
     1a0:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1a2:	43 b1       	in	r20, 0x03	; 3
     1a4:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	26 c0       	rjmp	.+76     	; 0x1f6 <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     1aa:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
     1ae:	94 30       	cpi	r25, 0x04	; 4
     1b0:	0c f5       	brge	.+66     	; 0x1f4 <__vector_5+0x6a>
     1b2:	24 2f       	mov	r18, r20
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	08 2e       	mov	r0, r24
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_5+0x34>
     1ba:	35 95       	asr	r19
     1bc:	27 95       	ror	r18
     1be:	0a 94       	dec	r0
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <__vector_5+0x30>
     1c2:	20 ff       	sbrs	r18, 0
     1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <__vector_5+0x6a>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     1c6:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <last_button_state>
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	08 2e       	mov	r0, r24
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_5+0x4a>
     1d0:	35 95       	asr	r19
     1d2:	27 95       	ror	r18
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     1d8:	20 fd       	sbrc	r18, 0
     1da:	0c c0       	rjmp	.+24     	; 0x1f4 <__vector_5+0x6a>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     1dc:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <__data_end>
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	9e 0f       	add	r25, r30
     1e4:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <__data_end>
     1e8:	0e 2e       	mov	r0, r30
     1ea:	00 0c       	add	r0, r0
     1ec:	ff 0b       	sbc	r31, r31
     1ee:	e1 5d       	subi	r30, 0xD1	; 209
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1f4:	8f 5f       	subi	r24, 0xFF	; 255
     1f6:	84 30       	cpi	r24, 0x04	; 4
     1f8:	c0 f2       	brcs	.-80     	; 0x1aa <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     1fa:	40 93 33 01 	sts	0x0133, r20	; 0x800133 <last_button_state>
}
     1fe:	ff 91       	pop	r31
     200:	ef 91       	pop	r30
     202:	9f 91       	pop	r25
     204:	8f 91       	pop	r24
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
     210:	0f 90       	pop	r0
     212:	1f 90       	pop	r1
     214:	18 95       	reti

00000216 <initialise_display>:
	(1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0) | (0<<8)
	};

void initialise_display(void) {
	// clear the LED matrix
	ledmatrix_clear();
     216:	0e 94 ba 03 	call	0x774	; 0x774 <ledmatrix_clear>
     21a:	08 95       	ret

0000021c <start_display>:
}

void start_display(void) {
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	28 97       	sbiw	r28, 0x08	; 8
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     232:	0e 94 ba 03 	call	0x774	; 0x774 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     236:	10 e0       	ldi	r17, 0x00	; 0
     238:	2c c0       	rjmp	.+88     	; 0x292 <start_display+0x76>
		col_data = elevator_display[col];
     23a:	e1 2f       	mov	r30, r17
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	e2 5f       	subi	r30, 0xF2	; 242
     244:	fe 4f       	sbci	r31, 0xFE	; 254
     246:	20 81       	ld	r18, Z
     248:	31 81       	ldd	r19, Z+1	; 0x01
		// using the 9th bit as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x0100) {
     24a:	30 ff       	sbrs	r19, 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <start_display+0x36>
			colour = COLOUR_RED;
     24e:	9f e0       	ldi	r25, 0x0F	; 15
     250:	01 c0       	rjmp	.+2      	; 0x254 <start_display+0x38>
		} else {
			colour = COLOUR_GREEN;
     252:	90 ef       	ldi	r25, 0xF0	; 240
		}
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	14 c0       	rjmp	.+40     	; 0x280 <start_display+0x64>
			if(col_data & 0x01) {
     258:	20 ff       	sbrs	r18, 0
     25a:	08 c0       	rjmp	.+16     	; 0x26c <start_display+0x50>
				column_colour_data[i] = colour;
     25c:	e1 e0       	ldi	r30, 0x01	; 1
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	ec 0f       	add	r30, r28
     262:	fd 1f       	adc	r31, r29
     264:	e8 0f       	add	r30, r24
     266:	f1 1d       	adc	r31, r1
     268:	90 83       	st	Z, r25
     26a:	07 c0       	rjmp	.+14     	; 0x27a <start_display+0x5e>
				} else {
				column_colour_data[i] = 0;
     26c:	e1 e0       	ldi	r30, 0x01	; 1
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ec 0f       	add	r30, r28
     272:	fd 1f       	adc	r31, r29
     274:	e8 0f       	add	r30, r24
     276:	f1 1d       	adc	r31, r1
     278:	10 82       	st	Z, r1
			}
			col_data >>= 1;
     27a:	36 95       	lsr	r19
     27c:	27 95       	ror	r18
			colour = COLOUR_RED;
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	88 30       	cpi	r24, 0x08	; 8
     282:	50 f3       	brcs	.-44     	; 0x258 <start_display+0x3c>
				column_colour_data[i] = 0;
			}
			col_data >>= 1;
		}
		//column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
     284:	be 01       	movw	r22, r28
     286:	6f 5f       	subi	r22, 0xFF	; 255
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	81 2f       	mov	r24, r17
     28c:	0e 94 9d 03 	call	0x73a	; 0x73a <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     290:	1f 5f       	subi	r17, 0xFF	; 255
     292:	10 31       	cpi	r17, 0x10	; 16
     294:	90 f2       	brcs	.-92     	; 0x23a <start_display+0x1e>
		}
		//column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
	
}
     296:	28 96       	adiw	r28, 0x08	; 8
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <start_display_animation>:

void start_display_animation(uint8_t frame) {
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	28 97       	sbiw	r28, 0x08	; 8
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	08 2f       	mov	r16, r24
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
     2c4:	19 e0       	ldi	r17, 0x09	; 9
     2c6:	3a c0       	rjmp	.+116    	; 0x33c <start_display_animation+0x92>
		col_data = (1<<7)|(1<<(3-frame))|(1<<(4+frame))|(1<<0);
     2c8:	40 2f       	mov	r20, r16
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	23 e0       	ldi	r18, 0x03	; 3
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	24 1b       	sub	r18, r20
     2d2:	35 0b       	sbc	r19, r21
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <start_display_animation+0x36>
     2dc:	66 0f       	add	r22, r22
     2de:	77 1f       	adc	r23, r23
     2e0:	2a 95       	dec	r18
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <start_display_animation+0x32>
     2e4:	9b 01       	movw	r18, r22
     2e6:	20 68       	ori	r18, 0x80	; 128
     2e8:	4c 5f       	subi	r20, 0xFC	; 252
     2ea:	5f 4f       	sbci	r21, 0xFF	; 255
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <start_display_animation+0x48>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	4a 95       	dec	r20
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <start_display_animation+0x44>
     2f6:	28 2b       	or	r18, r24
     2f8:	39 2b       	or	r19, r25
     2fa:	21 60       	ori	r18, 0x01	; 1
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	15 c0       	rjmp	.+42     	; 0x32a <start_display_animation+0x80>
			if(col_data & 0x01) {
     300:	20 ff       	sbrs	r18, 0
     302:	09 c0       	rjmp	.+18     	; 0x316 <start_display_animation+0x6c>
				column_colour_data[i] = COLOUR_GREEN;
     304:	e1 e0       	ldi	r30, 0x01	; 1
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ec 0f       	add	r30, r28
     30a:	fd 1f       	adc	r31, r29
     30c:	e8 0f       	add	r30, r24
     30e:	f1 1d       	adc	r31, r1
     310:	90 ef       	ldi	r25, 0xF0	; 240
     312:	90 83       	st	Z, r25
     314:	07 c0       	rjmp	.+14     	; 0x324 <start_display_animation+0x7a>
				} else {
				column_colour_data[i] = 0;
     316:	e1 e0       	ldi	r30, 0x01	; 1
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ec 0f       	add	r30, r28
     31c:	fd 1f       	adc	r31, r29
     31e:	e8 0f       	add	r30, r24
     320:	f1 1d       	adc	r31, r1
     322:	10 82       	st	Z, r1
			}
			col_data >>= 1;
     324:	36 95       	lsr	r19
     326:	27 95       	ror	r18
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
		col_data = (1<<7)|(1<<(3-frame))|(1<<(4+frame))|(1<<0);
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	88 30       	cpi	r24, 0x08	; 8
     32c:	48 f3       	brcs	.-46     	; 0x300 <start_display_animation+0x56>
				} else {
				column_colour_data[i] = 0;
			}
			col_data >>= 1;
		}
		ledmatrix_update_column(col, column_colour_data);
     32e:	be 01       	movw	r22, r28
     330:	6f 5f       	subi	r22, 0xFF	; 255
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	81 2f       	mov	r24, r17
     336:	0e 94 9d 03 	call	0x73a	; 0x73a <ledmatrix_update_column>
void start_display_animation(uint8_t frame) {
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
     33a:	1f 5f       	subi	r17, 0xFF	; 255
     33c:	1f 30       	cpi	r17, 0x0F	; 15
     33e:	20 f2       	brcs	.-120    	; 0x2c8 <start_display_animation+0x1e>
			}
			col_data >>= 1;
		}
		ledmatrix_update_column(col, column_colour_data);
	}
}
     340:	28 96       	adiw	r28, 0x08	; 8
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	08 95       	ret

00000356 <update_square_colour>:
 */
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	
	// first check that this is a square within the game field
	// if outside the game field, don't update anything
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
     356:	88 30       	cpi	r24, 0x08	; 8
     358:	08 f5       	brcc	.+66     	; 0x39c <update_square_colour+0x46>
     35a:	60 31       	cpi	r22, 0x10	; 16
     35c:	f8 f4       	brcc	.+62     	; 0x39c <update_square_colour+0x46>
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;

	if (object == ELEVATOR) {
     35e:	41 30       	cpi	r20, 0x01	; 1
     360:	61 f0       	breq	.+24     	; 0x37a <update_square_colour+0x24>
		colour = MATRIX_COLOUR_ELEVATOR;
	} else if (object == FLOOR) {
     362:	42 30       	cpi	r20, 0x02	; 2
     364:	61 f0       	breq	.+24     	; 0x37e <update_square_colour+0x28>
		colour = MATRIX_COLOUR_FLOOR;
	} else if (object == TRAVELLER_TO_0) {
     366:	43 30       	cpi	r20, 0x03	; 3
     368:	61 f0       	breq	.+24     	; 0x382 <update_square_colour+0x2c>
		colour = MATRIX_COLOUR_TRAVELLER_0;
	} else if (object == TRAVELLER_TO_1) {
     36a:	44 30       	cpi	r20, 0x04	; 4
     36c:	61 f0       	breq	.+24     	; 0x386 <update_square_colour+0x30>
	colour = MATRIX_COLOUR_TRAVELLER_1;
	} else if (object == TRAVELLER_TO_2) {
     36e:	45 30       	cpi	r20, 0x05	; 5
     370:	61 f0       	breq	.+24     	; 0x38a <update_square_colour+0x34>
	colour = MATRIX_COLOUR_TRAVELLER_2;
	} else if (object == TRAVELLER_TO_3) {
     372:	46 30       	cpi	r20, 0x06	; 6
     374:	61 f4       	brne	.+24     	; 0x38e <update_square_colour+0x38>
	colour = MATRIX_COLOUR_TRAVELLER_3;
     376:	43 e1       	ldi	r20, 0x13	; 19
     378:	0b c0       	rjmp	.+22     	; 0x390 <update_square_colour+0x3a>
	
	// determine which colour corresponds to this object
	PixelColour colour;

	if (object == ELEVATOR) {
		colour = MATRIX_COLOUR_ELEVATOR;
     37a:	4f e0       	ldi	r20, 0x0F	; 15
     37c:	09 c0       	rjmp	.+18     	; 0x390 <update_square_colour+0x3a>
	} else if (object == FLOOR) {
		colour = MATRIX_COLOUR_FLOOR;
     37e:	40 ef       	ldi	r20, 0xF0	; 240
     380:	07 c0       	rjmp	.+14     	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_0) {
		colour = MATRIX_COLOUR_TRAVELLER_0;
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	05 c0       	rjmp	.+10     	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_1) {
	colour = MATRIX_COLOUR_TRAVELLER_1;
     386:	41 e1       	ldi	r20, 0x11	; 17
     388:	03 c0       	rjmp	.+6      	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_2) {
	colour = MATRIX_COLOUR_TRAVELLER_2;
     38a:	45 e3       	ldi	r20, 0x35	; 53
     38c:	01 c0       	rjmp	.+2      	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_3) {
	colour = MATRIX_COLOUR_TRAVELLER_3;
	} else {
		// anything unexpected (or empty) will be black
		colour = MATRIX_COLOUR_EMPTY;
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	96 2f       	mov	r25, r22
     392:	68 2f       	mov	r22, r24
	/* x and y are swapped here because the ledmatrix.c code
	 * treats the matrix as being horizontal, while the elevator
	 * controller treats the matrix vertically. We also want x
	 * to be interpreted as from bottom to top, not top to bottom.
	 */
	ledmatrix_update_pixel(15 - y, x, colour); 
     394:	8f e0       	ldi	r24, 0x0F	; 15
     396:	89 1b       	sub	r24, r25
     398:	0e 94 7e 03 	call	0x6fc	; 0x6fc <ledmatrix_update_pixel>
     39c:	08 95       	ret

0000039e <initialise_hardware>:
 * @arg none
 * @retval none
*/
void initialise_hardware(void) {
	
	ledmatrix_setup();
     39e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <ledmatrix_setup>
	init_button_interrupts();
     3a2:	0e 94 8d 00 	call	0x11a	; 0x11a <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	7b e4       	ldi	r23, 0x4B	; 75
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 24 04 	call	0x848	; 0x848 <init_serial_stdio>
	
	init_timer0();
     3b4:	0e 94 58 05 	call	0xab0	; 0xab0 <init_timer0>
	
	// Turn on global interrupts
	sei();
     3b8:	78 94       	sei
     3ba:	08 95       	ret

000003bc <start_screen>:
/**
 * @brief Displays the "EC" start screen with elevator symbol
 * @arg none
 * @retval none
*/
void start_screen(void) {
     3bc:	8f 92       	push	r8
     3be:	9f 92       	push	r9
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     3d0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <clear_terminal>
	move_terminal_cursor(10,10);
     3d4:	6a e0       	ldi	r22, 0x0A	; 10
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <move_terminal_cursor>
	printf_P(PSTR("Elevator Controller"));
     3e0:	8a eb       	ldi	r24, 0xBA	; 186
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	9f 93       	push	r25
     3e6:	8f 93       	push	r24
     3e8:	0e 94 24 06 	call	0xc48	; 0xc48 <printf_P>
	move_terminal_cursor(10,12);
     3ec:	6c e0       	ldi	r22, 0x0C	; 12
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <move_terminal_cursor>
	printf_P(PSTR("CSSE2010 project by Lachlan Holliday"));
     3f8:	85 e9       	ldi	r24, 0x95	; 149
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	9f 93       	push	r25
     3fe:	8f 93       	push	r24
     400:	0e 94 24 06 	call	0xc48	; 0xc48 <printf_P>
	move_terminal_cursor(10,14);
     404:	6e e0       	ldi	r22, 0x0E	; 14
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	8a e0       	ldi	r24, 0x0A	; 10
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <move_terminal_cursor>
	printf_P(PSTR("Student Number: 48840468"));
     410:	8c e7       	ldi	r24, 0x7C	; 124
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	0e 94 24 06 	call	0xc48	; 0xc48 <printf_P>
	
	// Show start screen
	start_display();
     41c:	0e 94 0e 01 	call	0x21c	; 0x21c <start_display>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
	
	// Animation variables
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
	uint8_t frame = 0;
	uint8_t doors_opening_closing = 1; // 1 => opening, 0 => closing
     42c:	d1 e0       	ldi	r29, 0x01	; 1
	start_display();
	
	// Animation variables
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
	uint8_t frame = 0;
     42e:	c0 e0       	ldi	r28, 0x00	; 0
	// Show start screen
	start_display();
	
	// Animation variables
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
     430:	0f 2e       	mov	r0, r31
     432:	f6 e9       	ldi	r31, 0x96	; 150
     434:	8f 2e       	mov	r8, r31
     436:	91 2c       	mov	r9, r1
     438:	a1 2c       	mov	r10, r1
     43a:	b1 2c       	mov	r11, r1
     43c:	f0 2d       	mov	r31, r0
	
	// Show start screen
	start_display();
	
	// Animation variables
	uint32_t doors_frame_time = 0;
     43e:	c1 2c       	mov	r12, r1
     440:	d1 2c       	mov	r13, r1
     442:	76 01       	movw	r14, r12
	// Wait until a button is pressed, or 's' is pressed on the terminal
	while(1) {
		
		// Don't worry about this if/else tree. Its purely for animating
		// the elevator doors on the start screen
		if (get_current_time() - doors_frame_time  > interval_delay) {
     444:	0e 94 70 05 	call	0xae0	; 0xae0 <get_current_time>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	8c 19       	sub	r24, r12
     44e:	9d 09       	sbc	r25, r13
     450:	ae 09       	sbc	r26, r14
     452:	bf 09       	sbc	r27, r15
     454:	88 16       	cp	r8, r24
     456:	99 06       	cpc	r9, r25
     458:	aa 06       	cpc	r10, r26
     45a:	bb 06       	cpc	r11, r27
     45c:	c0 f5       	brcc	.+112    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			start_display_animation(frame);
     45e:	8c 2f       	mov	r24, r28
     460:	0e 94 55 01 	call	0x2aa	; 0x2aa <start_display_animation>
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
     464:	0e 94 70 05 	call	0xae0	; 0xae0 <get_current_time>
     468:	6b 01       	movw	r12, r22
     46a:	7c 01       	movw	r14, r24
			if (doors_opening_closing) {
     46c:	dd 23       	and	r29, r29
     46e:	b1 f0       	breq	.+44     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
				interval_delay = 150;
				frame++;
     470:	cf 5f       	subi	r28, 0xFF	; 255
				if (frame == 1) interval_delay = 2000;
     472:	c1 30       	cpi	r28, 0x01	; 1
     474:	41 f0       	breq	.+16     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		// the elevator doors on the start screen
		if (get_current_time() - doors_frame_time  > interval_delay) {
			start_display_animation(frame);
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
			if (doors_opening_closing) {
				interval_delay = 150;
     476:	0f 2e       	mov	r0, r31
     478:	f6 e9       	ldi	r31, 0x96	; 150
     47a:	8f 2e       	mov	r8, r31
     47c:	91 2c       	mov	r9, r1
     47e:	a1 2c       	mov	r10, r1
     480:	b1 2c       	mov	r11, r1
     482:	f0 2d       	mov	r31, r0
     484:	08 c0       	rjmp	.+16     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
				frame++;
				if (frame == 1) interval_delay = 2000;
     486:	0f 2e       	mov	r0, r31
     488:	f0 ed       	ldi	r31, 0xD0	; 208
     48a:	8f 2e       	mov	r8, r31
     48c:	f7 e0       	ldi	r31, 0x07	; 7
     48e:	9f 2e       	mov	r9, r31
     490:	a1 2c       	mov	r10, r1
     492:	b1 2c       	mov	r11, r1
     494:	f0 2d       	mov	r31, r0
				if (frame == 3) doors_opening_closing = 0;
     496:	c3 30       	cpi	r28, 0x03	; 3
     498:	d1 f4       	brne	.+52     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     49a:	16 c0       	rjmp	.+44     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
			} else {
				interval_delay = 150;
				frame--;
     49c:	c1 50       	subi	r28, 0x01	; 1
				if (frame == 2) interval_delay = 500;
     49e:	c2 30       	cpi	r28, 0x02	; 2
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
				interval_delay = 150;
				frame++;
				if (frame == 1) interval_delay = 2000;
				if (frame == 3) doors_opening_closing = 0;
			} else {
				interval_delay = 150;
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f6 e9       	ldi	r31, 0x96	; 150
     4a6:	8f 2e       	mov	r8, r31
     4a8:	91 2c       	mov	r9, r1
     4aa:	a1 2c       	mov	r10, r1
     4ac:	b1 2c       	mov	r11, r1
     4ae:	f0 2d       	mov	r31, r0
     4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				frame--;
				if (frame == 2) interval_delay = 500;
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f4 ef       	ldi	r31, 0xF4	; 244
     4b6:	8f 2e       	mov	r8, r31
     4b8:	99 24       	eor	r9, r9
     4ba:	93 94       	inc	r9
     4bc:	a1 2c       	mov	r10, r1
     4be:	b1 2c       	mov	r11, r1
     4c0:	f0 2d       	mov	r31, r0
				if (frame == 0) doors_opening_closing = 1;
     4c2:	cc 23       	and	r28, r28
     4c4:	19 f0       	breq	.+6      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
			if (doors_opening_closing) {
				interval_delay = 150;
				frame++;
				if (frame == 1) interval_delay = 2000;
				if (frame == 3) doors_opening_closing = 0;
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			} else {
				interval_delay = 150;
				frame--;
				if (frame == 2) interval_delay = 500;
				if (frame == 0) doors_opening_closing = 1;
     4cc:	d1 e0       	ldi	r29, 0x01	; 1
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     4ce:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <serial_input_available>
     4d2:	88 23       	and	r24, r24
     4d4:	39 f0       	breq	.+14     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			serial_input = fgetc(stdin);
     4d6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__iob>
     4da:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__iob+0x1>
     4de:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fgetc>
     4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     4e6:	83 37       	cpi	r24, 0x73	; 115
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     4ea:	83 35       	cpi	r24, 0x53	; 83
     4ec:	29 f0       	breq	.+10     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     4ee:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     4f2:	8f 3f       	cpi	r24, 0xFF	; 255
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     4f6:	a6 cf       	rjmp	.-180    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			break;
		}
	}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	bf 90       	pop	r11
     506:	af 90       	pop	r10
     508:	9f 90       	pop	r9
     50a:	8f 90       	pop	r8
     50c:	08 95       	ret

0000050e <draw_floors>:
/**
 * @brief Draws 4 lines of "FLOOR" coloured pixels
 * @arg none
 * @retval none
*/
void draw_floors(void) {
     50e:	cf 93       	push	r28
	for (uint8_t i = 0; i < WIDTH; i++) {
     510:	c0 e0       	ldi	r28, 0x00	; 0
     512:	15 c0       	rjmp	.+42     	; 0x53e <draw_floors+0x30>
		update_square_colour(i, FLOOR_0, FLOOR);
     514:	42 e0       	ldi	r20, 0x02	; 2
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	8c 2f       	mov	r24, r28
     51a:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_1, FLOOR);
     51e:	42 e0       	ldi	r20, 0x02	; 2
     520:	64 e0       	ldi	r22, 0x04	; 4
     522:	8c 2f       	mov	r24, r28
     524:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_2, FLOOR);
     528:	42 e0       	ldi	r20, 0x02	; 2
     52a:	68 e0       	ldi	r22, 0x08	; 8
     52c:	8c 2f       	mov	r24, r28
     52e:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_3, FLOOR);
     532:	42 e0       	ldi	r20, 0x02	; 2
     534:	6c e0       	ldi	r22, 0x0C	; 12
     536:	8c 2f       	mov	r24, r28
     538:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
 * @brief Draws 4 lines of "FLOOR" coloured pixels
 * @arg none
 * @retval none
*/
void draw_floors(void) {
	for (uint8_t i = 0; i < WIDTH; i++) {
     53c:	cf 5f       	subi	r28, 0xFF	; 255
     53e:	c8 30       	cpi	r28, 0x08	; 8
     540:	48 f3       	brcs	.-46     	; 0x514 <draw_floors+0x6>
		update_square_colour(i, FLOOR_0, FLOOR);
		update_square_colour(i, FLOOR_1, FLOOR);
		update_square_colour(i, FLOOR_2, FLOOR);
		update_square_colour(i, FLOOR_3, FLOOR);
	}
}
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <draw_elevator>:
/**
 * @brief Draws the elevator at the current_position
 * @arg none
 * @retval none
*/
void draw_elevator(void) {
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	static uint8_t old_position; // static variables maintain their value, every time the function is called
	
	int8_t y = 0; // Height position to draw elevator (i.e. y axis)
	
	// Clear where the elevator was
	if (old_position > current_position) { // Elevator going down - clear above
     54a:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <old_position.2272>
     54e:	26 2f       	mov	r18, r22
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <current_position>
     556:	08 2e       	mov	r0, r24
     558:	00 0c       	add	r0, r0
     55a:	99 0b       	sbc	r25, r25
     55c:	82 17       	cp	r24, r18
     55e:	93 07       	cpc	r25, r19
     560:	1c f4       	brge	.+6      	; 0x568 <draw_elevator+0x22>
		y = old_position + 3;
     562:	c3 e0       	ldi	r28, 0x03	; 3
     564:	c6 0f       	add	r28, r22
     566:	07 c0       	rjmp	.+14     	; 0x576 <draw_elevator+0x30>
		} else if (old_position < current_position) { // Elevator going up - clear below
     568:	28 17       	cp	r18, r24
     56a:	39 07       	cpc	r19, r25
     56c:	1c f4       	brge	.+6      	; 0x574 <draw_elevator+0x2e>
		y = old_position + 1;
     56e:	c1 e0       	ldi	r28, 0x01	; 1
     570:	c6 0f       	add	r28, r22
     572:	01 c0       	rjmp	.+2      	; 0x576 <draw_elevator+0x30>
void draw_elevator(void) {
	
	// Store where it used to be with old_position
	static uint8_t old_position; // static variables maintain their value, every time the function is called
	
	int8_t y = 0; // Height position to draw elevator (i.e. y axis)
     574:	c0 e0       	ldi	r28, 0x00	; 0
	if (old_position > current_position) { // Elevator going down - clear above
		y = old_position + 3;
		} else if (old_position < current_position) { // Elevator going up - clear below
		y = old_position + 1;
	}
	if (y % 4 != 0) { // Do not draw over the floor's LEDs
     576:	8c 2f       	mov	r24, r28
     578:	83 70       	andi	r24, 0x03	; 3
     57a:	51 f0       	breq	.+20     	; 0x590 <draw_elevator+0x4a>
		update_square_colour(1, y, EMPTY_SQUARE);
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	6c 2f       	mov	r22, r28
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(2, y, EMPTY_SQUARE);
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	6c 2f       	mov	r22, r28
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
	}
	old_position = current_position;
     590:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <current_position>
     594:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <old_position.2272>
	
	// Draw a 2x3 block representing the elevator
	for (uint8_t i = 1; i <= 3; i++) { // 3 is the height of the elevator sprite on the LED matrix
     598:	c1 e0       	ldi	r28, 0x01	; 1
     59a:	11 c0       	rjmp	.+34     	; 0x5be <draw_elevator+0x78>
		y = current_position + i; // Adds current floor position to i=1->3 to draw elevator as 3-high block
     59c:	d0 91 3f 01 	lds	r29, 0x013F	; 0x80013f <current_position>
     5a0:	dc 0f       	add	r29, r28
		if (y % 4 != 0) { // Do not draw on the floor
     5a2:	8d 2f       	mov	r24, r29
     5a4:	83 70       	andi	r24, 0x03	; 3
     5a6:	51 f0       	breq	.+20     	; 0x5bc <draw_elevator+0x76>
			update_square_colour(1, y, ELEVATOR);
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	6d 2f       	mov	r22, r29
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
			update_square_colour(2, y, ELEVATOR); // Elevator is 2 LEDs wide so draw twice
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	6d 2f       	mov	r22, r29
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(2, y, EMPTY_SQUARE);
	}
	old_position = current_position;
	
	// Draw a 2x3 block representing the elevator
	for (uint8_t i = 1; i <= 3; i++) { // 3 is the height of the elevator sprite on the LED matrix
     5bc:	cf 5f       	subi	r28, 0xFF	; 255
     5be:	c4 30       	cpi	r28, 0x04	; 4
     5c0:	68 f3       	brcs	.-38     	; 0x59c <draw_elevator+0x56>
		if (y % 4 != 0) { // Do not draw on the floor
			update_square_colour(1, y, ELEVATOR);
			update_square_colour(2, y, ELEVATOR); // Elevator is 2 LEDs wide so draw twice
		}
	}
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <handle_inputs>:
		with the particular button that was pressed.
	
	*/
	
	// We need to check if any button has been pushed
	uint8_t btn = button_pushed();
     5c8:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
	
	if (btn == BUTTON0_PUSHED) {
     5cc:	81 11       	cpse	r24, r1
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <handle_inputs+0xe>
		// Move to Floor 0
		destination = FLOOR_0;
     5d0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <destination>
     5d4:	11 c0       	rjmp	.+34     	; 0x5f8 <handle_inputs+0x30>
	} else if (btn == BUTTON1_PUSHED) {
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	21 f4       	brne	.+8      	; 0x5e2 <handle_inputs+0x1a>
		// Move to Floor 1
		destination = FLOOR_1;
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <destination>
     5e0:	0b c0       	rjmp	.+22     	; 0x5f8 <handle_inputs+0x30>
	} else if (btn == BUTTON2_PUSHED) {
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	21 f4       	brne	.+8      	; 0x5ee <handle_inputs+0x26>
		// Move to Floor 2
		destination = FLOOR_2;
     5e6:	88 e0       	ldi	r24, 0x08	; 8
     5e8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <destination>
     5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <handle_inputs+0x30>
	
	} else if (btn == BUTTON3_PUSHED) {
     5ee:	83 30       	cpi	r24, 0x03	; 3
     5f0:	19 f4       	brne	.+6      	; 0x5f8 <handle_inputs+0x30>
		// Move to Floor 3
		destination = FLOOR_3;
     5f2:	8c e0       	ldi	r24, 0x0C	; 12
     5f4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <destination>
	// Check for if a '0, 1, 2, 3' is pressed
	// There are two steps to this
	// 1) collect any serial input (if available)
	// 2) check if the input is equal to the character 's'
	char serial_input = -1;
	if (serial_input_available()) {
     5f8:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <serial_input_available>
     5fc:	88 23       	and	r24, r24
     5fe:	39 f0       	breq	.+14     	; 0x60e <handle_inputs+0x46>
		serial_input = fgetc(stdin);
     600:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__iob>
     604:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__iob+0x1>
     608:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fgetc>
     60c:	01 c0       	rjmp	.+2      	; 0x610 <handle_inputs+0x48>
	
	// Check for if a '0, 1, 2, 3' is pressed
	// There are two steps to this
	// 1) collect any serial input (if available)
	// 2) check if the input is equal to the character 's'
	char serial_input = -1;
     60e:	8f ef       	ldi	r24, 0xFF	; 255
	if (serial_input_available()) {
		serial_input = fgetc(stdin);
	}
	// If the serial input is 's', then exit the start screen
	if (serial_input == '0') {
     610:	80 33       	cpi	r24, 0x30	; 48
     612:	19 f4       	brne	.+6      	; 0x61a <handle_inputs+0x52>
		destination = FLOOR_0;
     614:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <destination>
     618:	08 95       	ret
	} else if (serial_input == '1') {
     61a:	81 33       	cpi	r24, 0x31	; 49
     61c:	21 f4       	brne	.+8      	; 0x626 <handle_inputs+0x5e>
		destination = FLOOR_1;
     61e:	84 e0       	ldi	r24, 0x04	; 4
     620:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <destination>
     624:	08 95       	ret
	} else if (serial_input == '2') {
     626:	82 33       	cpi	r24, 0x32	; 50
     628:	21 f4       	brne	.+8      	; 0x632 <handle_inputs+0x6a>
		destination = FLOOR_2;
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <destination>
     630:	08 95       	ret
	} else if (serial_input == '3') {
     632:	83 33       	cpi	r24, 0x33	; 51
     634:	19 f4       	brne	.+6      	; 0x63c <handle_inputs+0x74>
		destination = FLOOR_3;
     636:	8c e0       	ldi	r24, 0x0C	; 12
     638:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <destination>
     63c:	08 95       	ret

0000063e <start_elevator_emulator>:
 * @retval none
*/
void start_elevator_emulator(void) {
	
	// Clear the serial terminal
	clear_terminal();
     63e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <clear_terminal>
	
	// Initialise Display
	initialise_display();
     642:	0e 94 0b 01 	call	0x216	; 0x216 <initialise_display>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     646:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
	clear_serial_input_buffer();
     64a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <clear_serial_input_buffer>

	// Initialise local variables
	time_since_move = get_current_time();
     64e:	0e 94 70 05 	call	0xae0	; 0xae0 <get_current_time>
     652:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <time_since_move>
     656:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <time_since_move+0x1>
     65a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <time_since_move+0x2>
     65e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <time_since_move+0x3>
	
	// Draw the floors and elevator
	draw_elevator();
     662:	0e 94 a3 02 	call	0x546	; 0x546 <draw_elevator>
	draw_floors();
     666:	0e 94 87 02 	call	0x50e	; 0x50e <draw_floors>
	
	current_position = FLOOR_0;
     66a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <current_position>
	destination = FLOOR_0;
     66e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <destination>
	
	while(true) {
		
		// Only update the elevator every 200 ms
		if (get_current_time() - time_since_move > 200) {	
     672:	0e 94 70 05 	call	0xae0	; 0xae0 <get_current_time>
     676:	00 91 3a 01 	lds	r16, 0x013A	; 0x80013a <time_since_move>
     67a:	10 91 3b 01 	lds	r17, 0x013B	; 0x80013b <time_since_move+0x1>
     67e:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <time_since_move+0x2>
     682:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <time_since_move+0x3>
     686:	dc 01       	movw	r26, r24
     688:	cb 01       	movw	r24, r22
     68a:	80 1b       	sub	r24, r16
     68c:	91 0b       	sbc	r25, r17
     68e:	a2 0b       	sbc	r26, r18
     690:	b3 0b       	sbc	r27, r19
     692:	89 3c       	cpi	r24, 0xC9	; 201
     694:	91 05       	cpc	r25, r1
     696:	a1 05       	cpc	r26, r1
     698:	b1 05       	cpc	r27, r1
     69a:	18 f1       	brcs	.+70     	; 0x6e2 <start_elevator_emulator+0xa4>
			
			// Adjust the elevator based on where it needs to go
			if (destination - current_position > 0) { // Move up
     69c:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <current_position>
     6a0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <destination>
     6a4:	08 2e       	mov	r0, r24
     6a6:	00 0c       	add	r0, r0
     6a8:	99 0b       	sbc	r25, r25
     6aa:	82 1b       	sub	r24, r18
     6ac:	91 09       	sbc	r25, r1
     6ae:	27 fd       	sbrc	r18, 7
     6b0:	93 95       	inc	r25
     6b2:	18 16       	cp	r1, r24
     6b4:	19 06       	cpc	r1, r25
     6b6:	24 f4       	brge	.+8      	; 0x6c0 <start_elevator_emulator+0x82>
				current_position++;
     6b8:	2f 5f       	subi	r18, 0xFF	; 255
     6ba:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <current_position>
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <start_elevator_emulator+0x8c>
			} else if (destination - current_position < 0) { // Move down
     6c0:	99 23       	and	r25, r25
     6c2:	1c f4       	brge	.+6      	; 0x6ca <start_elevator_emulator+0x8c>
				current_position--;
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <current_position>
			}
			
			// As we have potentially changed the elevator position, lets redraw it
			draw_elevator();
     6ca:	0e 94 a3 02 	call	0x546	; 0x546 <draw_elevator>
			
			time_since_move = get_current_time(); // Reset delay until next movement update
     6ce:	0e 94 70 05 	call	0xae0	; 0xae0 <get_current_time>
     6d2:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <time_since_move>
     6d6:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <time_since_move+0x1>
     6da:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <time_since_move+0x2>
     6de:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <time_since_move+0x3>
		}
		
		// Handle any button or key inputs
		handle_inputs();
     6e2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <handle_inputs>
	}
     6e6:	c5 cf       	rjmp	.-118    	; 0x672 <start_elevator_emulator+0x34>

000006e8 <main>:
/* Main */

int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     6e8:	0e 94 cf 01 	call	0x39e	; 0x39e <initialise_hardware>
	
	// Show the splash screen message. Returns when display is complete
	start_screen();
     6ec:	0e 94 de 01 	call	0x3bc	; 0x3bc <start_screen>
	
	// Start elevator controller software
	start_elevator_emulator();
     6f0:	0e 94 1f 03 	call	0x63e	; 0x63e <start_elevator_emulator>

000006f4 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     6f4:	80 e8       	ldi	r24, 0x80	; 128
     6f6:	0e 94 0c 05 	call	0xa18	; 0xa18 <spi_setup_master>
     6fa:	08 95       	ret

000006fc <ledmatrix_update_pixel>:
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	80 31       	cpi	r24, 0x10	; 16
     704:	b0 f4       	brcc	.+44     	; 0x732 <ledmatrix_update_pixel+0x36>
     706:	68 30       	cpi	r22, 0x08	; 8
     708:	a0 f4       	brcc	.+40     	; 0x732 <ledmatrix_update_pixel+0x36>
     70a:	14 2f       	mov	r17, r20
     70c:	c6 2f       	mov	r28, r22
     70e:	d8 2f       	mov	r29, r24
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	0e 94 38 05 	call	0xa70	; 0xa70 <spi_send_byte>
     716:	6c 2f       	mov	r22, r28
     718:	67 70       	andi	r22, 0x07	; 7
     71a:	80 e1       	ldi	r24, 0x10	; 16
     71c:	68 9f       	mul	r22, r24
     71e:	90 01       	movw	r18, r0
     720:	11 24       	eor	r1, r1
     722:	8d 2f       	mov	r24, r29
     724:	8f 70       	andi	r24, 0x0F	; 15
     726:	82 2b       	or	r24, r18
     728:	0e 94 38 05 	call	0xa70	; 0xa70 <spi_send_byte>
     72c:	81 2f       	mov	r24, r17
     72e:	0e 94 38 05 	call	0xa70	; 0xa70 <spi_send_byte>
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	08 95       	ret

0000073a <ledmatrix_update_column>:
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	80 31       	cpi	r24, 0x10	; 16
     742:	a0 f4       	brcc	.+40     	; 0x76c <ledmatrix_update_column+0x32>
     744:	8b 01       	movw	r16, r22
     746:	c8 2f       	mov	r28, r24
     748:	83 e0       	ldi	r24, 0x03	; 3
     74a:	0e 94 38 05 	call	0xa70	; 0xa70 <spi_send_byte>
     74e:	8c 2f       	mov	r24, r28
     750:	8f 70       	andi	r24, 0x0F	; 15
     752:	0e 94 38 05 	call	0xa70	; 0xa70 <spi_send_byte>
     756:	c0 e0       	ldi	r28, 0x00	; 0
     758:	07 c0       	rjmp	.+14     	; 0x768 <ledmatrix_update_column+0x2e>
     75a:	f8 01       	movw	r30, r16
     75c:	ec 0f       	add	r30, r28
     75e:	f1 1d       	adc	r31, r1
     760:	80 81       	ld	r24, Z
     762:	0e 94 38 05 	call	0xa70	; 0xa70 <spi_send_byte>
     766:	cf 5f       	subi	r28, 0xFF	; 255
     768:	c8 30       	cpi	r28, 0x08	; 8
     76a:	b8 f3       	brcs	.-18     	; 0x75a <ledmatrix_update_column+0x20>
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	08 95       	ret

00000774 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     774:	8f e0       	ldi	r24, 0x0F	; 15
     776:	0e 94 38 05 	call	0xa70	; 0xa70 <spi_send_byte>
     77a:	08 95       	ret

0000077c <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     77c:	cf 93       	push	r28
     77e:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     780:	8a 30       	cpi	r24, 0x0A	; 10
     782:	19 f4       	brne	.+6      	; 0x78a <uart_put_char+0xe>
		uart_put_char('\r', stream);
     784:	8d e0       	ldi	r24, 0x0D	; 13
     786:	0e 94 be 03 	call	0x77c	; 0x77c <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     78a:	9f b7       	in	r25, 0x3f	; 63
     78c:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     78e:	02 c0       	rjmp	.+4      	; 0x794 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     790:	99 23       	and	r25, r25
     792:	29 f1       	breq	.+74     	; 0x7de <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     794:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <bytes_in_out_buffer>
     798:	8f 3f       	cpi	r24, 0xFF	; 255
     79a:	d1 f3       	breq	.-12     	; 0x790 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     79c:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     79e:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <out_insert_pos>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	8e 0f       	add	r24, r30
     7a6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <out_insert_pos>
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ee 5b       	subi	r30, 0xBE	; 190
     7ae:	fe 4f       	sbci	r31, 0xFE	; 254
     7b0:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     7b2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <bytes_in_out_buffer>
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     7bc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <out_insert_pos>
     7c0:	8f 3f       	cpi	r24, 0xFF	; 255
     7c2:	11 f4       	brne	.+4      	; 0x7c8 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     7c4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     7c8:	e1 ec       	ldi	r30, 0xC1	; 193
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	80 62       	ori	r24, 0x20	; 32
     7d0:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     7d2:	99 23       	and	r25, r25
     7d4:	39 f0       	breq	.+14     	; 0x7e4 <uart_put_char+0x68>
		sei();
     7d6:	78 94       	sei
	}
	return 0;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
}
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     7ec:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <bytes_in_input_buffer>
     7f0:	88 23       	and	r24, r24
     7f2:	e1 f3       	breq	.-8      	; 0x7ec <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     7f4:	2f b7       	in	r18, 0x3f	; 63
     7f6:	20 78       	andi	r18, 0x80	; 128
	cli();
     7f8:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     7fa:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <input_insert_pos>
     7fe:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <bytes_in_input_buffer>
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	83 1b       	sub	r24, r19
     806:	91 09       	sbc	r25, r1
     808:	5a f4       	brpl	.+22     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     80a:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <input_insert_pos>
     80e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <bytes_in_input_buffer>
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	e8 1b       	sub	r30, r24
     816:	f1 09       	sbc	r31, r1
     818:	ee 5a       	subi	r30, 0xAE	; 174
     81a:	fd 4f       	sbci	r31, 0xFD	; 253
     81c:	80 81       	ld	r24, Z
     81e:	0a c0       	rjmp	.+20     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     820:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <input_insert_pos>
     824:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <bytes_in_input_buffer>
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	e8 1b       	sub	r30, r24
     82c:	f1 09       	sbc	r31, r1
     82e:	ee 5b       	subi	r30, 0xBE	; 190
     830:	fd 4f       	sbci	r31, 0xFD	; 253
     832:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     834:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <bytes_in_input_buffer>
     838:	91 50       	subi	r25, 0x01	; 1
     83a:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <bytes_in_input_buffer>
	if(interrupts_enabled) {
     83e:	22 23       	and	r18, r18
     840:	09 f0       	breq	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		sei();
     842:	78 94       	sei
	}	
	return c;
}
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	08 95       	ret

00000848 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     848:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <out_insert_pos>
	bytes_in_out_buffer = 0;
     84c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <bytes_in_out_buffer>
	input_insert_pos = 0;
     850:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <input_insert_pos>
	bytes_in_input_buffer = 0;
     854:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <bytes_in_input_buffer>
	input_overrun = 0;
     858:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     85c:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     860:	dc 01       	movw	r26, r24
     862:	cb 01       	movw	r24, r22
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	aa 1f       	adc	r26, r26
     86a:	bb 1f       	adc	r27, r27
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	aa 1f       	adc	r26, r26
     872:	bb 1f       	adc	r27, r27
     874:	9c 01       	movw	r18, r24
     876:	ad 01       	movw	r20, r26
     878:	22 0f       	add	r18, r18
     87a:	33 1f       	adc	r19, r19
     87c:	44 1f       	adc	r20, r20
     87e:	55 1f       	adc	r21, r21
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	72 e1       	ldi	r23, 0x12	; 18
     884:	8a e7       	ldi	r24, 0x7A	; 122
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divmodsi4>
     88c:	ba 01       	movw	r22, r20
     88e:	a9 01       	movw	r20, r18
     890:	4f 5f       	subi	r20, 0xFF	; 255
     892:	5f 4f       	sbci	r21, 0xFF	; 255
     894:	6f 4f       	sbci	r22, 0xFF	; 255
     896:	7f 4f       	sbci	r23, 0xFF	; 255
     898:	db 01       	movw	r26, r22
     89a:	ca 01       	movw	r24, r20
     89c:	1a f4       	brpl	.+6      	; 0x8a4 <init_serial_stdio+0x5c>
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	a1 1d       	adc	r26, r1
     8a2:	b1 1d       	adc	r27, r1
     8a4:	b5 95       	asr	r27
     8a6:	a7 95       	ror	r26
     8a8:	97 95       	ror	r25
     8aa:	87 95       	ror	r24
     8ac:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     8ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     8b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     8b6:	e1 ec       	ldi	r30, 0xC1	; 193
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	88 e1       	ldi	r24, 0x18	; 24
     8bc:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     8be:	80 81       	ld	r24, Z
     8c0:	80 68       	ori	r24, 0x80	; 128
     8c2:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     8c4:	e4 e5       	ldi	r30, 0x54	; 84
     8c6:	f2 e0       	ldi	r31, 0x02	; 2
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	93 83       	std	Z+3, r25	; 0x03
     8ce:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	80 83       	st	Z, r24
     8d4:	08 95       	ret

000008d6 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     8d6:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <bytes_in_input_buffer>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	91 11       	cpse	r25, r1
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <serial_input_available+0xc>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
}
     8e2:	08 95       	ret

000008e4 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     8e4:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <input_insert_pos>
	bytes_in_input_buffer = 0;
     8e8:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <bytes_in_input_buffer>
     8ec:	08 95       	ret

000008ee <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     8ee:	1f 92       	push	r1
     8f0:	0f 92       	push	r0
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	2f 93       	push	r18
     8fa:	8f 93       	push	r24
     8fc:	9f 93       	push	r25
     8fe:	ef 93       	push	r30
     900:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     902:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <bytes_in_out_buffer>
     906:	88 23       	and	r24, r24
     908:	29 f1       	breq	.+74     	; 0x954 <__stack+0x55>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     90a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <out_insert_pos>
     90e:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <bytes_in_out_buffer>
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	82 1b       	sub	r24, r18
     916:	91 09       	sbc	r25, r1
     918:	5a f4       	brpl	.+22     	; 0x930 <__stack+0x31>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     91a:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <out_insert_pos>
     91e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <bytes_in_out_buffer>
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	e8 1b       	sub	r30, r24
     926:	f1 09       	sbc	r31, r1
     928:	ef 5b       	subi	r30, 0xBF	; 191
     92a:	fd 4f       	sbci	r31, 0xFD	; 253
     92c:	90 81       	ld	r25, Z
     92e:	0a c0       	rjmp	.+20     	; 0x944 <__stack+0x45>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     930:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <out_insert_pos>
     934:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <bytes_in_out_buffer>
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	e8 1b       	sub	r30, r24
     93c:	f1 09       	sbc	r31, r1
     93e:	ee 5b       	subi	r30, 0xBE	; 190
     940:	fe 4f       	sbci	r31, 0xFE	; 254
     942:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     944:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <bytes_in_out_buffer>
     948:	81 50       	subi	r24, 0x01	; 1
     94a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     94e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     952:	05 c0       	rjmp	.+10     	; 0x95e <__stack+0x5f>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     954:	e1 ec       	ldi	r30, 0xC1	; 193
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	8f 7d       	andi	r24, 0xDF	; 223
     95c:	80 83       	st	Z, r24
	}
}
     95e:	ff 91       	pop	r31
     960:	ef 91       	pop	r30
     962:	9f 91       	pop	r25
     964:	8f 91       	pop	r24
     966:	2f 91       	pop	r18
     968:	0f 90       	pop	r0
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	0f 90       	pop	r0
     96e:	1f 90       	pop	r1
     970:	18 95       	reti

00000972 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     972:	1f 92       	push	r1
     974:	0f 92       	push	r0
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	0f 92       	push	r0
     97a:	11 24       	eor	r1, r1
     97c:	2f 93       	push	r18
     97e:	3f 93       	push	r19
     980:	4f 93       	push	r20
     982:	5f 93       	push	r21
     984:	6f 93       	push	r22
     986:	7f 93       	push	r23
     988:	8f 93       	push	r24
     98a:	9f 93       	push	r25
     98c:	af 93       	push	r26
     98e:	bf 93       	push	r27
     990:	cf 93       	push	r28
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     996:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     99a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <do_echo>
     99e:	88 23       	and	r24, r24
     9a0:	49 f0       	breq	.+18     	; 0x9b4 <__vector_20+0x42>
     9a2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <bytes_in_out_buffer>
     9a6:	8f 3f       	cpi	r24, 0xFF	; 255
     9a8:	29 f0       	breq	.+10     	; 0x9b4 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	8c 2f       	mov	r24, r28
     9b0:	0e 94 be 03 	call	0x77c	; 0x77c <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     9b4:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <bytes_in_input_buffer>
     9b8:	80 31       	cpi	r24, 0x10	; 16
     9ba:	20 f0       	brcs	.+8      	; 0x9c4 <__vector_20+0x52>
		input_overrun = 1;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <input_overrun>
     9c2:	18 c0       	rjmp	.+48     	; 0x9f4 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     9c4:	cd 30       	cpi	r28, 0x0D	; 13
     9c6:	09 f4       	brne	.+2      	; 0x9ca <__vector_20+0x58>
			c = '\n';
     9c8:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     9ca:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <input_insert_pos>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	8e 0f       	add	r24, r30
     9d2:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <input_insert_pos>
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	ee 5b       	subi	r30, 0xBE	; 190
     9da:	fd 4f       	sbci	r31, 0xFD	; 253
     9dc:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     9de:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <bytes_in_input_buffer>
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     9e8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <input_insert_pos>
     9ec:	80 31       	cpi	r24, 0x10	; 16
     9ee:	11 f4       	brne	.+4      	; 0x9f4 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     9f0:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <input_insert_pos>
		}
	}
}
     9f4:	ff 91       	pop	r31
     9f6:	ef 91       	pop	r30
     9f8:	cf 91       	pop	r28
     9fa:	bf 91       	pop	r27
     9fc:	af 91       	pop	r26
     9fe:	9f 91       	pop	r25
     a00:	8f 91       	pop	r24
     a02:	7f 91       	pop	r23
     a04:	6f 91       	pop	r22
     a06:	5f 91       	pop	r21
     a08:	4f 91       	pop	r20
     a0a:	3f 91       	pop	r19
     a0c:	2f 91       	pop	r18
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
     a18:	94 b1       	in	r25, 0x04	; 4
     a1a:	90 6b       	ori	r25, 0xB0	; 176
     a1c:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
     a1e:	95 b1       	in	r25, 0x05	; 5
     a20:	90 61       	ori	r25, 0x10	; 16
     a22:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     a24:	90 e5       	ldi	r25, 0x50	; 80
     a26:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
     a28:	88 30       	cpi	r24, 0x08	; 8
     a2a:	21 f0       	breq	.+8      	; 0xa34 <spi_setup_master+0x1c>
     a2c:	80 32       	cpi	r24, 0x20	; 32
     a2e:	11 f0       	breq	.+4      	; 0xa34 <spi_setup_master+0x1c>
     a30:	82 30       	cpi	r24, 0x02	; 2
     a32:	19 f4       	brne	.+6      	; 0xa3a <spi_setup_master+0x22>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	9d bd       	out	0x2d, r25	; 45
			break;
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     a3a:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
     a3c:	80 32       	cpi	r24, 0x20	; 32
     a3e:	69 f0       	breq	.+26     	; 0xa5a <spi_setup_master+0x42>
     a40:	28 f4       	brcc	.+10     	; 0xa4c <spi_setup_master+0x34>
     a42:	88 30       	cpi	r24, 0x08	; 8
     a44:	71 f0       	breq	.+28     	; 0xa62 <spi_setup_master+0x4a>
     a46:	80 31       	cpi	r24, 0x10	; 16
     a48:	61 f0       	breq	.+24     	; 0xa62 <spi_setup_master+0x4a>
     a4a:	0e c0       	rjmp	.+28     	; 0xa68 <spi_setup_master+0x50>
     a4c:	80 34       	cpi	r24, 0x40	; 64
     a4e:	29 f0       	breq	.+10     	; 0xa5a <spi_setup_master+0x42>
     a50:	80 38       	cpi	r24, 0x80	; 128
     a52:	51 f4       	brne	.+20     	; 0xa68 <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1<<SPR00);
     a54:	8c b5       	in	r24, 0x2c	; 44
     a56:	81 60       	ori	r24, 0x01	; 1
     a58:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
     a5a:	8c b5       	in	r24, 0x2c	; 44
     a5c:	82 60       	ori	r24, 0x02	; 2
     a5e:	8c bd       	out	0x2c, r24	; 44
			break;
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <spi_setup_master+0x50>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
     a62:	8c b5       	in	r24, 0x2c	; 44
     a64:	81 60       	ori	r24, 0x01	; 1
     a66:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
     a68:	85 b1       	in	r24, 0x05	; 5
     a6a:	8f 7e       	andi	r24, 0xEF	; 239
     a6c:	85 b9       	out	0x05, r24	; 5
     a6e:	08 95       	ret

00000a70 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     a70:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
     a72:	0d b4       	in	r0, 0x2d	; 45
     a74:	07 fe       	sbrs	r0, 7
     a76:	fd cf       	rjmp	.-6      	; 0xa72 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     a78:	8e b5       	in	r24, 0x2e	; 46
     a7a:	08 95       	ret

00000a7c <move_terminal_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
     a7c:	9f 93       	push	r25
     a7e:	8f 93       	push	r24
     a80:	7f 93       	push	r23
     a82:	6f 93       	push	r22
     a84:	83 ed       	ldi	r24, 0xD3	; 211
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	9f 93       	push	r25
     a8a:	8f 93       	push	r24
     a8c:	0e 94 24 06 	call	0xc48	; 0xc48 <printf_P>
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	08 95       	ret

00000a9e <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
     a9e:	8e ec       	ldi	r24, 0xCE	; 206
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	0e 94 24 06 	call	0xc48	; 0xc48 <printf_P>
}
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	08 95       	ret

00000ab0 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
     ab0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <clockTicks>
     ab4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <clockTicks+0x1>
     ab8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <clockTicks+0x2>
     abc:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     ac0:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     ac2:	8c e7       	ldi	r24, 0x7C	; 124
     ac4:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
     ace:	ee e6       	ldi	r30, 0x6E	; 110
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	82 60       	ori	r24, 0x02	; 2
     ad6:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
     ad8:	85 b3       	in	r24, 0x15	; 21
     ada:	82 70       	andi	r24, 0x02	; 2
     adc:	85 bb       	out	0x15, r24	; 21
     ade:	08 95       	ret

00000ae0 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
     ae0:	8f b7       	in	r24, 0x3f	; 63
     ae2:	28 2f       	mov	r18, r24
     ae4:	20 78       	andi	r18, 0x80	; 128
	cli();
     ae6:	f8 94       	cli
	returnValue = clockTicks;
     ae8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <clockTicks>
     aec:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <clockTicks+0x1>
     af0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <clockTicks+0x2>
     af4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <clockTicks+0x3>
	if(interruptsOn) {
     af8:	22 23       	and	r18, r18
     afa:	09 f0       	breq	.+2      	; 0xafe <get_current_time+0x1e>
		sei();
     afc:	78 94       	sei
	}
	return returnValue;
}
     afe:	08 95       	ret

00000b00 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
     b12:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <clockTicks>
     b16:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <clockTicks+0x1>
     b1a:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <clockTicks+0x2>
     b1e:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <clockTicks+0x3>
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	a1 1d       	adc	r26, r1
     b26:	b1 1d       	adc	r27, r1
     b28:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <clockTicks>
     b2c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <clockTicks+0x1>
     b30:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <clockTicks+0x2>
     b34:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <clockTicks+0x3>
}
     b38:	bf 91       	pop	r27
     b3a:	af 91       	pop	r26
     b3c:	9f 91       	pop	r25
     b3e:	8f 91       	pop	r24
     b40:	0f 90       	pop	r0
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	0f 90       	pop	r0
     b46:	1f 90       	pop	r1
     b48:	18 95       	reti

00000b4a <__divmodsi4>:
     b4a:	05 2e       	mov	r0, r21
     b4c:	97 fb       	bst	r25, 7
     b4e:	1e f4       	brtc	.+6      	; 0xb56 <__divmodsi4+0xc>
     b50:	00 94       	com	r0
     b52:	0e 94 bc 05 	call	0xb78	; 0xb78 <__negsi2>
     b56:	57 fd       	sbrc	r21, 7
     b58:	07 d0       	rcall	.+14     	; 0xb68 <__divmodsi4_neg2>
     b5a:	0e 94 c4 05 	call	0xb88	; 0xb88 <__udivmodsi4>
     b5e:	07 fc       	sbrc	r0, 7
     b60:	03 d0       	rcall	.+6      	; 0xb68 <__divmodsi4_neg2>
     b62:	4e f4       	brtc	.+18     	; 0xb76 <__divmodsi4_exit>
     b64:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__negsi2>

00000b68 <__divmodsi4_neg2>:
     b68:	50 95       	com	r21
     b6a:	40 95       	com	r20
     b6c:	30 95       	com	r19
     b6e:	21 95       	neg	r18
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	4f 4f       	sbci	r20, 0xFF	; 255
     b74:	5f 4f       	sbci	r21, 0xFF	; 255

00000b76 <__divmodsi4_exit>:
     b76:	08 95       	ret

00000b78 <__negsi2>:
     b78:	90 95       	com	r25
     b7a:	80 95       	com	r24
     b7c:	70 95       	com	r23
     b7e:	61 95       	neg	r22
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	8f 4f       	sbci	r24, 0xFF	; 255
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	08 95       	ret

00000b88 <__udivmodsi4>:
     b88:	a1 e2       	ldi	r26, 0x21	; 33
     b8a:	1a 2e       	mov	r1, r26
     b8c:	aa 1b       	sub	r26, r26
     b8e:	bb 1b       	sub	r27, r27
     b90:	fd 01       	movw	r30, r26
     b92:	0d c0       	rjmp	.+26     	; 0xbae <__udivmodsi4_ep>

00000b94 <__udivmodsi4_loop>:
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	ee 1f       	adc	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	a2 17       	cp	r26, r18
     b9e:	b3 07       	cpc	r27, r19
     ba0:	e4 07       	cpc	r30, r20
     ba2:	f5 07       	cpc	r31, r21
     ba4:	20 f0       	brcs	.+8      	; 0xbae <__udivmodsi4_ep>
     ba6:	a2 1b       	sub	r26, r18
     ba8:	b3 0b       	sbc	r27, r19
     baa:	e4 0b       	sbc	r30, r20
     bac:	f5 0b       	sbc	r31, r21

00000bae <__udivmodsi4_ep>:
     bae:	66 1f       	adc	r22, r22
     bb0:	77 1f       	adc	r23, r23
     bb2:	88 1f       	adc	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	1a 94       	dec	r1
     bb8:	69 f7       	brne	.-38     	; 0xb94 <__udivmodsi4_loop>
     bba:	60 95       	com	r22
     bbc:	70 95       	com	r23
     bbe:	80 95       	com	r24
     bc0:	90 95       	com	r25
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	bd 01       	movw	r22, r26
     bc8:	cf 01       	movw	r24, r30
     bca:	08 95       	ret

00000bcc <fgetc>:
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	ec 01       	movw	r28, r24
     bd2:	2b 81       	ldd	r18, Y+3	; 0x03
     bd4:	20 ff       	sbrs	r18, 0
     bd6:	33 c0       	rjmp	.+102    	; 0xc3e <fgetc+0x72>
     bd8:	26 ff       	sbrs	r18, 6
     bda:	0a c0       	rjmp	.+20     	; 0xbf0 <fgetc+0x24>
     bdc:	2f 7b       	andi	r18, 0xBF	; 191
     bde:	2b 83       	std	Y+3, r18	; 0x03
     be0:	8e 81       	ldd	r24, Y+6	; 0x06
     be2:	9f 81       	ldd	r25, Y+7	; 0x07
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	9f 83       	std	Y+7, r25	; 0x07
     be8:	8e 83       	std	Y+6, r24	; 0x06
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	29 c0       	rjmp	.+82     	; 0xc42 <fgetc+0x76>
     bf0:	22 ff       	sbrs	r18, 2
     bf2:	0f c0       	rjmp	.+30     	; 0xc12 <fgetc+0x46>
     bf4:	e8 81       	ld	r30, Y
     bf6:	f9 81       	ldd	r31, Y+1	; 0x01
     bf8:	80 81       	ld	r24, Z
     bfa:	08 2e       	mov	r0, r24
     bfc:	00 0c       	add	r0, r0
     bfe:	99 0b       	sbc	r25, r25
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	19 f4       	brne	.+6      	; 0xc0a <fgetc+0x3e>
     c04:	20 62       	ori	r18, 0x20	; 32
     c06:	2b 83       	std	Y+3, r18	; 0x03
     c08:	1a c0       	rjmp	.+52     	; 0xc3e <fgetc+0x72>
     c0a:	31 96       	adiw	r30, 0x01	; 1
     c0c:	f9 83       	std	Y+1, r31	; 0x01
     c0e:	e8 83       	st	Y, r30
     c10:	0e c0       	rjmp	.+28     	; 0xc2e <fgetc+0x62>
     c12:	ea 85       	ldd	r30, Y+10	; 0x0a
     c14:	fb 85       	ldd	r31, Y+11	; 0x0b
     c16:	09 95       	icall
     c18:	97 ff       	sbrs	r25, 7
     c1a:	09 c0       	rjmp	.+18     	; 0xc2e <fgetc+0x62>
     c1c:	2b 81       	ldd	r18, Y+3	; 0x03
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	11 f0       	breq	.+4      	; 0xc26 <fgetc+0x5a>
     c22:	80 e2       	ldi	r24, 0x20	; 32
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <fgetc+0x5c>
     c26:	80 e1       	ldi	r24, 0x10	; 16
     c28:	82 2b       	or	r24, r18
     c2a:	8b 83       	std	Y+3, r24	; 0x03
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <fgetc+0x72>
     c2e:	2e 81       	ldd	r18, Y+6	; 0x06
     c30:	3f 81       	ldd	r19, Y+7	; 0x07
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	3f 83       	std	Y+7, r19	; 0x07
     c38:	2e 83       	std	Y+6, r18	; 0x06
     c3a:	99 27       	eor	r25, r25
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <fgetc+0x76>
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	9f ef       	ldi	r25, 0xFF	; 255
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <printf_P>:
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ea e2       	ldi	r30, 0x2A	; 42
     c4e:	f6 e0       	ldi	r31, 0x06	; 6
     c50:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__prologue_saves__+0x1c>
     c54:	ae 01       	movw	r20, r28
     c56:	49 5f       	subi	r20, 0xF9	; 249
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	da 01       	movw	r26, r20
     c5c:	6d 91       	ld	r22, X+
     c5e:	7d 91       	ld	r23, X+
     c60:	ad 01       	movw	r20, r26
     c62:	04 e5       	ldi	r16, 0x54	; 84
     c64:	12 e0       	ldi	r17, 0x02	; 2
     c66:	f8 01       	movw	r30, r16
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	93 81       	ldd	r25, Z+3	; 0x03
     c6c:	dc 01       	movw	r26, r24
     c6e:	13 96       	adiw	r26, 0x03	; 3
     c70:	2c 91       	ld	r18, X
     c72:	13 97       	sbiw	r26, 0x03	; 3
     c74:	28 60       	ori	r18, 0x08	; 8
     c76:	13 96       	adiw	r26, 0x03	; 3
     c78:	2c 93       	st	X, r18
     c7a:	0e 94 4a 06 	call	0xc94	; 0xc94 <vfprintf>
     c7e:	d8 01       	movw	r26, r16
     c80:	12 96       	adiw	r26, 0x02	; 2
     c82:	ed 91       	ld	r30, X+
     c84:	fc 91       	ld	r31, X
     c86:	13 97       	sbiw	r26, 0x03	; 3
     c88:	23 81       	ldd	r18, Z+3	; 0x03
     c8a:	27 7f       	andi	r18, 0xF7	; 247
     c8c:	23 83       	std	Z+3, r18	; 0x03
     c8e:	e4 e0       	ldi	r30, 0x04	; 4
     c90:	0c 94 05 09 	jmp	0x120a	; 0x120a <__epilogue_restores__+0x1c>

00000c94 <vfprintf>:
     c94:	ab e0       	ldi	r26, 0x0B	; 11
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e0 e5       	ldi	r30, 0x50	; 80
     c9a:	f6 e0       	ldi	r31, 0x06	; 6
     c9c:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__prologue_saves__>
     ca0:	6c 01       	movw	r12, r24
     ca2:	7b 01       	movw	r14, r22
     ca4:	8a 01       	movw	r16, r20
     ca6:	fc 01       	movw	r30, r24
     ca8:	17 82       	std	Z+7, r1	; 0x07
     caa:	16 82       	std	Z+6, r1	; 0x06
     cac:	83 81       	ldd	r24, Z+3	; 0x03
     cae:	81 ff       	sbrs	r24, 1
     cb0:	cc c1       	rjmp	.+920    	; 0x104a <vfprintf+0x3b6>
     cb2:	ce 01       	movw	r24, r28
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	3c 01       	movw	r6, r24
     cb8:	f6 01       	movw	r30, r12
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	f7 01       	movw	r30, r14
     cbe:	93 fd       	sbrc	r25, 3
     cc0:	85 91       	lpm	r24, Z+
     cc2:	93 ff       	sbrs	r25, 3
     cc4:	81 91       	ld	r24, Z+
     cc6:	7f 01       	movw	r14, r30
     cc8:	88 23       	and	r24, r24
     cca:	09 f4       	brne	.+2      	; 0xcce <vfprintf+0x3a>
     ccc:	ba c1       	rjmp	.+884    	; 0x1042 <vfprintf+0x3ae>
     cce:	85 32       	cpi	r24, 0x25	; 37
     cd0:	39 f4       	brne	.+14     	; 0xce0 <vfprintf+0x4c>
     cd2:	93 fd       	sbrc	r25, 3
     cd4:	85 91       	lpm	r24, Z+
     cd6:	93 ff       	sbrs	r25, 3
     cd8:	81 91       	ld	r24, Z+
     cda:	7f 01       	movw	r14, r30
     cdc:	85 32       	cpi	r24, 0x25	; 37
     cde:	29 f4       	brne	.+10     	; 0xcea <vfprintf+0x56>
     ce0:	b6 01       	movw	r22, r12
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     ce8:	e7 cf       	rjmp	.-50     	; 0xcb8 <vfprintf+0x24>
     cea:	91 2c       	mov	r9, r1
     cec:	21 2c       	mov	r2, r1
     cee:	31 2c       	mov	r3, r1
     cf0:	ff e1       	ldi	r31, 0x1F	; 31
     cf2:	f3 15       	cp	r31, r3
     cf4:	d8 f0       	brcs	.+54     	; 0xd2c <vfprintf+0x98>
     cf6:	8b 32       	cpi	r24, 0x2B	; 43
     cf8:	79 f0       	breq	.+30     	; 0xd18 <vfprintf+0x84>
     cfa:	38 f4       	brcc	.+14     	; 0xd0a <vfprintf+0x76>
     cfc:	80 32       	cpi	r24, 0x20	; 32
     cfe:	79 f0       	breq	.+30     	; 0xd1e <vfprintf+0x8a>
     d00:	83 32       	cpi	r24, 0x23	; 35
     d02:	a1 f4       	brne	.+40     	; 0xd2c <vfprintf+0x98>
     d04:	23 2d       	mov	r18, r3
     d06:	20 61       	ori	r18, 0x10	; 16
     d08:	1d c0       	rjmp	.+58     	; 0xd44 <vfprintf+0xb0>
     d0a:	8d 32       	cpi	r24, 0x2D	; 45
     d0c:	61 f0       	breq	.+24     	; 0xd26 <vfprintf+0x92>
     d0e:	80 33       	cpi	r24, 0x30	; 48
     d10:	69 f4       	brne	.+26     	; 0xd2c <vfprintf+0x98>
     d12:	23 2d       	mov	r18, r3
     d14:	21 60       	ori	r18, 0x01	; 1
     d16:	16 c0       	rjmp	.+44     	; 0xd44 <vfprintf+0xb0>
     d18:	83 2d       	mov	r24, r3
     d1a:	82 60       	ori	r24, 0x02	; 2
     d1c:	38 2e       	mov	r3, r24
     d1e:	e3 2d       	mov	r30, r3
     d20:	e4 60       	ori	r30, 0x04	; 4
     d22:	3e 2e       	mov	r3, r30
     d24:	2a c0       	rjmp	.+84     	; 0xd7a <vfprintf+0xe6>
     d26:	f3 2d       	mov	r31, r3
     d28:	f8 60       	ori	r31, 0x08	; 8
     d2a:	1d c0       	rjmp	.+58     	; 0xd66 <vfprintf+0xd2>
     d2c:	37 fc       	sbrc	r3, 7
     d2e:	2d c0       	rjmp	.+90     	; 0xd8a <vfprintf+0xf6>
     d30:	20 ed       	ldi	r18, 0xD0	; 208
     d32:	28 0f       	add	r18, r24
     d34:	2a 30       	cpi	r18, 0x0A	; 10
     d36:	40 f0       	brcs	.+16     	; 0xd48 <vfprintf+0xb4>
     d38:	8e 32       	cpi	r24, 0x2E	; 46
     d3a:	b9 f4       	brne	.+46     	; 0xd6a <vfprintf+0xd6>
     d3c:	36 fc       	sbrc	r3, 6
     d3e:	81 c1       	rjmp	.+770    	; 0x1042 <vfprintf+0x3ae>
     d40:	23 2d       	mov	r18, r3
     d42:	20 64       	ori	r18, 0x40	; 64
     d44:	32 2e       	mov	r3, r18
     d46:	19 c0       	rjmp	.+50     	; 0xd7a <vfprintf+0xe6>
     d48:	36 fe       	sbrs	r3, 6
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <vfprintf+0xc4>
     d4c:	8a e0       	ldi	r24, 0x0A	; 10
     d4e:	98 9e       	mul	r9, r24
     d50:	20 0d       	add	r18, r0
     d52:	11 24       	eor	r1, r1
     d54:	92 2e       	mov	r9, r18
     d56:	11 c0       	rjmp	.+34     	; 0xd7a <vfprintf+0xe6>
     d58:	ea e0       	ldi	r30, 0x0A	; 10
     d5a:	2e 9e       	mul	r2, r30
     d5c:	20 0d       	add	r18, r0
     d5e:	11 24       	eor	r1, r1
     d60:	22 2e       	mov	r2, r18
     d62:	f3 2d       	mov	r31, r3
     d64:	f0 62       	ori	r31, 0x20	; 32
     d66:	3f 2e       	mov	r3, r31
     d68:	08 c0       	rjmp	.+16     	; 0xd7a <vfprintf+0xe6>
     d6a:	8c 36       	cpi	r24, 0x6C	; 108
     d6c:	21 f4       	brne	.+8      	; 0xd76 <vfprintf+0xe2>
     d6e:	83 2d       	mov	r24, r3
     d70:	80 68       	ori	r24, 0x80	; 128
     d72:	38 2e       	mov	r3, r24
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <vfprintf+0xe6>
     d76:	88 36       	cpi	r24, 0x68	; 104
     d78:	41 f4       	brne	.+16     	; 0xd8a <vfprintf+0xf6>
     d7a:	f7 01       	movw	r30, r14
     d7c:	93 fd       	sbrc	r25, 3
     d7e:	85 91       	lpm	r24, Z+
     d80:	93 ff       	sbrs	r25, 3
     d82:	81 91       	ld	r24, Z+
     d84:	7f 01       	movw	r14, r30
     d86:	81 11       	cpse	r24, r1
     d88:	b3 cf       	rjmp	.-154    	; 0xcf0 <vfprintf+0x5c>
     d8a:	98 2f       	mov	r25, r24
     d8c:	9f 7d       	andi	r25, 0xDF	; 223
     d8e:	95 54       	subi	r25, 0x45	; 69
     d90:	93 30       	cpi	r25, 0x03	; 3
     d92:	28 f4       	brcc	.+10     	; 0xd9e <vfprintf+0x10a>
     d94:	0c 5f       	subi	r16, 0xFC	; 252
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	9f e3       	ldi	r25, 0x3F	; 63
     d9a:	99 83       	std	Y+1, r25	; 0x01
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <vfprintf+0x124>
     d9e:	83 36       	cpi	r24, 0x63	; 99
     da0:	31 f0       	breq	.+12     	; 0xdae <vfprintf+0x11a>
     da2:	83 37       	cpi	r24, 0x73	; 115
     da4:	71 f0       	breq	.+28     	; 0xdc2 <vfprintf+0x12e>
     da6:	83 35       	cpi	r24, 0x53	; 83
     da8:	09 f0       	breq	.+2      	; 0xdac <vfprintf+0x118>
     daa:	59 c0       	rjmp	.+178    	; 0xe5e <vfprintf+0x1ca>
     dac:	21 c0       	rjmp	.+66     	; 0xdf0 <vfprintf+0x15c>
     dae:	f8 01       	movw	r30, r16
     db0:	80 81       	ld	r24, Z
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	0e 5f       	subi	r16, 0xFE	; 254
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	88 24       	eor	r8, r8
     dba:	83 94       	inc	r8
     dbc:	91 2c       	mov	r9, r1
     dbe:	53 01       	movw	r10, r6
     dc0:	13 c0       	rjmp	.+38     	; 0xde8 <vfprintf+0x154>
     dc2:	28 01       	movw	r4, r16
     dc4:	f2 e0       	ldi	r31, 0x02	; 2
     dc6:	4f 0e       	add	r4, r31
     dc8:	51 1c       	adc	r5, r1
     dca:	f8 01       	movw	r30, r16
     dcc:	a0 80       	ld	r10, Z
     dce:	b1 80       	ldd	r11, Z+1	; 0x01
     dd0:	36 fe       	sbrs	r3, 6
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <vfprintf+0x146>
     dd4:	69 2d       	mov	r22, r9
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <vfprintf+0x14a>
     dda:	6f ef       	ldi	r22, 0xFF	; 255
     ddc:	7f ef       	ldi	r23, 0xFF	; 255
     dde:	c5 01       	movw	r24, r10
     de0:	0e 94 36 08 	call	0x106c	; 0x106c <strnlen>
     de4:	4c 01       	movw	r8, r24
     de6:	82 01       	movw	r16, r4
     de8:	f3 2d       	mov	r31, r3
     dea:	ff 77       	andi	r31, 0x7F	; 127
     dec:	3f 2e       	mov	r3, r31
     dee:	16 c0       	rjmp	.+44     	; 0xe1c <vfprintf+0x188>
     df0:	28 01       	movw	r4, r16
     df2:	22 e0       	ldi	r18, 0x02	; 2
     df4:	42 0e       	add	r4, r18
     df6:	51 1c       	adc	r5, r1
     df8:	f8 01       	movw	r30, r16
     dfa:	a0 80       	ld	r10, Z
     dfc:	b1 80       	ldd	r11, Z+1	; 0x01
     dfe:	36 fe       	sbrs	r3, 6
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <vfprintf+0x174>
     e02:	69 2d       	mov	r22, r9
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <vfprintf+0x178>
     e08:	6f ef       	ldi	r22, 0xFF	; 255
     e0a:	7f ef       	ldi	r23, 0xFF	; 255
     e0c:	c5 01       	movw	r24, r10
     e0e:	0e 94 2b 08 	call	0x1056	; 0x1056 <strnlen_P>
     e12:	4c 01       	movw	r8, r24
     e14:	f3 2d       	mov	r31, r3
     e16:	f0 68       	ori	r31, 0x80	; 128
     e18:	3f 2e       	mov	r3, r31
     e1a:	82 01       	movw	r16, r4
     e1c:	33 fc       	sbrc	r3, 3
     e1e:	1b c0       	rjmp	.+54     	; 0xe56 <vfprintf+0x1c2>
     e20:	82 2d       	mov	r24, r2
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	88 16       	cp	r8, r24
     e26:	99 06       	cpc	r9, r25
     e28:	b0 f4       	brcc	.+44     	; 0xe56 <vfprintf+0x1c2>
     e2a:	b6 01       	movw	r22, r12
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     e34:	2a 94       	dec	r2
     e36:	f4 cf       	rjmp	.-24     	; 0xe20 <vfprintf+0x18c>
     e38:	f5 01       	movw	r30, r10
     e3a:	37 fc       	sbrc	r3, 7
     e3c:	85 91       	lpm	r24, Z+
     e3e:	37 fe       	sbrs	r3, 7
     e40:	81 91       	ld	r24, Z+
     e42:	5f 01       	movw	r10, r30
     e44:	b6 01       	movw	r22, r12
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     e4c:	21 10       	cpse	r2, r1
     e4e:	2a 94       	dec	r2
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	82 1a       	sub	r8, r18
     e54:	91 08       	sbc	r9, r1
     e56:	81 14       	cp	r8, r1
     e58:	91 04       	cpc	r9, r1
     e5a:	71 f7       	brne	.-36     	; 0xe38 <vfprintf+0x1a4>
     e5c:	e8 c0       	rjmp	.+464    	; 0x102e <vfprintf+0x39a>
     e5e:	84 36       	cpi	r24, 0x64	; 100
     e60:	11 f0       	breq	.+4      	; 0xe66 <vfprintf+0x1d2>
     e62:	89 36       	cpi	r24, 0x69	; 105
     e64:	41 f5       	brne	.+80     	; 0xeb6 <vfprintf+0x222>
     e66:	f8 01       	movw	r30, r16
     e68:	37 fe       	sbrs	r3, 7
     e6a:	07 c0       	rjmp	.+14     	; 0xe7a <vfprintf+0x1e6>
     e6c:	60 81       	ld	r22, Z
     e6e:	71 81       	ldd	r23, Z+1	; 0x01
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	0c 5f       	subi	r16, 0xFC	; 252
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	08 c0       	rjmp	.+16     	; 0xe8a <vfprintf+0x1f6>
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	07 2e       	mov	r0, r23
     e80:	00 0c       	add	r0, r0
     e82:	88 0b       	sbc	r24, r24
     e84:	99 0b       	sbc	r25, r25
     e86:	0e 5f       	subi	r16, 0xFE	; 254
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	f3 2d       	mov	r31, r3
     e8c:	ff 76       	andi	r31, 0x6F	; 111
     e8e:	3f 2e       	mov	r3, r31
     e90:	97 ff       	sbrs	r25, 7
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <vfprintf+0x212>
     e94:	90 95       	com	r25
     e96:	80 95       	com	r24
     e98:	70 95       	com	r23
     e9a:	61 95       	neg	r22
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	f0 68       	ori	r31, 0x80	; 128
     ea4:	3f 2e       	mov	r3, r31
     ea6:	2a e0       	ldi	r18, 0x0A	; 10
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	a3 01       	movw	r20, r6
     eac:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__ultoa_invert>
     eb0:	88 2e       	mov	r8, r24
     eb2:	86 18       	sub	r8, r6
     eb4:	45 c0       	rjmp	.+138    	; 0xf40 <vfprintf+0x2ac>
     eb6:	85 37       	cpi	r24, 0x75	; 117
     eb8:	31 f4       	brne	.+12     	; 0xec6 <vfprintf+0x232>
     eba:	23 2d       	mov	r18, r3
     ebc:	2f 7e       	andi	r18, 0xEF	; 239
     ebe:	b2 2e       	mov	r11, r18
     ec0:	2a e0       	ldi	r18, 0x0A	; 10
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	25 c0       	rjmp	.+74     	; 0xf10 <vfprintf+0x27c>
     ec6:	93 2d       	mov	r25, r3
     ec8:	99 7f       	andi	r25, 0xF9	; 249
     eca:	b9 2e       	mov	r11, r25
     ecc:	8f 36       	cpi	r24, 0x6F	; 111
     ece:	c1 f0       	breq	.+48     	; 0xf00 <vfprintf+0x26c>
     ed0:	18 f4       	brcc	.+6      	; 0xed8 <vfprintf+0x244>
     ed2:	88 35       	cpi	r24, 0x58	; 88
     ed4:	79 f0       	breq	.+30     	; 0xef4 <vfprintf+0x260>
     ed6:	b5 c0       	rjmp	.+362    	; 0x1042 <vfprintf+0x3ae>
     ed8:	80 37       	cpi	r24, 0x70	; 112
     eda:	19 f0       	breq	.+6      	; 0xee2 <vfprintf+0x24e>
     edc:	88 37       	cpi	r24, 0x78	; 120
     ede:	21 f0       	breq	.+8      	; 0xee8 <vfprintf+0x254>
     ee0:	b0 c0       	rjmp	.+352    	; 0x1042 <vfprintf+0x3ae>
     ee2:	e9 2f       	mov	r30, r25
     ee4:	e0 61       	ori	r30, 0x10	; 16
     ee6:	be 2e       	mov	r11, r30
     ee8:	b4 fe       	sbrs	r11, 4
     eea:	0d c0       	rjmp	.+26     	; 0xf06 <vfprintf+0x272>
     eec:	fb 2d       	mov	r31, r11
     eee:	f4 60       	ori	r31, 0x04	; 4
     ef0:	bf 2e       	mov	r11, r31
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <vfprintf+0x272>
     ef4:	34 fe       	sbrs	r3, 4
     ef6:	0a c0       	rjmp	.+20     	; 0xf0c <vfprintf+0x278>
     ef8:	29 2f       	mov	r18, r25
     efa:	26 60       	ori	r18, 0x06	; 6
     efc:	b2 2e       	mov	r11, r18
     efe:	06 c0       	rjmp	.+12     	; 0xf0c <vfprintf+0x278>
     f00:	28 e0       	ldi	r18, 0x08	; 8
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <vfprintf+0x27c>
     f06:	20 e1       	ldi	r18, 0x10	; 16
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <vfprintf+0x27c>
     f0c:	20 e1       	ldi	r18, 0x10	; 16
     f0e:	32 e0       	ldi	r19, 0x02	; 2
     f10:	f8 01       	movw	r30, r16
     f12:	b7 fe       	sbrs	r11, 7
     f14:	07 c0       	rjmp	.+14     	; 0xf24 <vfprintf+0x290>
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	0c 5f       	subi	r16, 0xFC	; 252
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <vfprintf+0x29c>
     f24:	60 81       	ld	r22, Z
     f26:	71 81       	ldd	r23, Z+1	; 0x01
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 5f       	subi	r16, 0xFE	; 254
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	a3 01       	movw	r20, r6
     f32:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__ultoa_invert>
     f36:	88 2e       	mov	r8, r24
     f38:	86 18       	sub	r8, r6
     f3a:	fb 2d       	mov	r31, r11
     f3c:	ff 77       	andi	r31, 0x7F	; 127
     f3e:	3f 2e       	mov	r3, r31
     f40:	36 fe       	sbrs	r3, 6
     f42:	0d c0       	rjmp	.+26     	; 0xf5e <vfprintf+0x2ca>
     f44:	23 2d       	mov	r18, r3
     f46:	2e 7f       	andi	r18, 0xFE	; 254
     f48:	a2 2e       	mov	r10, r18
     f4a:	89 14       	cp	r8, r9
     f4c:	58 f4       	brcc	.+22     	; 0xf64 <vfprintf+0x2d0>
     f4e:	34 fe       	sbrs	r3, 4
     f50:	0b c0       	rjmp	.+22     	; 0xf68 <vfprintf+0x2d4>
     f52:	32 fc       	sbrc	r3, 2
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <vfprintf+0x2d4>
     f56:	83 2d       	mov	r24, r3
     f58:	8e 7e       	andi	r24, 0xEE	; 238
     f5a:	a8 2e       	mov	r10, r24
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <vfprintf+0x2d4>
     f5e:	b8 2c       	mov	r11, r8
     f60:	a3 2c       	mov	r10, r3
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <vfprintf+0x2d6>
     f64:	b8 2c       	mov	r11, r8
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <vfprintf+0x2d6>
     f68:	b9 2c       	mov	r11, r9
     f6a:	a4 fe       	sbrs	r10, 4
     f6c:	0f c0       	rjmp	.+30     	; 0xf8c <vfprintf+0x2f8>
     f6e:	fe 01       	movw	r30, r28
     f70:	e8 0d       	add	r30, r8
     f72:	f1 1d       	adc	r31, r1
     f74:	80 81       	ld	r24, Z
     f76:	80 33       	cpi	r24, 0x30	; 48
     f78:	21 f4       	brne	.+8      	; 0xf82 <vfprintf+0x2ee>
     f7a:	9a 2d       	mov	r25, r10
     f7c:	99 7e       	andi	r25, 0xE9	; 233
     f7e:	a9 2e       	mov	r10, r25
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <vfprintf+0x300>
     f82:	a2 fe       	sbrs	r10, 2
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <vfprintf+0x2fe>
     f86:	b3 94       	inc	r11
     f88:	b3 94       	inc	r11
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <vfprintf+0x300>
     f8c:	8a 2d       	mov	r24, r10
     f8e:	86 78       	andi	r24, 0x86	; 134
     f90:	09 f0       	breq	.+2      	; 0xf94 <vfprintf+0x300>
     f92:	b3 94       	inc	r11
     f94:	a3 fc       	sbrc	r10, 3
     f96:	11 c0       	rjmp	.+34     	; 0xfba <vfprintf+0x326>
     f98:	a0 fe       	sbrs	r10, 0
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <vfprintf+0x314>
     f9c:	b2 14       	cp	r11, r2
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <vfprintf+0x32e>
     fa0:	28 0c       	add	r2, r8
     fa2:	92 2c       	mov	r9, r2
     fa4:	9b 18       	sub	r9, r11
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <vfprintf+0x330>
     fa8:	b2 14       	cp	r11, r2
     faa:	60 f4       	brcc	.+24     	; 0xfc4 <vfprintf+0x330>
     fac:	b6 01       	movw	r22, r12
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     fb6:	b3 94       	inc	r11
     fb8:	f7 cf       	rjmp	.-18     	; 0xfa8 <vfprintf+0x314>
     fba:	b2 14       	cp	r11, r2
     fbc:	18 f4       	brcc	.+6      	; 0xfc4 <vfprintf+0x330>
     fbe:	2b 18       	sub	r2, r11
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <vfprintf+0x332>
     fc2:	98 2c       	mov	r9, r8
     fc4:	21 2c       	mov	r2, r1
     fc6:	a4 fe       	sbrs	r10, 4
     fc8:	10 c0       	rjmp	.+32     	; 0xfea <vfprintf+0x356>
     fca:	b6 01       	movw	r22, r12
     fcc:	80 e3       	ldi	r24, 0x30	; 48
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     fd4:	a2 fe       	sbrs	r10, 2
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <vfprintf+0x372>
     fd8:	a1 fc       	sbrc	r10, 1
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <vfprintf+0x34e>
     fdc:	88 e7       	ldi	r24, 0x78	; 120
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <vfprintf+0x352>
     fe2:	88 e5       	ldi	r24, 0x58	; 88
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	b6 01       	movw	r22, r12
     fe8:	0c c0       	rjmp	.+24     	; 0x1002 <vfprintf+0x36e>
     fea:	8a 2d       	mov	r24, r10
     fec:	86 78       	andi	r24, 0x86	; 134
     fee:	59 f0       	breq	.+22     	; 0x1006 <vfprintf+0x372>
     ff0:	a1 fe       	sbrs	r10, 1
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <vfprintf+0x364>
     ff4:	8b e2       	ldi	r24, 0x2B	; 43
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <vfprintf+0x366>
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	a7 fc       	sbrc	r10, 7
     ffc:	8d e2       	ldi	r24, 0x2D	; 45
     ffe:	b6 01       	movw	r22, r12
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
    1006:	89 14       	cp	r8, r9
    1008:	38 f4       	brcc	.+14     	; 0x1018 <vfprintf+0x384>
    100a:	b6 01       	movw	r22, r12
    100c:	80 e3       	ldi	r24, 0x30	; 48
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
    1014:	9a 94       	dec	r9
    1016:	f7 cf       	rjmp	.-18     	; 0x1006 <vfprintf+0x372>
    1018:	8a 94       	dec	r8
    101a:	f3 01       	movw	r30, r6
    101c:	e8 0d       	add	r30, r8
    101e:	f1 1d       	adc	r31, r1
    1020:	80 81       	ld	r24, Z
    1022:	b6 01       	movw	r22, r12
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
    102a:	81 10       	cpse	r8, r1
    102c:	f5 cf       	rjmp	.-22     	; 0x1018 <vfprintf+0x384>
    102e:	22 20       	and	r2, r2
    1030:	09 f4       	brne	.+2      	; 0x1034 <vfprintf+0x3a0>
    1032:	42 ce       	rjmp	.-892    	; 0xcb8 <vfprintf+0x24>
    1034:	b6 01       	movw	r22, r12
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
    103e:	2a 94       	dec	r2
    1040:	f6 cf       	rjmp	.-20     	; 0x102e <vfprintf+0x39a>
    1042:	f6 01       	movw	r30, r12
    1044:	86 81       	ldd	r24, Z+6	; 0x06
    1046:	97 81       	ldd	r25, Z+7	; 0x07
    1048:	02 c0       	rjmp	.+4      	; 0x104e <vfprintf+0x3ba>
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	9f ef       	ldi	r25, 0xFF	; 255
    104e:	2b 96       	adiw	r28, 0x0b	; 11
    1050:	e2 e1       	ldi	r30, 0x12	; 18
    1052:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__epilogue_restores__>

00001056 <strnlen_P>:
    1056:	fc 01       	movw	r30, r24
    1058:	05 90       	lpm	r0, Z+
    105a:	61 50       	subi	r22, 0x01	; 1
    105c:	70 40       	sbci	r23, 0x00	; 0
    105e:	01 10       	cpse	r0, r1
    1060:	d8 f7       	brcc	.-10     	; 0x1058 <strnlen_P+0x2>
    1062:	80 95       	com	r24
    1064:	90 95       	com	r25
    1066:	8e 0f       	add	r24, r30
    1068:	9f 1f       	adc	r25, r31
    106a:	08 95       	ret

0000106c <strnlen>:
    106c:	fc 01       	movw	r30, r24
    106e:	61 50       	subi	r22, 0x01	; 1
    1070:	70 40       	sbci	r23, 0x00	; 0
    1072:	01 90       	ld	r0, Z+
    1074:	01 10       	cpse	r0, r1
    1076:	d8 f7       	brcc	.-10     	; 0x106e <strnlen+0x2>
    1078:	80 95       	com	r24
    107a:	90 95       	com	r25
    107c:	8e 0f       	add	r24, r30
    107e:	9f 1f       	adc	r25, r31
    1080:	08 95       	ret

00001082 <fputc>:
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	fb 01       	movw	r30, r22
    108c:	23 81       	ldd	r18, Z+3	; 0x03
    108e:	21 fd       	sbrc	r18, 1
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <fputc+0x16>
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	2c c0       	rjmp	.+88     	; 0x10f0 <fputc+0x6e>
    1098:	22 ff       	sbrs	r18, 2
    109a:	16 c0       	rjmp	.+44     	; 0x10c8 <fputc+0x46>
    109c:	46 81       	ldd	r20, Z+6	; 0x06
    109e:	57 81       	ldd	r21, Z+7	; 0x07
    10a0:	24 81       	ldd	r18, Z+4	; 0x04
    10a2:	35 81       	ldd	r19, Z+5	; 0x05
    10a4:	42 17       	cp	r20, r18
    10a6:	53 07       	cpc	r21, r19
    10a8:	44 f4       	brge	.+16     	; 0x10ba <fputc+0x38>
    10aa:	a0 81       	ld	r26, Z
    10ac:	b1 81       	ldd	r27, Z+1	; 0x01
    10ae:	9d 01       	movw	r18, r26
    10b0:	2f 5f       	subi	r18, 0xFF	; 255
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	31 83       	std	Z+1, r19	; 0x01
    10b6:	20 83       	st	Z, r18
    10b8:	8c 93       	st	X, r24
    10ba:	26 81       	ldd	r18, Z+6	; 0x06
    10bc:	37 81       	ldd	r19, Z+7	; 0x07
    10be:	2f 5f       	subi	r18, 0xFF	; 255
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	37 83       	std	Z+7, r19	; 0x07
    10c4:	26 83       	std	Z+6, r18	; 0x06
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <fputc+0x6e>
    10c8:	8b 01       	movw	r16, r22
    10ca:	ec 01       	movw	r28, r24
    10cc:	fb 01       	movw	r30, r22
    10ce:	00 84       	ldd	r0, Z+8	; 0x08
    10d0:	f1 85       	ldd	r31, Z+9	; 0x09
    10d2:	e0 2d       	mov	r30, r0
    10d4:	09 95       	icall
    10d6:	89 2b       	or	r24, r25
    10d8:	e1 f6       	brne	.-72     	; 0x1092 <fputc+0x10>
    10da:	d8 01       	movw	r26, r16
    10dc:	16 96       	adiw	r26, 0x06	; 6
    10de:	8d 91       	ld	r24, X+
    10e0:	9c 91       	ld	r25, X
    10e2:	17 97       	sbiw	r26, 0x07	; 7
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	17 96       	adiw	r26, 0x07	; 7
    10e8:	9c 93       	st	X, r25
    10ea:	8e 93       	st	-X, r24
    10ec:	16 97       	sbiw	r26, 0x06	; 6
    10ee:	ce 01       	movw	r24, r28
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	08 95       	ret

000010fa <__ultoa_invert>:
    10fa:	fa 01       	movw	r30, r20
    10fc:	aa 27       	eor	r26, r26
    10fe:	28 30       	cpi	r18, 0x08	; 8
    1100:	51 f1       	breq	.+84     	; 0x1156 <__ultoa_invert+0x5c>
    1102:	20 31       	cpi	r18, 0x10	; 16
    1104:	81 f1       	breq	.+96     	; 0x1166 <__ultoa_invert+0x6c>
    1106:	e8 94       	clt
    1108:	6f 93       	push	r22
    110a:	6e 7f       	andi	r22, 0xFE	; 254
    110c:	6e 5f       	subi	r22, 0xFE	; 254
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	8f 4f       	sbci	r24, 0xFF	; 255
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	af 4f       	sbci	r26, 0xFF	; 255
    1116:	b1 e0       	ldi	r27, 0x01	; 1
    1118:	3e d0       	rcall	.+124    	; 0x1196 <__ultoa_invert+0x9c>
    111a:	b4 e0       	ldi	r27, 0x04	; 4
    111c:	3c d0       	rcall	.+120    	; 0x1196 <__ultoa_invert+0x9c>
    111e:	67 0f       	add	r22, r23
    1120:	78 1f       	adc	r23, r24
    1122:	89 1f       	adc	r24, r25
    1124:	9a 1f       	adc	r25, r26
    1126:	a1 1d       	adc	r26, r1
    1128:	68 0f       	add	r22, r24
    112a:	79 1f       	adc	r23, r25
    112c:	8a 1f       	adc	r24, r26
    112e:	91 1d       	adc	r25, r1
    1130:	a1 1d       	adc	r26, r1
    1132:	6a 0f       	add	r22, r26
    1134:	71 1d       	adc	r23, r1
    1136:	81 1d       	adc	r24, r1
    1138:	91 1d       	adc	r25, r1
    113a:	a1 1d       	adc	r26, r1
    113c:	20 d0       	rcall	.+64     	; 0x117e <__ultoa_invert+0x84>
    113e:	09 f4       	brne	.+2      	; 0x1142 <__ultoa_invert+0x48>
    1140:	68 94       	set
    1142:	3f 91       	pop	r19
    1144:	2a e0       	ldi	r18, 0x0A	; 10
    1146:	26 9f       	mul	r18, r22
    1148:	11 24       	eor	r1, r1
    114a:	30 19       	sub	r19, r0
    114c:	30 5d       	subi	r19, 0xD0	; 208
    114e:	31 93       	st	Z+, r19
    1150:	de f6       	brtc	.-74     	; 0x1108 <__ultoa_invert+0xe>
    1152:	cf 01       	movw	r24, r30
    1154:	08 95       	ret
    1156:	46 2f       	mov	r20, r22
    1158:	47 70       	andi	r20, 0x07	; 7
    115a:	40 5d       	subi	r20, 0xD0	; 208
    115c:	41 93       	st	Z+, r20
    115e:	b3 e0       	ldi	r27, 0x03	; 3
    1160:	0f d0       	rcall	.+30     	; 0x1180 <__ultoa_invert+0x86>
    1162:	c9 f7       	brne	.-14     	; 0x1156 <__ultoa_invert+0x5c>
    1164:	f6 cf       	rjmp	.-20     	; 0x1152 <__ultoa_invert+0x58>
    1166:	46 2f       	mov	r20, r22
    1168:	4f 70       	andi	r20, 0x0F	; 15
    116a:	40 5d       	subi	r20, 0xD0	; 208
    116c:	4a 33       	cpi	r20, 0x3A	; 58
    116e:	18 f0       	brcs	.+6      	; 0x1176 <__ultoa_invert+0x7c>
    1170:	49 5d       	subi	r20, 0xD9	; 217
    1172:	31 fd       	sbrc	r19, 1
    1174:	40 52       	subi	r20, 0x20	; 32
    1176:	41 93       	st	Z+, r20
    1178:	02 d0       	rcall	.+4      	; 0x117e <__ultoa_invert+0x84>
    117a:	a9 f7       	brne	.-22     	; 0x1166 <__ultoa_invert+0x6c>
    117c:	ea cf       	rjmp	.-44     	; 0x1152 <__ultoa_invert+0x58>
    117e:	b4 e0       	ldi	r27, 0x04	; 4
    1180:	a6 95       	lsr	r26
    1182:	97 95       	ror	r25
    1184:	87 95       	ror	r24
    1186:	77 95       	ror	r23
    1188:	67 95       	ror	r22
    118a:	ba 95       	dec	r27
    118c:	c9 f7       	brne	.-14     	; 0x1180 <__ultoa_invert+0x86>
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 05       	cpc	r22, r1
    1192:	71 05       	cpc	r23, r1
    1194:	08 95       	ret
    1196:	9b 01       	movw	r18, r22
    1198:	ac 01       	movw	r20, r24
    119a:	0a 2e       	mov	r0, r26
    119c:	06 94       	lsr	r0
    119e:	57 95       	ror	r21
    11a0:	47 95       	ror	r20
    11a2:	37 95       	ror	r19
    11a4:	27 95       	ror	r18
    11a6:	ba 95       	dec	r27
    11a8:	c9 f7       	brne	.-14     	; 0x119c <__ultoa_invert+0xa2>
    11aa:	62 0f       	add	r22, r18
    11ac:	73 1f       	adc	r23, r19
    11ae:	84 1f       	adc	r24, r20
    11b0:	95 1f       	adc	r25, r21
    11b2:	a0 1d       	adc	r26, r0
    11b4:	08 95       	ret

000011b6 <__prologue_saves__>:
    11b6:	2f 92       	push	r2
    11b8:	3f 92       	push	r3
    11ba:	4f 92       	push	r4
    11bc:	5f 92       	push	r5
    11be:	6f 92       	push	r6
    11c0:	7f 92       	push	r7
    11c2:	8f 92       	push	r8
    11c4:	9f 92       	push	r9
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	ca 1b       	sub	r28, r26
    11e0:	db 0b       	sbc	r29, r27
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	09 94       	ijmp

000011ee <__epilogue_restores__>:
    11ee:	2a 88       	ldd	r2, Y+18	; 0x12
    11f0:	39 88       	ldd	r3, Y+17	; 0x11
    11f2:	48 88       	ldd	r4, Y+16	; 0x10
    11f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    11f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    11f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    11fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    11fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    11fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1200:	b9 84       	ldd	r11, Y+9	; 0x09
    1202:	c8 84       	ldd	r12, Y+8	; 0x08
    1204:	df 80       	ldd	r13, Y+7	; 0x07
    1206:	ee 80       	ldd	r14, Y+6	; 0x06
    1208:	fd 80       	ldd	r15, Y+5	; 0x05
    120a:	0c 81       	ldd	r16, Y+4	; 0x04
    120c:	1b 81       	ldd	r17, Y+3	; 0x03
    120e:	aa 81       	ldd	r26, Y+2	; 0x02
    1210:	b9 81       	ldd	r27, Y+1	; 0x01
    1212:	ce 0f       	add	r28, r30
    1214:	d1 1d       	adc	r29, r1
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	ed 01       	movw	r28, r26
    1222:	08 95       	ret

00001224 <_exit>:
    1224:	f8 94       	cli

00001226 <__stop_program>:
    1226:	ff cf       	rjmp	.-2      	; 0x1226 <__stop_program>
