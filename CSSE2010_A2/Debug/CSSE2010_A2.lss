
CSSE2010_A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000013c8  0000145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000132  00800162  00800162  000014be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002255  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104b  00000000  00000000  00003a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001561  00000000  00000000  00004a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000069c  00000000  00000000  00005fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bf7  00000000  00000000  00006674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001564  00000000  00000000  0000726b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000087cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_5>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_20>
      54:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__vector_21>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	53 74       	andi	r21, 0x43	; 67
      7e:	75 64       	ori	r23, 0x45	; 69
      80:	65 6e       	ori	r22, 0xE5	; 229
      82:	74 20       	and	r7, r4
      84:	4e 75       	andi	r20, 0x5E	; 94
      86:	6d 62       	ori	r22, 0x2D	; 45
      88:	65 72       	andi	r22, 0x25	; 37
      8a:	3a 20       	and	r3, r10
      8c:	34 38       	cpi	r19, 0x84	; 132
      8e:	38 34       	cpi	r19, 0x48	; 72
      90:	30 34       	cpi	r19, 0x40	; 64
      92:	36 38       	cpi	r19, 0x86	; 134
	...

00000095 <__c.2252>:
      95:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
      a5:	20 62 79 20 4c 61 63 68 6c 61 6e 20 48 6f 6c 6c      by Lachlan Holl
      b5:	69 64 61 79 00                                      iday.

000000ba <__c.2250>:
      ba:	45 6c 65 76 61 74 6f 72 20 43 6f 6e 74 72 6f 6c     Elevator Control
      ca:	6c 65 72 00                                         ler.

000000ce <__c.2040>:
      ce:	1b 5b 32 4a 00                                      .[2J.

000000d3 <__c.2025>:
      d3:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e8 ec       	ldi	r30, 0xC8	; 200
      f0:	f3 e1       	ldi	r31, 0x13	; 19
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a2 36       	cpi	r26, 0x62	; 98
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	22 e0       	ldi	r18, 0x02	; 2
     100:	a2 e6       	ldi	r26, 0x62	; 98
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a4 39       	cpi	r26, 0x94	; 148
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 2e 04 	call	0x85c	; 0x85c <main>
     112:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     11a:	e8 e6       	ldi	r30, 0x68	; 104
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	82 60       	ori	r24, 0x02	; 2
     122:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     124:	8b b3       	in	r24, 0x1b	; 27
     126:	82 60       	ori	r24, 0x02	; 2
     128:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     12a:	ec e6       	ldi	r30, 0x6C	; 108
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	8f 60       	ori	r24, 0x0F	; 15
     132:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     134:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
     138:	08 95       	ret

0000013a <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     13a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     13e:	18 16       	cp	r1, r24
     140:	14 f5       	brge	.+68     	; 0x186 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     142:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     146:	6f b7       	in	r22, 0x3f	; 63
		cli();
     148:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	09 c0       	rjmp	.+18     	; 0x160 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     14e:	f9 01       	movw	r30, r18
     150:	ed 59       	subi	r30, 0x9D	; 157
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	40 81       	ld	r20, Z
     156:	f9 01       	movw	r30, r18
     158:	ee 59       	subi	r30, 0x9E	; 158
     15a:	fe 4f       	sbci	r31, 0xFE	; 254
     15c:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     15e:	9f 5f       	subi	r25, 0xFF	; 255
     160:	29 2f       	mov	r18, r25
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <__data_end>
     168:	04 2e       	mov	r0, r20
     16a:	00 0c       	add	r0, r0
     16c:	55 0b       	sbc	r21, r21
     16e:	24 17       	cp	r18, r20
     170:	35 07       	cpc	r19, r21
     172:	6c f3       	brlt	.-38     	; 0x14e <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     174:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <__data_end>
     178:	91 50       	subi	r25, 0x01	; 1
     17a:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__data_end>
		
		if(interrupts_were_enabled) {
     17e:	66 23       	and	r22, r22
     180:	1c f4       	brge	.+6      	; 0x188 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     182:	78 94       	sei
     184:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     186:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     188:	08 95       	ret

0000018a <__vector_5>:


// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	8f 93       	push	r24
     19c:	9f 93       	push	r25
     19e:	ef 93       	push	r30
     1a0:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1a2:	43 b1       	in	r20, 0x03	; 3
     1a4:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	26 c0       	rjmp	.+76     	; 0x1f6 <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     1aa:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <__data_end>
     1ae:	94 30       	cpi	r25, 0x04	; 4
     1b0:	0c f5       	brge	.+66     	; 0x1f4 <__vector_5+0x6a>
     1b2:	24 2f       	mov	r18, r20
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	08 2e       	mov	r0, r24
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_5+0x34>
     1ba:	35 95       	asr	r19
     1bc:	27 95       	ror	r18
     1be:	0a 94       	dec	r0
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <__vector_5+0x30>
     1c2:	20 ff       	sbrs	r18, 0
     1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <__vector_5+0x6a>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     1c6:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <last_button_state>
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	08 2e       	mov	r0, r24
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_5+0x4a>
     1d0:	35 95       	asr	r19
     1d2:	27 95       	ror	r18
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     1d8:	20 fd       	sbrc	r18, 0
     1da:	0c c0       	rjmp	.+24     	; 0x1f4 <__vector_5+0x6a>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     1dc:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <__data_end>
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	9e 0f       	add	r25, r30
     1e4:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__data_end>
     1e8:	0e 2e       	mov	r0, r30
     1ea:	00 0c       	add	r0, r0
     1ec:	ff 0b       	sbc	r31, r31
     1ee:	ed 59       	subi	r30, 0x9D	; 157
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     1f4:	8f 5f       	subi	r24, 0xFF	; 255
     1f6:	84 30       	cpi	r24, 0x04	; 4
     1f8:	c0 f2       	brcs	.-80     	; 0x1aa <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     1fa:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <last_button_state>
}
     1fe:	ff 91       	pop	r31
     200:	ef 91       	pop	r30
     202:	9f 91       	pop	r25
     204:	8f 91       	pop	r24
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
     210:	0f 90       	pop	r0
     212:	1f 90       	pop	r1
     214:	18 95       	reti

00000216 <initialise_display>:
	(1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0) | (0<<8)
	};

void initialise_display(void) {
	// clear the LED matrix
	ledmatrix_clear();
     216:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ledmatrix_clear>
     21a:	08 95       	ret

0000021c <start_display>:
}

void start_display(void) {
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	28 97       	sbiw	r28, 0x08	; 8
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     232:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     236:	10 e0       	ldi	r17, 0x00	; 0
     238:	2c c0       	rjmp	.+88     	; 0x292 <start_display+0x76>
		col_data = elevator_display[col];
     23a:	e1 2f       	mov	r30, r17
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	e1 5f       	subi	r30, 0xF1	; 241
     244:	fe 4f       	sbci	r31, 0xFE	; 254
     246:	20 81       	ld	r18, Z
     248:	31 81       	ldd	r19, Z+1	; 0x01
		// using the 9th bit as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x0100) {
     24a:	30 ff       	sbrs	r19, 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <start_display+0x36>
			colour = COLOUR_RED;
     24e:	9f e0       	ldi	r25, 0x0F	; 15
     250:	01 c0       	rjmp	.+2      	; 0x254 <start_display+0x38>
		} else {
			colour = COLOUR_GREEN;
     252:	90 ef       	ldi	r25, 0xF0	; 240
		}
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	14 c0       	rjmp	.+40     	; 0x280 <start_display+0x64>
			if(col_data & 0x01) {
     258:	20 ff       	sbrs	r18, 0
     25a:	08 c0       	rjmp	.+16     	; 0x26c <start_display+0x50>
				column_colour_data[i] = colour;
     25c:	e1 e0       	ldi	r30, 0x01	; 1
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	ec 0f       	add	r30, r28
     262:	fd 1f       	adc	r31, r29
     264:	e8 0f       	add	r30, r24
     266:	f1 1d       	adc	r31, r1
     268:	90 83       	st	Z, r25
     26a:	07 c0       	rjmp	.+14     	; 0x27a <start_display+0x5e>
				} else {
				column_colour_data[i] = 0;
     26c:	e1 e0       	ldi	r30, 0x01	; 1
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ec 0f       	add	r30, r28
     272:	fd 1f       	adc	r31, r29
     274:	e8 0f       	add	r30, r24
     276:	f1 1d       	adc	r31, r1
     278:	10 82       	st	Z, r1
			}
			col_data >>= 1;
     27a:	36 95       	lsr	r19
     27c:	27 95       	ror	r18
			colour = COLOUR_RED;
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	88 30       	cpi	r24, 0x08	; 8
     282:	50 f3       	brcs	.-44     	; 0x258 <start_display+0x3c>
				column_colour_data[i] = 0;
			}
			col_data >>= 1;
		}
		//column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
     284:	be 01       	movw	r22, r28
     286:	6f 5f       	subi	r22, 0xFF	; 255
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	81 2f       	mov	r24, r17
     28c:	0e 94 57 04 	call	0x8ae	; 0x8ae <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     290:	1f 5f       	subi	r17, 0xFF	; 255
     292:	10 31       	cpi	r17, 0x10	; 16
     294:	90 f2       	brcs	.-92     	; 0x23a <start_display+0x1e>
		}
		//column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
	
}
     296:	28 96       	adiw	r28, 0x08	; 8
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <start_display_animation>:

void start_display_animation(uint8_t frame) {
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	28 97       	sbiw	r28, 0x08	; 8
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	08 2f       	mov	r16, r24
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
     2c4:	19 e0       	ldi	r17, 0x09	; 9
     2c6:	3a c0       	rjmp	.+116    	; 0x33c <start_display_animation+0x92>
		col_data = (1<<7)|(1<<(3-frame))|(1<<(4+frame))|(1<<0);
     2c8:	40 2f       	mov	r20, r16
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	23 e0       	ldi	r18, 0x03	; 3
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	24 1b       	sub	r18, r20
     2d2:	35 0b       	sbc	r19, r21
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <start_display_animation+0x36>
     2dc:	66 0f       	add	r22, r22
     2de:	77 1f       	adc	r23, r23
     2e0:	2a 95       	dec	r18
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <start_display_animation+0x32>
     2e4:	9b 01       	movw	r18, r22
     2e6:	20 68       	ori	r18, 0x80	; 128
     2e8:	4c 5f       	subi	r20, 0xFC	; 252
     2ea:	5f 4f       	sbci	r21, 0xFF	; 255
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <start_display_animation+0x48>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	4a 95       	dec	r20
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <start_display_animation+0x44>
     2f6:	28 2b       	or	r18, r24
     2f8:	39 2b       	or	r19, r25
     2fa:	21 60       	ori	r18, 0x01	; 1
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	15 c0       	rjmp	.+42     	; 0x32a <start_display_animation+0x80>
			if(col_data & 0x01) {
     300:	20 ff       	sbrs	r18, 0
     302:	09 c0       	rjmp	.+18     	; 0x316 <start_display_animation+0x6c>
				column_colour_data[i] = COLOUR_GREEN;
     304:	e1 e0       	ldi	r30, 0x01	; 1
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ec 0f       	add	r30, r28
     30a:	fd 1f       	adc	r31, r29
     30c:	e8 0f       	add	r30, r24
     30e:	f1 1d       	adc	r31, r1
     310:	90 ef       	ldi	r25, 0xF0	; 240
     312:	90 83       	st	Z, r25
     314:	07 c0       	rjmp	.+14     	; 0x324 <start_display_animation+0x7a>
				} else {
				column_colour_data[i] = 0;
     316:	e1 e0       	ldi	r30, 0x01	; 1
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ec 0f       	add	r30, r28
     31c:	fd 1f       	adc	r31, r29
     31e:	e8 0f       	add	r30, r24
     320:	f1 1d       	adc	r31, r1
     322:	10 82       	st	Z, r1
			}
			col_data >>= 1;
     324:	36 95       	lsr	r19
     326:	27 95       	ror	r18
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
		col_data = (1<<7)|(1<<(3-frame))|(1<<(4+frame))|(1<<0);
		// go through the bottom 8 bits and set any to be the correct colour
		for(uint8_t i = 0; i < 8; i++) {
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	88 30       	cpi	r24, 0x08	; 8
     32c:	48 f3       	brcs	.-46     	; 0x300 <start_display_animation+0x56>
				} else {
				column_colour_data[i] = 0;
			}
			col_data >>= 1;
		}
		ledmatrix_update_column(col, column_colour_data);
     32e:	be 01       	movw	r22, r28
     330:	6f 5f       	subi	r22, 0xFF	; 255
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	81 2f       	mov	r24, r17
     336:	0e 94 57 04 	call	0x8ae	; 0x8ae <ledmatrix_update_column>
void start_display_animation(uint8_t frame) {
	MatrixColumn column_colour_data;
	uint16_t col_data;
		
	// Doors
	for (uint8_t col = 9; col < MATRIX_NUM_COLUMNS-1; col++) {
     33a:	1f 5f       	subi	r17, 0xFF	; 255
     33c:	1f 30       	cpi	r17, 0x0F	; 15
     33e:	20 f2       	brcs	.-120    	; 0x2c8 <start_display_animation+0x1e>
			}
			col_data >>= 1;
		}
		ledmatrix_update_column(col, column_colour_data);
	}
}
     340:	28 96       	adiw	r28, 0x08	; 8
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	08 95       	ret

00000356 <update_square_colour>:
 */
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	
	// first check that this is a square within the game field
	// if outside the game field, don't update anything
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
     356:	88 30       	cpi	r24, 0x08	; 8
     358:	08 f5       	brcc	.+66     	; 0x39c <update_square_colour+0x46>
     35a:	60 31       	cpi	r22, 0x10	; 16
     35c:	f8 f4       	brcc	.+62     	; 0x39c <update_square_colour+0x46>
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;

	if (object == ELEVATOR) {
     35e:	41 30       	cpi	r20, 0x01	; 1
     360:	61 f0       	breq	.+24     	; 0x37a <update_square_colour+0x24>
		colour = MATRIX_COLOUR_ELEVATOR;
	} else if (object == FLOOR) {
     362:	42 30       	cpi	r20, 0x02	; 2
     364:	61 f0       	breq	.+24     	; 0x37e <update_square_colour+0x28>
		colour = MATRIX_COLOUR_FLOOR;
	} else if (object == TRAVELLER_TO_0) {
     366:	43 30       	cpi	r20, 0x03	; 3
     368:	61 f0       	breq	.+24     	; 0x382 <update_square_colour+0x2c>
		colour = MATRIX_COLOUR_TRAVELLER_0;
	} else if (object == TRAVELLER_TO_1) {
     36a:	44 30       	cpi	r20, 0x04	; 4
     36c:	61 f0       	breq	.+24     	; 0x386 <update_square_colour+0x30>
	colour = MATRIX_COLOUR_TRAVELLER_1;
	} else if (object == TRAVELLER_TO_2) {
     36e:	45 30       	cpi	r20, 0x05	; 5
     370:	61 f0       	breq	.+24     	; 0x38a <update_square_colour+0x34>
	colour = MATRIX_COLOUR_TRAVELLER_2;
	} else if (object == TRAVELLER_TO_3) {
     372:	46 30       	cpi	r20, 0x06	; 6
     374:	61 f4       	brne	.+24     	; 0x38e <update_square_colour+0x38>
	colour = MATRIX_COLOUR_TRAVELLER_3;
     376:	43 e1       	ldi	r20, 0x13	; 19
     378:	0b c0       	rjmp	.+22     	; 0x390 <update_square_colour+0x3a>
	
	// determine which colour corresponds to this object
	PixelColour colour;

	if (object == ELEVATOR) {
		colour = MATRIX_COLOUR_ELEVATOR;
     37a:	4f e0       	ldi	r20, 0x0F	; 15
     37c:	09 c0       	rjmp	.+18     	; 0x390 <update_square_colour+0x3a>
	} else if (object == FLOOR) {
		colour = MATRIX_COLOUR_FLOOR;
     37e:	40 ef       	ldi	r20, 0xF0	; 240
     380:	07 c0       	rjmp	.+14     	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_0) {
		colour = MATRIX_COLOUR_TRAVELLER_0;
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	05 c0       	rjmp	.+10     	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_1) {
	colour = MATRIX_COLOUR_TRAVELLER_1;
     386:	41 e1       	ldi	r20, 0x11	; 17
     388:	03 c0       	rjmp	.+6      	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_2) {
	colour = MATRIX_COLOUR_TRAVELLER_2;
     38a:	45 e3       	ldi	r20, 0x35	; 53
     38c:	01 c0       	rjmp	.+2      	; 0x390 <update_square_colour+0x3a>
	} else if (object == TRAVELLER_TO_3) {
	colour = MATRIX_COLOUR_TRAVELLER_3;
	} else {
		// anything unexpected (or empty) will be black
		colour = MATRIX_COLOUR_EMPTY;
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	96 2f       	mov	r25, r22
     392:	68 2f       	mov	r22, r24
	/* x and y are swapped here because the ledmatrix.c code
	 * treats the matrix as being horizontal, while the elevator
	 * controller treats the matrix vertically. We also want x
	 * to be interpreted as from bottom to top, not top to bottom.
	 */
	ledmatrix_update_pixel(15 - y, x, colour); 
     394:	8f e0       	ldi	r24, 0x0F	; 15
     396:	89 1b       	sub	r24, r25
     398:	0e 94 38 04 	call	0x870	; 0x870 <ledmatrix_update_pixel>
     39c:	08 95       	ret

0000039e <initialise_hardware>:
 * @arg none
 * @retval none
*/
void initialise_hardware(void) {
	
	ledmatrix_setup();
     39e:	0e 94 34 04 	call	0x868	; 0x868 <ledmatrix_setup>
	init_button_interrupts();
     3a2:	0e 94 8d 00 	call	0x11a	; 0x11a <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	7b e4       	ldi	r23, 0x4B	; 75
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 de 04 	call	0x9bc	; 0x9bc <init_serial_stdio>
	
	init_timer0();
     3b4:	0e 94 12 06 	call	0xc24	; 0xc24 <init_timer0>
	
	// Turn on global interrupts
	sei();
     3b8:	78 94       	sei
     3ba:	08 95       	ret

000003bc <start_screen>:
/**
 * @brief Displays the "EC" start screen with elevator symbol
 * @arg none
 * @retval none
*/
void start_screen(void) {
     3bc:	8f 92       	push	r8
     3be:	9f 92       	push	r9
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
     3d0:	0e 94 09 06 	call	0xc12	; 0xc12 <clear_terminal>
	move_terminal_cursor(10,10);
     3d4:	6a e0       	ldi	r22, 0x0A	; 10
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <move_terminal_cursor>
	printf_P(PSTR("Elevator Controller"));
     3e0:	8a eb       	ldi	r24, 0xBA	; 186
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	9f 93       	push	r25
     3e6:	8f 93       	push	r24
     3e8:	0e 94 f4 06 	call	0xde8	; 0xde8 <printf_P>
	move_terminal_cursor(10,12);
     3ec:	6c e0       	ldi	r22, 0x0C	; 12
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <move_terminal_cursor>
	printf_P(PSTR("CSSE2010 project by Lachlan Holliday"));
     3f8:	85 e9       	ldi	r24, 0x95	; 149
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	9f 93       	push	r25
     3fe:	8f 93       	push	r24
     400:	0e 94 f4 06 	call	0xde8	; 0xde8 <printf_P>
	move_terminal_cursor(10,14);
     404:	6e e0       	ldi	r22, 0x0E	; 14
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	8a e0       	ldi	r24, 0x0A	; 10
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <move_terminal_cursor>
	printf_P(PSTR("Student Number: 48840468"));
     410:	8c e7       	ldi	r24, 0x7C	; 124
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	0e 94 f4 06 	call	0xde8	; 0xde8 <printf_P>
	
	// Show start screen
	start_display();
     41c:	0e 94 0e 01 	call	0x21c	; 0x21c <start_display>
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
	
	// Animation variables
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
	uint8_t frame = 0;
	uint8_t doors_opening_closing = 1; // 1 => opening, 0 => closing
     42c:	d1 e0       	ldi	r29, 0x01	; 1
	start_display();
	
	// Animation variables
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
	uint8_t frame = 0;
     42e:	c0 e0       	ldi	r28, 0x00	; 0
	// Show start screen
	start_display();
	
	// Animation variables
	uint32_t doors_frame_time = 0;
	uint32_t interval_delay = 150;
     430:	0f 2e       	mov	r0, r31
     432:	f6 e9       	ldi	r31, 0x96	; 150
     434:	8f 2e       	mov	r8, r31
     436:	91 2c       	mov	r9, r1
     438:	a1 2c       	mov	r10, r1
     43a:	b1 2c       	mov	r11, r1
     43c:	f0 2d       	mov	r31, r0
	
	// Show start screen
	start_display();
	
	// Animation variables
	uint32_t doors_frame_time = 0;
     43e:	c1 2c       	mov	r12, r1
     440:	d1 2c       	mov	r13, r1
     442:	76 01       	movw	r14, r12
	// Wait until a button is pressed, or 's' is pressed on the terminal
	while(1) {
		
		// Don't worry about this if/else tree. Its purely for animating
		// the elevator doors on the start screen
		if (get_current_time() - doors_frame_time  > interval_delay) {
     444:	0e 94 2a 06 	call	0xc54	; 0xc54 <get_current_time>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	8c 19       	sub	r24, r12
     44e:	9d 09       	sbc	r25, r13
     450:	ae 09       	sbc	r26, r14
     452:	bf 09       	sbc	r27, r15
     454:	88 16       	cp	r8, r24
     456:	99 06       	cpc	r9, r25
     458:	aa 06       	cpc	r10, r26
     45a:	bb 06       	cpc	r11, r27
     45c:	c0 f5       	brcc	.+112    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			start_display_animation(frame);
     45e:	8c 2f       	mov	r24, r28
     460:	0e 94 55 01 	call	0x2aa	; 0x2aa <start_display_animation>
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
     464:	0e 94 2a 06 	call	0xc54	; 0xc54 <get_current_time>
     468:	6b 01       	movw	r12, r22
     46a:	7c 01       	movw	r14, r24
			if (doors_opening_closing) {
     46c:	dd 23       	and	r29, r29
     46e:	b1 f0       	breq	.+44     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
				interval_delay = 150;
				frame++;
     470:	cf 5f       	subi	r28, 0xFF	; 255
				if (frame == 1) interval_delay = 2000;
     472:	c1 30       	cpi	r28, 0x01	; 1
     474:	41 f0       	breq	.+16     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		// the elevator doors on the start screen
		if (get_current_time() - doors_frame_time  > interval_delay) {
			start_display_animation(frame);
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
			if (doors_opening_closing) {
				interval_delay = 150;
     476:	0f 2e       	mov	r0, r31
     478:	f6 e9       	ldi	r31, 0x96	; 150
     47a:	8f 2e       	mov	r8, r31
     47c:	91 2c       	mov	r9, r1
     47e:	a1 2c       	mov	r10, r1
     480:	b1 2c       	mov	r11, r1
     482:	f0 2d       	mov	r31, r0
     484:	08 c0       	rjmp	.+16     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
				frame++;
				if (frame == 1) interval_delay = 2000;
     486:	0f 2e       	mov	r0, r31
     488:	f0 ed       	ldi	r31, 0xD0	; 208
     48a:	8f 2e       	mov	r8, r31
     48c:	f7 e0       	ldi	r31, 0x07	; 7
     48e:	9f 2e       	mov	r9, r31
     490:	a1 2c       	mov	r10, r1
     492:	b1 2c       	mov	r11, r1
     494:	f0 2d       	mov	r31, r0
				if (frame == 3) doors_opening_closing = 0;
     496:	c3 30       	cpi	r28, 0x03	; 3
     498:	d1 f4       	brne	.+52     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     49a:	16 c0       	rjmp	.+44     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
			} else {
				interval_delay = 150;
				frame--;
     49c:	c1 50       	subi	r28, 0x01	; 1
				if (frame == 2) interval_delay = 500;
     49e:	c2 30       	cpi	r28, 0x02	; 2
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
				interval_delay = 150;
				frame++;
				if (frame == 1) interval_delay = 2000;
				if (frame == 3) doors_opening_closing = 0;
			} else {
				interval_delay = 150;
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f6 e9       	ldi	r31, 0x96	; 150
     4a6:	8f 2e       	mov	r8, r31
     4a8:	91 2c       	mov	r9, r1
     4aa:	a1 2c       	mov	r10, r1
     4ac:	b1 2c       	mov	r11, r1
     4ae:	f0 2d       	mov	r31, r0
     4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				frame--;
				if (frame == 2) interval_delay = 500;
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f4 ef       	ldi	r31, 0xF4	; 244
     4b6:	8f 2e       	mov	r8, r31
     4b8:	99 24       	eor	r9, r9
     4ba:	93 94       	inc	r9
     4bc:	a1 2c       	mov	r10, r1
     4be:	b1 2c       	mov	r11, r1
     4c0:	f0 2d       	mov	r31, r0
				if (frame == 0) doors_opening_closing = 1;
     4c2:	cc 23       	and	r28, r28
     4c4:	19 f0       	breq	.+6      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			doors_frame_time   = get_current_time(); // Reset delay until next movement update
			if (doors_opening_closing) {
				interval_delay = 150;
				frame++;
				if (frame == 1) interval_delay = 2000;
				if (frame == 3) doors_opening_closing = 0;
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			} else {
				interval_delay = 150;
				frame--;
				if (frame == 2) interval_delay = 500;
				if (frame == 0) doors_opening_closing = 1;
     4cc:	d1 e0       	ldi	r29, 0x01	; 1
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     4ce:	0e 94 25 05 	call	0xa4a	; 0xa4a <serial_input_available>
     4d2:	88 23       	and	r24, r24
     4d4:	39 f0       	breq	.+14     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			serial_input = fgetc(stdin);
     4d6:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__iob>
     4da:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__iob+0x1>
     4de:	0e 94 a0 06 	call	0xd40	; 0xd40 <fgetc>
     4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     4e6:	83 37       	cpi	r24, 0x73	; 115
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     4ea:	83 35       	cpi	r24, 0x53	; 83
     4ec:	29 f0       	breq	.+10     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     4ee:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     4f2:	8f 3f       	cpi	r24, 0xFF	; 255
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     4f6:	a6 cf       	rjmp	.-180    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			break;
		}
	}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	bf 90       	pop	r11
     506:	af 90       	pop	r10
     508:	9f 90       	pop	r9
     50a:	8f 90       	pop	r8
     50c:	08 95       	ret

0000050e <draw_floors>:
/**
 * @brief Draws 4 lines of "FLOOR" coloured pixels
 * @arg none
 * @retval none
*/
void draw_floors(void) {
     50e:	cf 93       	push	r28
	for (uint8_t i = 0; i < WIDTH; i++) {
     510:	c0 e0       	ldi	r28, 0x00	; 0
     512:	15 c0       	rjmp	.+42     	; 0x53e <draw_floors+0x30>
		update_square_colour(i, FLOOR_0, FLOOR);
     514:	42 e0       	ldi	r20, 0x02	; 2
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	8c 2f       	mov	r24, r28
     51a:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_1, FLOOR);
     51e:	42 e0       	ldi	r20, 0x02	; 2
     520:	64 e0       	ldi	r22, 0x04	; 4
     522:	8c 2f       	mov	r24, r28
     524:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_2, FLOOR);
     528:	42 e0       	ldi	r20, 0x02	; 2
     52a:	68 e0       	ldi	r22, 0x08	; 8
     52c:	8c 2f       	mov	r24, r28
     52e:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(i, FLOOR_3, FLOOR);
     532:	42 e0       	ldi	r20, 0x02	; 2
     534:	6c e0       	ldi	r22, 0x0C	; 12
     536:	8c 2f       	mov	r24, r28
     538:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
 * @brief Draws 4 lines of "FLOOR" coloured pixels
 * @arg none
 * @retval none
*/
void draw_floors(void) {
	for (uint8_t i = 0; i < WIDTH; i++) {
     53c:	cf 5f       	subi	r28, 0xFF	; 255
     53e:	c8 30       	cpi	r28, 0x08	; 8
     540:	48 f3       	brcs	.-46     	; 0x514 <draw_floors+0x6>
		update_square_colour(i, FLOOR_0, FLOOR);
		update_square_colour(i, FLOOR_1, FLOOR);
		update_square_colour(i, FLOOR_2, FLOOR);
		update_square_colour(i, FLOOR_3, FLOOR);
	}
}
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <draw_traveller>:

void draw_traveller(void) {
	if (last_traveller_floor != UNDEF_FLOOR) {
     546:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     54a:	6f 3f       	cpi	r22, 0xFF	; 255
     54c:	49 f0       	breq	.+18     	; 0x560 <draw_traveller+0x1a>
		int prev_row = last_traveller_floor + 1;  // two LEDs above the floor line
     54e:	06 2e       	mov	r0, r22
     550:	00 0c       	add	r0, r0
     552:	77 0b       	sbc	r23, r23
     554:	6f 5f       	subi	r22, 0xFF	; 255
     556:	7f 4f       	sbci	r23, 0xFF	; 255
		update_square_colour(TRAVELLER_COLUMN, prev_row, EMPTY_SQUARE);
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	85 e0       	ldi	r24, 0x05	; 5
     55c:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
	}
	if (traveller_present) {
     560:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <traveller_present>
     564:	88 23       	and	r24, r24
     566:	81 f0       	breq	.+32     	; 0x588 <draw_traveller+0x42>
		int row = traveller_floor + 1;
     568:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <traveller_floor>
     56c:	06 2e       	mov	r0, r22
     56e:	00 0c       	add	r0, r0
     570:	77 0b       	sbc	r23, r23
     572:	6f 5f       	subi	r22, 0xFF	; 255
     574:	7f 4f       	sbci	r23, 0xFF	; 255
		update_square_colour(TRAVELLER_COLUMN, row, TRAVELLER_TO_0);
     576:	43 e0       	ldi	r20, 0x03	; 3
     578:	85 e0       	ldi	r24, 0x05	; 5
     57a:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		last_traveller_floor = traveller_floor;
     57e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <traveller_floor>
     582:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     586:	08 95       	ret
	} else {
		last_traveller_floor = UNDEF_FLOOR;
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     58e:	08 95       	ret

00000590 <draw_elevator>:
/**
 * @brief Draws the elevator at the current_position
 * @arg none
 * @retval none
*/
void draw_elevator(void) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
	static uint8_t old_position; // static variables maintain their value, every time the function is called
	
	int8_t y = 0; // Height position to draw elevator (i.e. y axis)
	
	// Clear where the elevator was
	if (old_position > current_position) { // Elevator going down - clear above
     594:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <old_position.2286>
     598:	26 2f       	mov	r18, r22
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <current_position>
     5a0:	08 2e       	mov	r0, r24
     5a2:	00 0c       	add	r0, r0
     5a4:	99 0b       	sbc	r25, r25
     5a6:	82 17       	cp	r24, r18
     5a8:	93 07       	cpc	r25, r19
     5aa:	1c f4       	brge	.+6      	; 0x5b2 <draw_elevator+0x22>
		y = old_position + 3;
     5ac:	c3 e0       	ldi	r28, 0x03	; 3
     5ae:	c6 0f       	add	r28, r22
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <draw_elevator+0x30>
		} else if (old_position < current_position) { // Elevator going up - clear below
     5b2:	28 17       	cp	r18, r24
     5b4:	39 07       	cpc	r19, r25
     5b6:	1c f4       	brge	.+6      	; 0x5be <draw_elevator+0x2e>
		y = old_position + 1;
     5b8:	c1 e0       	ldi	r28, 0x01	; 1
     5ba:	c6 0f       	add	r28, r22
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <draw_elevator+0x30>
void draw_elevator(void) {
	
	// Store where it used to be with old_position
	static uint8_t old_position; // static variables maintain their value, every time the function is called
	
	int8_t y = 0; // Height position to draw elevator (i.e. y axis)
     5be:	c0 e0       	ldi	r28, 0x00	; 0
	if (old_position > current_position) { // Elevator going down - clear above
		y = old_position + 3;
		} else if (old_position < current_position) { // Elevator going up - clear below
		y = old_position + 1;
	}
	if (y % 4 != 0) { // Do not draw over the floor's LEDs
     5c0:	8c 2f       	mov	r24, r28
     5c2:	83 70       	andi	r24, 0x03	; 3
     5c4:	51 f0       	breq	.+20     	; 0x5da <draw_elevator+0x4a>
		update_square_colour(1, y, EMPTY_SQUARE);
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	6c 2f       	mov	r22, r28
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(2, y, EMPTY_SQUARE);
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	6c 2f       	mov	r22, r28
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
	}
	old_position = current_position;
     5da:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <current_position>
     5de:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <old_position.2286>
	
	// Draw a 2x3 block representing the elevator
	for (uint8_t i = 1; i <= 3; i++) { // 3 is the height of the elevator sprite on the LED matrix
     5e2:	c1 e0       	ldi	r28, 0x01	; 1
     5e4:	11 c0       	rjmp	.+34     	; 0x608 <draw_elevator+0x78>
		y = current_position + i; // Adds current floor position to i=1->3 to draw elevator as 3-high block
     5e6:	d0 91 79 01 	lds	r29, 0x0179	; 0x800179 <current_position>
     5ea:	dc 0f       	add	r29, r28
		if (y % 4 != 0) { // Do not draw on the floor
     5ec:	8d 2f       	mov	r24, r29
     5ee:	83 70       	andi	r24, 0x03	; 3
     5f0:	51 f0       	breq	.+20     	; 0x606 <draw_elevator+0x76>
			update_square_colour(1, y, ELEVATOR);
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	6d 2f       	mov	r22, r29
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
			update_square_colour(2, y, ELEVATOR); // Elevator is 2 LEDs wide so draw twice
     5fc:	41 e0       	ldi	r20, 0x01	; 1
     5fe:	6d 2f       	mov	r22, r29
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	0e 94 ab 01 	call	0x356	; 0x356 <update_square_colour>
		update_square_colour(2, y, EMPTY_SQUARE);
	}
	old_position = current_position;
	
	// Draw a 2x3 block representing the elevator
	for (uint8_t i = 1; i <= 3; i++) { // 3 is the height of the elevator sprite on the LED matrix
     606:	cf 5f       	subi	r28, 0xFF	; 255
     608:	c4 30       	cpi	r28, 0x04	; 4
     60a:	68 f3       	brcs	.-38     	; 0x5e6 <draw_elevator+0x56>
		if (y % 4 != 0) { // Do not draw on the floor
			update_square_colour(1, y, ELEVATOR);
			update_square_colour(2, y, ELEVATOR); // Elevator is 2 LEDs wide so draw twice
		}
	}
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <handle_inputs>:
/**
 * @brief Reads btn values and serial input and adds a traveller as appropriate
 * @arg none
 * @retval none
*/
void handle_inputs(void) {
     612:	cf 93       	push	r28
		with the particular button that was pressed.
	
	*/
	
	// We need to check if any button has been pushed
	uint8_t btn = button_pushed();
     614:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
     618:	c8 2f       	mov	r28, r24
	char serial_input = -1;
	if (serial_input_available()) {
     61a:	0e 94 25 05 	call	0xa4a	; 0xa4a <serial_input_available>
     61e:	88 23       	and	r24, r24
     620:	39 f0       	breq	.+14     	; 0x630 <handle_inputs+0x1e>
		serial_input = fgetc(stdin);}
     622:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__iob>
     626:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__iob+0x1>
     62a:	0e 94 a0 06 	call	0xd40	; 0xd40 <fgetc>
     62e:	01 c0       	rjmp	.+2      	; 0x632 <handle_inputs+0x20>
	
	*/
	
	// We need to check if any button has been pushed
	uint8_t btn = button_pushed();
	char serial_input = -1;
     630:	8f ef       	ldi	r24, 0xFF	; 255
	if (serial_input_available()) {
		serial_input = fgetc(stdin);}
		
	if (traveller_present) {
     632:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <traveller_present>
     636:	91 11       	cpse	r25, r1
     638:	3a c0       	rjmp	.+116    	; 0x6ae <handle_inputs+0x9c>
		return;
	}
	
	if (btn == BUTTON0_PUSHED || serial_input == '0') {
     63a:	cc 23       	and	r28, r28
     63c:	11 f0       	breq	.+4      	; 0x642 <handle_inputs+0x30>
     63e:	80 33       	cpi	r24, 0x30	; 48
     640:	51 f4       	brne	.+20     	; 0x656 <handle_inputs+0x44>
		// Move to Floor 0
		destination = FLOOR_0;
     642:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <destination>
		traveller_present  = true;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <traveller_present>
		traveller_floor = FLOOR_0;
     64c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <traveller_floor>
		draw_traveller();
     650:	0e 94 a3 02 	call	0x546	; 0x546 <draw_traveller>
     654:	2c c0       	rjmp	.+88     	; 0x6ae <handle_inputs+0x9c>


		
	} else if (btn == BUTTON1_PUSHED || serial_input == '1') {
     656:	c1 30       	cpi	r28, 0x01	; 1
     658:	11 f0       	breq	.+4      	; 0x65e <handle_inputs+0x4c>
     65a:	81 33       	cpi	r24, 0x31	; 49
     65c:	59 f4       	brne	.+22     	; 0x674 <handle_inputs+0x62>
		// Move to Floor 1
		destination = FLOOR_1;
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <destination>
		traveller_floor = FLOOR_1;
     664:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <traveller_floor>
		traveller_present  = true;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <traveller_present>
		draw_traveller();
     66e:	0e 94 a3 02 	call	0x546	; 0x546 <draw_traveller>
     672:	1d c0       	rjmp	.+58     	; 0x6ae <handle_inputs+0x9c>



	} else if (btn == BUTTON2_PUSHED || serial_input == '2') {
     674:	c2 30       	cpi	r28, 0x02	; 2
     676:	11 f0       	breq	.+4      	; 0x67c <handle_inputs+0x6a>
     678:	82 33       	cpi	r24, 0x32	; 50
     67a:	59 f4       	brne	.+22     	; 0x692 <handle_inputs+0x80>
		// Move to Floor 2
		destination = FLOOR_2;
     67c:	88 e0       	ldi	r24, 0x08	; 8
     67e:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <destination>
		traveller_present  = true;
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <traveller_present>
		traveller_floor = FLOOR_2;
     688:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <traveller_floor>
		draw_traveller();
     68c:	0e 94 a3 02 	call	0x546	; 0x546 <draw_traveller>
     690:	0e c0       	rjmp	.+28     	; 0x6ae <handle_inputs+0x9c>

	
	} else if (btn == BUTTON3_PUSHED || serial_input == '3') {
     692:	c3 30       	cpi	r28, 0x03	; 3
     694:	11 f0       	breq	.+4      	; 0x69a <handle_inputs+0x88>
     696:	83 33       	cpi	r24, 0x33	; 51
     698:	51 f4       	brne	.+20     	; 0x6ae <handle_inputs+0x9c>
		// Move to Floor 3
		destination = FLOOR_3;
     69a:	8c e0       	ldi	r24, 0x0C	; 12
     69c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <destination>
		traveller_present  = true;
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <traveller_present>
		traveller_floor = FLOOR_3;
     6a6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <traveller_floor>
		draw_traveller();
     6aa:	0e 94 a3 02 	call	0x546	; 0x546 <draw_traveller>

	}
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <start_elevator_emulator>:
 * @retval none
*/
void start_elevator_emulator(void) {
	
	// Clear the serial terminal
	clear_terminal();
     6b2:	0e 94 09 06 	call	0xc12	; 0xc12 <clear_terminal>
	
	// Initialise Display
	initialise_display();
     6b6:	0e 94 0b 01 	call	0x216	; 0x216 <initialise_display>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     6ba:	0e 94 9d 00 	call	0x13a	; 0x13a <button_pushed>
	clear_serial_input_buffer();
     6be:	0e 94 2c 05 	call	0xa58	; 0xa58 <clear_serial_input_buffer>

	time_since_move = get_current_time();
     6c2:	0e 94 2a 06 	call	0xc54	; 0xc54 <get_current_time>
     6c6:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <time_since_move>
     6ca:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <time_since_move+0x1>
     6ce:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <time_since_move+0x2>
     6d2:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <time_since_move+0x3>
	
	current_position = FLOOR_0;
     6d6:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <current_position>
	destination      = FLOOR_0;
     6da:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <destination>
	current_floor    = FLOOR_0;
     6de:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <current_floor>
	direction        = "Stationary";
     6e2:	8f e2       	ldi	r24, 0x2F	; 47
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <direction+0x1>
     6ea:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <direction>
	moved            = true;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <moved>
	
	
	// Draw the floors and elevator
	draw_elevator();
     6f4:	0e 94 c8 02 	call	0x590	; 0x590 <draw_elevator>
	draw_floors();
     6f8:	0e 94 87 02 	call	0x50e	; 0x50e <draw_floors>
	
	current_position = FLOOR_0;
     6fc:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <current_position>
	destination = FLOOR_0;
     700:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <destination>
	
	while(true) {
		
		// Only update the elevator every 200 ms
		if (get_current_time() - time_since_move > 200) {	
     704:	0e 94 2a 06 	call	0xc54	; 0xc54 <get_current_time>
     708:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <time_since_move>
     70c:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <time_since_move+0x1>
     710:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <time_since_move+0x2>
     714:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <time_since_move+0x3>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	80 1b       	sub	r24, r16
     71e:	91 0b       	sbc	r25, r17
     720:	a2 0b       	sbc	r26, r18
     722:	b3 0b       	sbc	r27, r19
     724:	89 3c       	cpi	r24, 0xC9	; 201
     726:	91 05       	cpc	r25, r1
     728:	a1 05       	cpc	r26, r1
     72a:	b1 05       	cpc	r27, r1
     72c:	08 f4       	brcc	.+2      	; 0x730 <start_elevator_emulator+0x7e>
     72e:	5b c0       	rjmp	.+182    	; 0x7e6 <start_elevator_emulator+0x134>
			

			// Adjust the elevator based on where it needs to go
			if (destination - current_position > 0) { // Move up
     730:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <current_position>
     734:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <destination>
     738:	08 2e       	mov	r0, r24
     73a:	00 0c       	add	r0, r0
     73c:	99 0b       	sbc	r25, r25
     73e:	82 1b       	sub	r24, r18
     740:	91 09       	sbc	r25, r1
     742:	27 fd       	sbrc	r18, 7
     744:	93 95       	inc	r25
     746:	18 16       	cp	r1, r24
     748:	19 06       	cpc	r1, r25
     74a:	6c f4       	brge	.+26     	; 0x766 <start_elevator_emulator+0xb4>
				current_position++;
     74c:	2f 5f       	subi	r18, 0xFF	; 255
     74e:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <current_position>
				moved = true;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <moved>
				direction = "Up";
     758:	8a e3       	ldi	r24, 0x3A	; 58
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <direction+0x1>
     760:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <direction>
     764:	15 c0       	rjmp	.+42     	; 0x790 <start_elevator_emulator+0xde>
			} else if (destination - current_position < 0) { // Move down
     766:	99 23       	and	r25, r25
     768:	6c f4       	brge	.+26     	; 0x784 <start_elevator_emulator+0xd2>
				current_position--;
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <current_position>
				moved = true;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <moved>
				direction = "Down";
     776:	8d e3       	ldi	r24, 0x3D	; 61
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <direction+0x1>
     77e:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <direction>
     782:	06 c0       	rjmp	.+12     	; 0x790 <start_elevator_emulator+0xde>
			} else {
				direction = "Stationary";
     784:	8f e2       	ldi	r24, 0x2F	; 47
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <direction+0x1>
     78c:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <direction>
			}
			
			if (destination == current_position) {
     790:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <destination>
     794:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <current_position>
     798:	98 13       	cpse	r25, r24
     79a:	06 c0       	rjmp	.+12     	; 0x7a8 <start_elevator_emulator+0xf6>
				direction = "Stationary";
     79c:	2f e2       	ldi	r18, 0x2F	; 47
     79e:	31 e0       	ldi	r19, 0x01	; 1
     7a0:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <direction+0x1>
     7a4:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <direction>
			}
			
			if (traveller_present && current_position == traveller_floor) {
     7a8:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <traveller_present>
     7ac:	99 23       	and	r25, r25
     7ae:	41 f0       	breq	.+16     	; 0x7c0 <start_elevator_emulator+0x10e>
     7b0:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <traveller_floor>
     7b4:	89 13       	cpse	r24, r25
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <start_elevator_emulator+0x10e>
				traveller_present = false;
     7b8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <traveller_present>
				draw_traveller();
     7bc:	0e 94 a3 02 	call	0x546	; 0x546 <draw_traveller>
			}
			
			if (current_position % 4 == 0) {
     7c0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <current_position>
     7c4:	98 2f       	mov	r25, r24
     7c6:	93 70       	andi	r25, 0x03	; 3
     7c8:	11 f4       	brne	.+4      	; 0x7ce <start_elevator_emulator+0x11c>
				current_floor = current_position;
     7ca:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <current_floor>
			}
			
			// As we have potentially changed the elevator position, lets redraw it
			draw_elevator();
     7ce:	0e 94 c8 02 	call	0x590	; 0x590 <draw_elevator>
			
			time_since_move = get_current_time(); // Reset delay until next movement update
     7d2:	0e 94 2a 06 	call	0xc54	; 0xc54 <get_current_time>
     7d6:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <time_since_move>
     7da:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <time_since_move+0x1>
     7de:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <time_since_move+0x2>
     7e2:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <time_since_move+0x3>
		}
		if (moved) {
     7e6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <moved>
     7ea:	88 23       	and	r24, r24
     7ec:	a1 f1       	breq	.+104    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
			clear_terminal();
     7ee:	0e 94 09 06 	call	0xc12	; 0xc12 <clear_terminal>
            uint8_t floor_num = current_floor / 4;
     7f2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <current_floor>
     7f6:	88 23       	and	r24, r24
     7f8:	0c f4       	brge	.+2      	; 0x7fc <start_elevator_emulator+0x14a>
     7fa:	8d 5f       	subi	r24, 0xFD	; 253
     7fc:	18 2f       	mov	r17, r24
     7fe:	15 95       	asr	r17
     800:	15 95       	asr	r17
			move_terminal_cursor(10,10);
     802:	6a e0       	ldi	r22, 0x0A	; 10
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	8a e0       	ldi	r24, 0x0A	; 10
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <move_terminal_cursor>
			printf("Current Level: %d", floor_num);
     80e:	1f 92       	push	r1
     810:	1f 93       	push	r17
     812:	82 e4       	ldi	r24, 0x42	; 66
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>
			move_terminal_cursor(10,12);
     81e:	6c e0       	ldi	r22, 0x0C	; 12
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	8a e0       	ldi	r24, 0x0A	; 10
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <move_terminal_cursor>
			printf("Direction: %s", direction);
     82a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <direction+0x1>
     82e:	8f 93       	push	r24
     830:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <direction>
     834:	8f 93       	push	r24
     836:	84 e5       	ldi	r24, 0x54	; 84
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	9f 93       	push	r25
     83c:	8f 93       	push	r24
     83e:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>
			moved = false;
     842:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <moved>
     846:	8d b7       	in	r24, 0x3d	; 61
     848:	9e b7       	in	r25, 0x3e	; 62
     84a:	08 96       	adiw	r24, 0x08	; 8
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	9e bf       	out	0x3e, r25	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	8d bf       	out	0x3d, r24	; 61
		}
		
		// Handle any button or key inputs
		handle_inputs();
     856:	0e 94 09 03 	call	0x612	; 0x612 <handle_inputs>
	}
     85a:	54 cf       	rjmp	.-344    	; 0x704 <start_elevator_emulator+0x52>

0000085c <main>:
/* Main */

int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     85c:	0e 94 cf 01 	call	0x39e	; 0x39e <initialise_hardware>
	
	// Show the splash screen message. Returns when display is complete
	start_screen();
     860:	0e 94 de 01 	call	0x3bc	; 0x3bc <start_screen>
	
	// Start elevator controller software
	start_elevator_emulator();
     864:	0e 94 59 03 	call	0x6b2	; 0x6b2 <start_elevator_emulator>

00000868 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     868:	80 e8       	ldi	r24, 0x80	; 128
     86a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <spi_setup_master>
     86e:	08 95       	ret

00000870 <ledmatrix_update_pixel>:
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	80 31       	cpi	r24, 0x10	; 16
     878:	b0 f4       	brcc	.+44     	; 0x8a6 <ledmatrix_update_pixel+0x36>
     87a:	68 30       	cpi	r22, 0x08	; 8
     87c:	a0 f4       	brcc	.+40     	; 0x8a6 <ledmatrix_update_pixel+0x36>
     87e:	14 2f       	mov	r17, r20
     880:	c6 2f       	mov	r28, r22
     882:	d8 2f       	mov	r29, r24
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_send_byte>
     88a:	6c 2f       	mov	r22, r28
     88c:	67 70       	andi	r22, 0x07	; 7
     88e:	80 e1       	ldi	r24, 0x10	; 16
     890:	68 9f       	mul	r22, r24
     892:	90 01       	movw	r18, r0
     894:	11 24       	eor	r1, r1
     896:	8d 2f       	mov	r24, r29
     898:	8f 70       	andi	r24, 0x0F	; 15
     89a:	82 2b       	or	r24, r18
     89c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_send_byte>
     8a0:	81 2f       	mov	r24, r17
     8a2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_send_byte>
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	08 95       	ret

000008ae <ledmatrix_update_column>:
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	80 31       	cpi	r24, 0x10	; 16
     8b6:	a0 f4       	brcc	.+40     	; 0x8e0 <ledmatrix_update_column+0x32>
     8b8:	8b 01       	movw	r16, r22
     8ba:	c8 2f       	mov	r28, r24
     8bc:	83 e0       	ldi	r24, 0x03	; 3
     8be:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_send_byte>
     8c2:	8c 2f       	mov	r24, r28
     8c4:	8f 70       	andi	r24, 0x0F	; 15
     8c6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_send_byte>
     8ca:	c0 e0       	ldi	r28, 0x00	; 0
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <ledmatrix_update_column+0x2e>
     8ce:	f8 01       	movw	r30, r16
     8d0:	ec 0f       	add	r30, r28
     8d2:	f1 1d       	adc	r31, r1
     8d4:	80 81       	ld	r24, Z
     8d6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_send_byte>
     8da:	cf 5f       	subi	r28, 0xFF	; 255
     8dc:	c8 30       	cpi	r28, 0x08	; 8
     8de:	b8 f3       	brcs	.-18     	; 0x8ce <ledmatrix_update_column+0x20>
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     8e8:	8f e0       	ldi	r24, 0x0F	; 15
     8ea:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <spi_send_byte>
     8ee:	08 95       	ret

000008f0 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     8f0:	cf 93       	push	r28
     8f2:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     8f4:	8a 30       	cpi	r24, 0x0A	; 10
     8f6:	19 f4       	brne	.+6      	; 0x8fe <uart_put_char+0xe>
		uart_put_char('\r', stream);
     8f8:	8d e0       	ldi	r24, 0x0D	; 13
     8fa:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     8fe:	9f b7       	in	r25, 0x3f	; 63
     900:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
		if(!interrupts_enabled) {
     904:	99 23       	and	r25, r25
     906:	29 f1       	breq	.+74     	; 0x952 <__stack+0x53>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     908:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <bytes_in_out_buffer>
     90c:	8f 3f       	cpi	r24, 0xFF	; 255
     90e:	d1 f3       	breq	.-12     	; 0x904 <__stack+0x5>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     910:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     912:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <out_insert_pos>
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	8e 0f       	add	r24, r30
     91a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <out_insert_pos>
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	e4 58       	subi	r30, 0x84	; 132
     922:	fe 4f       	sbci	r31, 0xFE	; 254
     924:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     926:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <bytes_in_out_buffer>
     92a:	8f 5f       	subi	r24, 0xFF	; 255
     92c:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     930:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <out_insert_pos>
     934:	8f 3f       	cpi	r24, 0xFF	; 255
     936:	11 f4       	brne	.+4      	; 0x93c <__stack+0x3d>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     938:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     93c:	e1 ec       	ldi	r30, 0xC1	; 193
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	80 62       	ori	r24, 0x20	; 32
     944:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     946:	99 23       	and	r25, r25
     948:	39 f0       	breq	.+14     	; 0x958 <__stack+0x59>
		sei();
     94a:	78 94       	sei
	}
	return 0;
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0x5d>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
}
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     960:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <bytes_in_input_buffer>
     964:	88 23       	and	r24, r24
     966:	e1 f3       	breq	.-8      	; 0x960 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     968:	2f b7       	in	r18, 0x3f	; 63
     96a:	20 78       	andi	r18, 0x80	; 128
	cli();
     96c:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     96e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <input_insert_pos>
     972:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <bytes_in_input_buffer>
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	83 1b       	sub	r24, r19
     97a:	91 09       	sbc	r25, r1
     97c:	5a f4       	brpl	.+22     	; 0x994 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     97e:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <input_insert_pos>
     982:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <bytes_in_input_buffer>
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	e8 1b       	sub	r30, r24
     98a:	f1 09       	sbc	r31, r1
     98c:	e4 57       	subi	r30, 0x74	; 116
     98e:	fd 4f       	sbci	r31, 0xFD	; 253
     990:	80 81       	ld	r24, Z
     992:	0a c0       	rjmp	.+20     	; 0x9a8 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     994:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <input_insert_pos>
     998:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <bytes_in_input_buffer>
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	e8 1b       	sub	r30, r24
     9a0:	f1 09       	sbc	r31, r1
     9a2:	e4 58       	subi	r30, 0x84	; 132
     9a4:	fd 4f       	sbci	r31, 0xFD	; 253
     9a6:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     9a8:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <bytes_in_input_buffer>
     9ac:	91 50       	subi	r25, 0x01	; 1
     9ae:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <bytes_in_input_buffer>
	if(interrupts_enabled) {
     9b2:	22 23       	and	r18, r18
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <uart_get_char+0x58>
		sei();
     9b6:	78 94       	sei
	}	
	return c;
}
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	08 95       	ret

000009bc <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     9bc:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <out_insert_pos>
	bytes_in_out_buffer = 0;
     9c0:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <bytes_in_out_buffer>
	input_insert_pos = 0;
     9c4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <input_insert_pos>
	bytes_in_input_buffer = 0;
     9c8:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <bytes_in_input_buffer>
	input_overrun = 0;
     9cc:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     9d0:	40 93 6b 01 	sts	0x016B, r20	; 0x80016b <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	aa 1f       	adc	r26, r26
     9e6:	bb 1f       	adc	r27, r27
     9e8:	9c 01       	movw	r18, r24
     9ea:	ad 01       	movw	r20, r26
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	44 1f       	adc	r20, r20
     9f2:	55 1f       	adc	r21, r21
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	72 e1       	ldi	r23, 0x12	; 18
     9f8:	8a e7       	ldi	r24, 0x7A	; 122
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__divmodsi4>
     a00:	ba 01       	movw	r22, r20
     a02:	a9 01       	movw	r20, r18
     a04:	4f 5f       	subi	r20, 0xFF	; 255
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	6f 4f       	sbci	r22, 0xFF	; 255
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	db 01       	movw	r26, r22
     a0e:	ca 01       	movw	r24, r20
     a10:	1a f4       	brpl	.+6      	; 0xa18 <init_serial_stdio+0x5c>
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	a1 1d       	adc	r26, r1
     a16:	b1 1d       	adc	r27, r1
     a18:	b5 95       	asr	r27
     a1a:	a7 95       	ror	r26
     a1c:	97 95       	ror	r25
     a1e:	87 95       	ror	r24
     a20:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     a22:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a26:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     a2a:	e1 ec       	ldi	r30, 0xC1	; 193
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	88 e1       	ldi	r24, 0x18	; 24
     a30:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     a32:	80 81       	ld	r24, Z
     a34:	80 68       	ori	r24, 0x80	; 128
     a36:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     a38:	ee e8       	ldi	r30, 0x8E	; 142
     a3a:	f2 e0       	ldi	r31, 0x02	; 2
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	93 83       	std	Z+3, r25	; 0x03
     a42:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
     a48:	08 95       	ret

00000a4a <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     a4a:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <bytes_in_input_buffer>
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	91 11       	cpse	r25, r1
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <serial_input_available+0xc>
     a54:	80 e0       	ldi	r24, 0x00	; 0
}
     a56:	08 95       	ret

00000a58 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     a58:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <input_insert_pos>
	bytes_in_input_buffer = 0;
     a5c:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <bytes_in_input_buffer>
     a60:	08 95       	ret

00000a62 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 93       	push	r18
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     a76:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <bytes_in_out_buffer>
     a7a:	88 23       	and	r24, r24
     a7c:	29 f1       	breq	.+74     	; 0xac8 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     a7e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <out_insert_pos>
     a82:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <bytes_in_out_buffer>
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	82 1b       	sub	r24, r18
     a8a:	91 09       	sbc	r25, r1
     a8c:	5a f4       	brpl	.+22     	; 0xaa4 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     a8e:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <out_insert_pos>
     a92:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <bytes_in_out_buffer>
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	e8 1b       	sub	r30, r24
     a9a:	f1 09       	sbc	r31, r1
     a9c:	e5 58       	subi	r30, 0x85	; 133
     a9e:	fd 4f       	sbci	r31, 0xFD	; 253
     aa0:	90 81       	ld	r25, Z
     aa2:	0a c0       	rjmp	.+20     	; 0xab8 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     aa4:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <out_insert_pos>
     aa8:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <bytes_in_out_buffer>
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	e8 1b       	sub	r30, r24
     ab0:	f1 09       	sbc	r31, r1
     ab2:	e4 58       	subi	r30, 0x84	; 132
     ab4:	fe 4f       	sbci	r31, 0xFE	; 254
     ab6:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     ab8:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <bytes_in_out_buffer>
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     ac2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     ac8:	e1 ec       	ldi	r30, 0xC1	; 193
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	8f 7d       	andi	r24, 0xDF	; 223
     ad0:	80 83       	st	Z, r24
	}
}
     ad2:	ff 91       	pop	r31
     ad4:	ef 91       	pop	r30
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	2f 91       	pop	r18
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	0f 90       	pop	r0
     ae2:	1f 90       	pop	r1
     ae4:	18 95       	reti

00000ae6 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	cf 93       	push	r28
     b06:	ef 93       	push	r30
     b08:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     b0a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     b0e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <do_echo>
     b12:	88 23       	and	r24, r24
     b14:	49 f0       	breq	.+18     	; 0xb28 <__vector_20+0x42>
     b16:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <bytes_in_out_buffer>
     b1a:	8f 3f       	cpi	r24, 0xFF	; 255
     b1c:	29 f0       	breq	.+10     	; 0xb28 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	8c 2f       	mov	r24, r28
     b24:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     b28:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <bytes_in_input_buffer>
     b2c:	80 31       	cpi	r24, 0x10	; 16
     b2e:	20 f0       	brcs	.+8      	; 0xb38 <__vector_20+0x52>
		input_overrun = 1;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <input_overrun>
     b36:	18 c0       	rjmp	.+48     	; 0xb68 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     b38:	cd 30       	cpi	r28, 0x0D	; 13
     b3a:	09 f4       	brne	.+2      	; 0xb3e <__vector_20+0x58>
			c = '\n';
     b3c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     b3e:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <input_insert_pos>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	8e 0f       	add	r24, r30
     b46:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <input_insert_pos>
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	e4 58       	subi	r30, 0x84	; 132
     b4e:	fd 4f       	sbci	r31, 0xFD	; 253
     b50:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     b52:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <bytes_in_input_buffer>
     b56:	8f 5f       	subi	r24, 0xFF	; 255
     b58:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     b5c:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <input_insert_pos>
     b60:	80 31       	cpi	r24, 0x10	; 16
     b62:	11 f4       	brne	.+4      	; 0xb68 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     b64:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <input_insert_pos>
		}
	}
}
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	cf 91       	pop	r28
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
     b8c:	94 b1       	in	r25, 0x04	; 4
     b8e:	90 6b       	ori	r25, 0xB0	; 176
     b90:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
     b92:	95 b1       	in	r25, 0x05	; 5
     b94:	90 61       	ori	r25, 0x10	; 16
     b96:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     b98:	90 e5       	ldi	r25, 0x50	; 80
     b9a:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
     b9c:	88 30       	cpi	r24, 0x08	; 8
     b9e:	21 f0       	breq	.+8      	; 0xba8 <spi_setup_master+0x1c>
     ba0:	80 32       	cpi	r24, 0x20	; 32
     ba2:	11 f0       	breq	.+4      	; 0xba8 <spi_setup_master+0x1c>
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	19 f4       	brne	.+6      	; 0xbae <spi_setup_master+0x22>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	9d bd       	out	0x2d, r25	; 45
			break;
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     bae:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
     bb0:	80 32       	cpi	r24, 0x20	; 32
     bb2:	69 f0       	breq	.+26     	; 0xbce <spi_setup_master+0x42>
     bb4:	28 f4       	brcc	.+10     	; 0xbc0 <spi_setup_master+0x34>
     bb6:	88 30       	cpi	r24, 0x08	; 8
     bb8:	71 f0       	breq	.+28     	; 0xbd6 <spi_setup_master+0x4a>
     bba:	80 31       	cpi	r24, 0x10	; 16
     bbc:	61 f0       	breq	.+24     	; 0xbd6 <spi_setup_master+0x4a>
     bbe:	0e c0       	rjmp	.+28     	; 0xbdc <spi_setup_master+0x50>
     bc0:	80 34       	cpi	r24, 0x40	; 64
     bc2:	29 f0       	breq	.+10     	; 0xbce <spi_setup_master+0x42>
     bc4:	80 38       	cpi	r24, 0x80	; 128
     bc6:	51 f4       	brne	.+20     	; 0xbdc <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1<<SPR00);
     bc8:	8c b5       	in	r24, 0x2c	; 44
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
     bce:	8c b5       	in	r24, 0x2c	; 44
     bd0:	82 60       	ori	r24, 0x02	; 2
     bd2:	8c bd       	out	0x2c, r24	; 44
			break;
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <spi_setup_master+0x50>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
     bd6:	8c b5       	in	r24, 0x2c	; 44
     bd8:	81 60       	ori	r24, 0x01	; 1
     bda:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
     bdc:	85 b1       	in	r24, 0x05	; 5
     bde:	8f 7e       	andi	r24, 0xEF	; 239
     be0:	85 b9       	out	0x05, r24	; 5
     be2:	08 95       	ret

00000be4 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     be4:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
     be6:	0d b4       	in	r0, 0x2d	; 45
     be8:	07 fe       	sbrs	r0, 7
     bea:	fd cf       	rjmp	.-6      	; 0xbe6 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     bec:	8e b5       	in	r24, 0x2e	; 46
     bee:	08 95       	ret

00000bf0 <move_terminal_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
     bf0:	9f 93       	push	r25
     bf2:	8f 93       	push	r24
     bf4:	7f 93       	push	r23
     bf6:	6f 93       	push	r22
     bf8:	83 ed       	ldi	r24, 0xD3	; 211
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9f 93       	push	r25
     bfe:	8f 93       	push	r24
     c00:	0e 94 f4 06 	call	0xde8	; 0xde8 <printf_P>
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	08 95       	ret

00000c12 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
     c12:	8e ec       	ldi	r24, 0xCE	; 206
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9f 93       	push	r25
     c18:	8f 93       	push	r24
     c1a:	0e 94 f4 06 	call	0xde8	; 0xde8 <printf_P>
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	08 95       	ret

00000c24 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
     c24:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <clockTicks>
     c28:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <clockTicks+0x1>
     c2c:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <clockTicks+0x2>
     c30:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     c34:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     c36:	8c e7       	ldi	r24, 0x7C	; 124
     c38:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
     c42:	ee e6       	ldi	r30, 0x6E	; 110
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	82 60       	ori	r24, 0x02	; 2
     c4a:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
     c4c:	85 b3       	in	r24, 0x15	; 21
     c4e:	82 70       	andi	r24, 0x02	; 2
     c50:	85 bb       	out	0x15, r24	; 21
     c52:	08 95       	ret

00000c54 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
     c54:	8f b7       	in	r24, 0x3f	; 63
     c56:	28 2f       	mov	r18, r24
     c58:	20 78       	andi	r18, 0x80	; 128
	cli();
     c5a:	f8 94       	cli
	returnValue = clockTicks;
     c5c:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <clockTicks>
     c60:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <clockTicks+0x1>
     c64:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <clockTicks+0x2>
     c68:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <clockTicks+0x3>
	if(interruptsOn) {
     c6c:	22 23       	and	r18, r18
     c6e:	09 f0       	breq	.+2      	; 0xc72 <get_current_time+0x1e>
		sei();
     c70:	78 94       	sei
	}
	return returnValue;
}
     c72:	08 95       	ret

00000c74 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
     c86:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <clockTicks>
     c8a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <clockTicks+0x1>
     c8e:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <clockTicks+0x2>
     c92:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <clockTicks+0x3>
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	a1 1d       	adc	r26, r1
     c9a:	b1 1d       	adc	r27, r1
     c9c:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <clockTicks>
     ca0:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <clockTicks+0x1>
     ca4:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <clockTicks+0x2>
     ca8:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <clockTicks+0x3>
}
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	0f 90       	pop	r0
     cba:	1f 90       	pop	r1
     cbc:	18 95       	reti

00000cbe <__divmodsi4>:
     cbe:	05 2e       	mov	r0, r21
     cc0:	97 fb       	bst	r25, 7
     cc2:	1e f4       	brtc	.+6      	; 0xcca <__divmodsi4+0xc>
     cc4:	00 94       	com	r0
     cc6:	0e 94 76 06 	call	0xcec	; 0xcec <__negsi2>
     cca:	57 fd       	sbrc	r21, 7
     ccc:	07 d0       	rcall	.+14     	; 0xcdc <__divmodsi4_neg2>
     cce:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__udivmodsi4>
     cd2:	07 fc       	sbrc	r0, 7
     cd4:	03 d0       	rcall	.+6      	; 0xcdc <__divmodsi4_neg2>
     cd6:	4e f4       	brtc	.+18     	; 0xcea <__divmodsi4_exit>
     cd8:	0c 94 76 06 	jmp	0xcec	; 0xcec <__negsi2>

00000cdc <__divmodsi4_neg2>:
     cdc:	50 95       	com	r21
     cde:	40 95       	com	r20
     ce0:	30 95       	com	r19
     ce2:	21 95       	neg	r18
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255

00000cea <__divmodsi4_exit>:
     cea:	08 95       	ret

00000cec <__negsi2>:
     cec:	90 95       	com	r25
     cee:	80 95       	com	r24
     cf0:	70 95       	com	r23
     cf2:	61 95       	neg	r22
     cf4:	7f 4f       	sbci	r23, 0xFF	; 255
     cf6:	8f 4f       	sbci	r24, 0xFF	; 255
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	08 95       	ret

00000cfc <__udivmodsi4>:
     cfc:	a1 e2       	ldi	r26, 0x21	; 33
     cfe:	1a 2e       	mov	r1, r26
     d00:	aa 1b       	sub	r26, r26
     d02:	bb 1b       	sub	r27, r27
     d04:	fd 01       	movw	r30, r26
     d06:	0d c0       	rjmp	.+26     	; 0xd22 <__udivmodsi4_ep>

00000d08 <__udivmodsi4_loop>:
     d08:	aa 1f       	adc	r26, r26
     d0a:	bb 1f       	adc	r27, r27
     d0c:	ee 1f       	adc	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	a2 17       	cp	r26, r18
     d12:	b3 07       	cpc	r27, r19
     d14:	e4 07       	cpc	r30, r20
     d16:	f5 07       	cpc	r31, r21
     d18:	20 f0       	brcs	.+8      	; 0xd22 <__udivmodsi4_ep>
     d1a:	a2 1b       	sub	r26, r18
     d1c:	b3 0b       	sbc	r27, r19
     d1e:	e4 0b       	sbc	r30, r20
     d20:	f5 0b       	sbc	r31, r21

00000d22 <__udivmodsi4_ep>:
     d22:	66 1f       	adc	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	88 1f       	adc	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	1a 94       	dec	r1
     d2c:	69 f7       	brne	.-38     	; 0xd08 <__udivmodsi4_loop>
     d2e:	60 95       	com	r22
     d30:	70 95       	com	r23
     d32:	80 95       	com	r24
     d34:	90 95       	com	r25
     d36:	9b 01       	movw	r18, r22
     d38:	ac 01       	movw	r20, r24
     d3a:	bd 01       	movw	r22, r26
     d3c:	cf 01       	movw	r24, r30
     d3e:	08 95       	ret

00000d40 <fgetc>:
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	ec 01       	movw	r28, r24
     d46:	2b 81       	ldd	r18, Y+3	; 0x03
     d48:	20 ff       	sbrs	r18, 0
     d4a:	33 c0       	rjmp	.+102    	; 0xdb2 <fgetc+0x72>
     d4c:	26 ff       	sbrs	r18, 6
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <fgetc+0x24>
     d50:	2f 7b       	andi	r18, 0xBF	; 191
     d52:	2b 83       	std	Y+3, r18	; 0x03
     d54:	8e 81       	ldd	r24, Y+6	; 0x06
     d56:	9f 81       	ldd	r25, Y+7	; 0x07
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	9f 83       	std	Y+7, r25	; 0x07
     d5c:	8e 83       	std	Y+6, r24	; 0x06
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	29 c0       	rjmp	.+82     	; 0xdb6 <fgetc+0x76>
     d64:	22 ff       	sbrs	r18, 2
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <fgetc+0x46>
     d68:	e8 81       	ld	r30, Y
     d6a:	f9 81       	ldd	r31, Y+1	; 0x01
     d6c:	80 81       	ld	r24, Z
     d6e:	08 2e       	mov	r0, r24
     d70:	00 0c       	add	r0, r0
     d72:	99 0b       	sbc	r25, r25
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	19 f4       	brne	.+6      	; 0xd7e <fgetc+0x3e>
     d78:	20 62       	ori	r18, 0x20	; 32
     d7a:	2b 83       	std	Y+3, r18	; 0x03
     d7c:	1a c0       	rjmp	.+52     	; 0xdb2 <fgetc+0x72>
     d7e:	31 96       	adiw	r30, 0x01	; 1
     d80:	f9 83       	std	Y+1, r31	; 0x01
     d82:	e8 83       	st	Y, r30
     d84:	0e c0       	rjmp	.+28     	; 0xda2 <fgetc+0x62>
     d86:	ea 85       	ldd	r30, Y+10	; 0x0a
     d88:	fb 85       	ldd	r31, Y+11	; 0x0b
     d8a:	09 95       	icall
     d8c:	97 ff       	sbrs	r25, 7
     d8e:	09 c0       	rjmp	.+18     	; 0xda2 <fgetc+0x62>
     d90:	2b 81       	ldd	r18, Y+3	; 0x03
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	11 f0       	breq	.+4      	; 0xd9a <fgetc+0x5a>
     d96:	80 e2       	ldi	r24, 0x20	; 32
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <fgetc+0x5c>
     d9a:	80 e1       	ldi	r24, 0x10	; 16
     d9c:	82 2b       	or	r24, r18
     d9e:	8b 83       	std	Y+3, r24	; 0x03
     da0:	08 c0       	rjmp	.+16     	; 0xdb2 <fgetc+0x72>
     da2:	2e 81       	ldd	r18, Y+6	; 0x06
     da4:	3f 81       	ldd	r19, Y+7	; 0x07
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	3f 4f       	sbci	r19, 0xFF	; 255
     daa:	3f 83       	std	Y+7, r19	; 0x07
     dac:	2e 83       	std	Y+6, r18	; 0x06
     dae:	99 27       	eor	r25, r25
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <fgetc+0x76>
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	9f ef       	ldi	r25, 0xFF	; 255
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <printf>:
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 ee       	ldi	r30, 0xE4	; 228
     dc2:	f6 e0       	ldi	r31, 0x06	; 6
     dc4:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__prologue_saves__+0x20>
     dc8:	ae 01       	movw	r20, r28
     dca:	4b 5f       	subi	r20, 0xFB	; 251
     dcc:	5f 4f       	sbci	r21, 0xFF	; 255
     dce:	fa 01       	movw	r30, r20
     dd0:	61 91       	ld	r22, Z+
     dd2:	71 91       	ld	r23, Z+
     dd4:	af 01       	movw	r20, r30
     dd6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__iob+0x2>
     dda:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__iob+0x3>
     dde:	0e 94 1a 07 	call	0xe34	; 0xe34 <vfprintf>
     de2:	e2 e0       	ldi	r30, 0x02	; 2
     de4:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__epilogue_restores__+0x20>

00000de8 <printf_P>:
     de8:	a0 e0       	ldi	r26, 0x00	; 0
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ea ef       	ldi	r30, 0xFA	; 250
     dee:	f6 e0       	ldi	r31, 0x06	; 6
     df0:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__prologue_saves__+0x1c>
     df4:	ae 01       	movw	r20, r28
     df6:	49 5f       	subi	r20, 0xF9	; 249
     df8:	5f 4f       	sbci	r21, 0xFF	; 255
     dfa:	da 01       	movw	r26, r20
     dfc:	6d 91       	ld	r22, X+
     dfe:	7d 91       	ld	r23, X+
     e00:	ad 01       	movw	r20, r26
     e02:	0e e8       	ldi	r16, 0x8E	; 142
     e04:	12 e0       	ldi	r17, 0x02	; 2
     e06:	f8 01       	movw	r30, r16
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	dc 01       	movw	r26, r24
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	2c 91       	ld	r18, X
     e12:	13 97       	sbiw	r26, 0x03	; 3
     e14:	28 60       	ori	r18, 0x08	; 8
     e16:	13 96       	adiw	r26, 0x03	; 3
     e18:	2c 93       	st	X, r18
     e1a:	0e 94 1a 07 	call	0xe34	; 0xe34 <vfprintf>
     e1e:	d8 01       	movw	r26, r16
     e20:	12 96       	adiw	r26, 0x02	; 2
     e22:	ed 91       	ld	r30, X+
     e24:	fc 91       	ld	r31, X
     e26:	13 97       	sbiw	r26, 0x03	; 3
     e28:	23 81       	ldd	r18, Z+3	; 0x03
     e2a:	27 7f       	andi	r18, 0xF7	; 247
     e2c:	23 83       	std	Z+3, r18	; 0x03
     e2e:	e4 e0       	ldi	r30, 0x04	; 4
     e30:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__epilogue_restores__+0x1c>

00000e34 <vfprintf>:
     e34:	ab e0       	ldi	r26, 0x0B	; 11
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e0 e2       	ldi	r30, 0x20	; 32
     e3a:	f7 e0       	ldi	r31, 0x07	; 7
     e3c:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__prologue_saves__>
     e40:	6c 01       	movw	r12, r24
     e42:	7b 01       	movw	r14, r22
     e44:	8a 01       	movw	r16, r20
     e46:	fc 01       	movw	r30, r24
     e48:	17 82       	std	Z+7, r1	; 0x07
     e4a:	16 82       	std	Z+6, r1	; 0x06
     e4c:	83 81       	ldd	r24, Z+3	; 0x03
     e4e:	81 ff       	sbrs	r24, 1
     e50:	cc c1       	rjmp	.+920    	; 0x11ea <vfprintf+0x3b6>
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	3c 01       	movw	r6, r24
     e58:	f6 01       	movw	r30, r12
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	f7 01       	movw	r30, r14
     e5e:	93 fd       	sbrc	r25, 3
     e60:	85 91       	lpm	r24, Z+
     e62:	93 ff       	sbrs	r25, 3
     e64:	81 91       	ld	r24, Z+
     e66:	7f 01       	movw	r14, r30
     e68:	88 23       	and	r24, r24
     e6a:	09 f4       	brne	.+2      	; 0xe6e <vfprintf+0x3a>
     e6c:	ba c1       	rjmp	.+884    	; 0x11e2 <vfprintf+0x3ae>
     e6e:	85 32       	cpi	r24, 0x25	; 37
     e70:	39 f4       	brne	.+14     	; 0xe80 <vfprintf+0x4c>
     e72:	93 fd       	sbrc	r25, 3
     e74:	85 91       	lpm	r24, Z+
     e76:	93 ff       	sbrs	r25, 3
     e78:	81 91       	ld	r24, Z+
     e7a:	7f 01       	movw	r14, r30
     e7c:	85 32       	cpi	r24, 0x25	; 37
     e7e:	29 f4       	brne	.+10     	; 0xe8a <vfprintf+0x56>
     e80:	b6 01       	movw	r22, r12
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 11 09 	call	0x1222	; 0x1222 <fputc>
     e88:	e7 cf       	rjmp	.-50     	; 0xe58 <vfprintf+0x24>
     e8a:	91 2c       	mov	r9, r1
     e8c:	21 2c       	mov	r2, r1
     e8e:	31 2c       	mov	r3, r1
     e90:	ff e1       	ldi	r31, 0x1F	; 31
     e92:	f3 15       	cp	r31, r3
     e94:	d8 f0       	brcs	.+54     	; 0xecc <vfprintf+0x98>
     e96:	8b 32       	cpi	r24, 0x2B	; 43
     e98:	79 f0       	breq	.+30     	; 0xeb8 <vfprintf+0x84>
     e9a:	38 f4       	brcc	.+14     	; 0xeaa <vfprintf+0x76>
     e9c:	80 32       	cpi	r24, 0x20	; 32
     e9e:	79 f0       	breq	.+30     	; 0xebe <vfprintf+0x8a>
     ea0:	83 32       	cpi	r24, 0x23	; 35
     ea2:	a1 f4       	brne	.+40     	; 0xecc <vfprintf+0x98>
     ea4:	23 2d       	mov	r18, r3
     ea6:	20 61       	ori	r18, 0x10	; 16
     ea8:	1d c0       	rjmp	.+58     	; 0xee4 <vfprintf+0xb0>
     eaa:	8d 32       	cpi	r24, 0x2D	; 45
     eac:	61 f0       	breq	.+24     	; 0xec6 <vfprintf+0x92>
     eae:	80 33       	cpi	r24, 0x30	; 48
     eb0:	69 f4       	brne	.+26     	; 0xecc <vfprintf+0x98>
     eb2:	23 2d       	mov	r18, r3
     eb4:	21 60       	ori	r18, 0x01	; 1
     eb6:	16 c0       	rjmp	.+44     	; 0xee4 <vfprintf+0xb0>
     eb8:	83 2d       	mov	r24, r3
     eba:	82 60       	ori	r24, 0x02	; 2
     ebc:	38 2e       	mov	r3, r24
     ebe:	e3 2d       	mov	r30, r3
     ec0:	e4 60       	ori	r30, 0x04	; 4
     ec2:	3e 2e       	mov	r3, r30
     ec4:	2a c0       	rjmp	.+84     	; 0xf1a <vfprintf+0xe6>
     ec6:	f3 2d       	mov	r31, r3
     ec8:	f8 60       	ori	r31, 0x08	; 8
     eca:	1d c0       	rjmp	.+58     	; 0xf06 <vfprintf+0xd2>
     ecc:	37 fc       	sbrc	r3, 7
     ece:	2d c0       	rjmp	.+90     	; 0xf2a <vfprintf+0xf6>
     ed0:	20 ed       	ldi	r18, 0xD0	; 208
     ed2:	28 0f       	add	r18, r24
     ed4:	2a 30       	cpi	r18, 0x0A	; 10
     ed6:	40 f0       	brcs	.+16     	; 0xee8 <vfprintf+0xb4>
     ed8:	8e 32       	cpi	r24, 0x2E	; 46
     eda:	b9 f4       	brne	.+46     	; 0xf0a <vfprintf+0xd6>
     edc:	36 fc       	sbrc	r3, 6
     ede:	81 c1       	rjmp	.+770    	; 0x11e2 <vfprintf+0x3ae>
     ee0:	23 2d       	mov	r18, r3
     ee2:	20 64       	ori	r18, 0x40	; 64
     ee4:	32 2e       	mov	r3, r18
     ee6:	19 c0       	rjmp	.+50     	; 0xf1a <vfprintf+0xe6>
     ee8:	36 fe       	sbrs	r3, 6
     eea:	06 c0       	rjmp	.+12     	; 0xef8 <vfprintf+0xc4>
     eec:	8a e0       	ldi	r24, 0x0A	; 10
     eee:	98 9e       	mul	r9, r24
     ef0:	20 0d       	add	r18, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	92 2e       	mov	r9, r18
     ef6:	11 c0       	rjmp	.+34     	; 0xf1a <vfprintf+0xe6>
     ef8:	ea e0       	ldi	r30, 0x0A	; 10
     efa:	2e 9e       	mul	r2, r30
     efc:	20 0d       	add	r18, r0
     efe:	11 24       	eor	r1, r1
     f00:	22 2e       	mov	r2, r18
     f02:	f3 2d       	mov	r31, r3
     f04:	f0 62       	ori	r31, 0x20	; 32
     f06:	3f 2e       	mov	r3, r31
     f08:	08 c0       	rjmp	.+16     	; 0xf1a <vfprintf+0xe6>
     f0a:	8c 36       	cpi	r24, 0x6C	; 108
     f0c:	21 f4       	brne	.+8      	; 0xf16 <vfprintf+0xe2>
     f0e:	83 2d       	mov	r24, r3
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	38 2e       	mov	r3, r24
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0xe6>
     f16:	88 36       	cpi	r24, 0x68	; 104
     f18:	41 f4       	brne	.+16     	; 0xf2a <vfprintf+0xf6>
     f1a:	f7 01       	movw	r30, r14
     f1c:	93 fd       	sbrc	r25, 3
     f1e:	85 91       	lpm	r24, Z+
     f20:	93 ff       	sbrs	r25, 3
     f22:	81 91       	ld	r24, Z+
     f24:	7f 01       	movw	r14, r30
     f26:	81 11       	cpse	r24, r1
     f28:	b3 cf       	rjmp	.-154    	; 0xe90 <vfprintf+0x5c>
     f2a:	98 2f       	mov	r25, r24
     f2c:	9f 7d       	andi	r25, 0xDF	; 223
     f2e:	95 54       	subi	r25, 0x45	; 69
     f30:	93 30       	cpi	r25, 0x03	; 3
     f32:	28 f4       	brcc	.+10     	; 0xf3e <vfprintf+0x10a>
     f34:	0c 5f       	subi	r16, 0xFC	; 252
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	9f e3       	ldi	r25, 0x3F	; 63
     f3a:	99 83       	std	Y+1, r25	; 0x01
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <vfprintf+0x124>
     f3e:	83 36       	cpi	r24, 0x63	; 99
     f40:	31 f0       	breq	.+12     	; 0xf4e <vfprintf+0x11a>
     f42:	83 37       	cpi	r24, 0x73	; 115
     f44:	71 f0       	breq	.+28     	; 0xf62 <vfprintf+0x12e>
     f46:	83 35       	cpi	r24, 0x53	; 83
     f48:	09 f0       	breq	.+2      	; 0xf4c <vfprintf+0x118>
     f4a:	59 c0       	rjmp	.+178    	; 0xffe <vfprintf+0x1ca>
     f4c:	21 c0       	rjmp	.+66     	; 0xf90 <vfprintf+0x15c>
     f4e:	f8 01       	movw	r30, r16
     f50:	80 81       	ld	r24, Z
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	0e 5f       	subi	r16, 0xFE	; 254
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	88 24       	eor	r8, r8
     f5a:	83 94       	inc	r8
     f5c:	91 2c       	mov	r9, r1
     f5e:	53 01       	movw	r10, r6
     f60:	13 c0       	rjmp	.+38     	; 0xf88 <vfprintf+0x154>
     f62:	28 01       	movw	r4, r16
     f64:	f2 e0       	ldi	r31, 0x02	; 2
     f66:	4f 0e       	add	r4, r31
     f68:	51 1c       	adc	r5, r1
     f6a:	f8 01       	movw	r30, r16
     f6c:	a0 80       	ld	r10, Z
     f6e:	b1 80       	ldd	r11, Z+1	; 0x01
     f70:	36 fe       	sbrs	r3, 6
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <vfprintf+0x146>
     f74:	69 2d       	mov	r22, r9
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vfprintf+0x14a>
     f7a:	6f ef       	ldi	r22, 0xFF	; 255
     f7c:	7f ef       	ldi	r23, 0xFF	; 255
     f7e:	c5 01       	movw	r24, r10
     f80:	0e 94 06 09 	call	0x120c	; 0x120c <strnlen>
     f84:	4c 01       	movw	r8, r24
     f86:	82 01       	movw	r16, r4
     f88:	f3 2d       	mov	r31, r3
     f8a:	ff 77       	andi	r31, 0x7F	; 127
     f8c:	3f 2e       	mov	r3, r31
     f8e:	16 c0       	rjmp	.+44     	; 0xfbc <vfprintf+0x188>
     f90:	28 01       	movw	r4, r16
     f92:	22 e0       	ldi	r18, 0x02	; 2
     f94:	42 0e       	add	r4, r18
     f96:	51 1c       	adc	r5, r1
     f98:	f8 01       	movw	r30, r16
     f9a:	a0 80       	ld	r10, Z
     f9c:	b1 80       	ldd	r11, Z+1	; 0x01
     f9e:	36 fe       	sbrs	r3, 6
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <vfprintf+0x174>
     fa2:	69 2d       	mov	r22, r9
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x178>
     fa8:	6f ef       	ldi	r22, 0xFF	; 255
     faa:	7f ef       	ldi	r23, 0xFF	; 255
     fac:	c5 01       	movw	r24, r10
     fae:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <strnlen_P>
     fb2:	4c 01       	movw	r8, r24
     fb4:	f3 2d       	mov	r31, r3
     fb6:	f0 68       	ori	r31, 0x80	; 128
     fb8:	3f 2e       	mov	r3, r31
     fba:	82 01       	movw	r16, r4
     fbc:	33 fc       	sbrc	r3, 3
     fbe:	1b c0       	rjmp	.+54     	; 0xff6 <vfprintf+0x1c2>
     fc0:	82 2d       	mov	r24, r2
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	88 16       	cp	r8, r24
     fc6:	99 06       	cpc	r9, r25
     fc8:	b0 f4       	brcc	.+44     	; 0xff6 <vfprintf+0x1c2>
     fca:	b6 01       	movw	r22, r12
     fcc:	80 e2       	ldi	r24, 0x20	; 32
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 11 09 	call	0x1222	; 0x1222 <fputc>
     fd4:	2a 94       	dec	r2
     fd6:	f4 cf       	rjmp	.-24     	; 0xfc0 <vfprintf+0x18c>
     fd8:	f5 01       	movw	r30, r10
     fda:	37 fc       	sbrc	r3, 7
     fdc:	85 91       	lpm	r24, Z+
     fde:	37 fe       	sbrs	r3, 7
     fe0:	81 91       	ld	r24, Z+
     fe2:	5f 01       	movw	r10, r30
     fe4:	b6 01       	movw	r22, r12
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 11 09 	call	0x1222	; 0x1222 <fputc>
     fec:	21 10       	cpse	r2, r1
     fee:	2a 94       	dec	r2
     ff0:	21 e0       	ldi	r18, 0x01	; 1
     ff2:	82 1a       	sub	r8, r18
     ff4:	91 08       	sbc	r9, r1
     ff6:	81 14       	cp	r8, r1
     ff8:	91 04       	cpc	r9, r1
     ffa:	71 f7       	brne	.-36     	; 0xfd8 <vfprintf+0x1a4>
     ffc:	e8 c0       	rjmp	.+464    	; 0x11ce <vfprintf+0x39a>
     ffe:	84 36       	cpi	r24, 0x64	; 100
    1000:	11 f0       	breq	.+4      	; 0x1006 <vfprintf+0x1d2>
    1002:	89 36       	cpi	r24, 0x69	; 105
    1004:	41 f5       	brne	.+80     	; 0x1056 <vfprintf+0x222>
    1006:	f8 01       	movw	r30, r16
    1008:	37 fe       	sbrs	r3, 7
    100a:	07 c0       	rjmp	.+14     	; 0x101a <vfprintf+0x1e6>
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	0c 5f       	subi	r16, 0xFC	; 252
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
    1018:	08 c0       	rjmp	.+16     	; 0x102a <vfprintf+0x1f6>
    101a:	60 81       	ld	r22, Z
    101c:	71 81       	ldd	r23, Z+1	; 0x01
    101e:	07 2e       	mov	r0, r23
    1020:	00 0c       	add	r0, r0
    1022:	88 0b       	sbc	r24, r24
    1024:	99 0b       	sbc	r25, r25
    1026:	0e 5f       	subi	r16, 0xFE	; 254
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	f3 2d       	mov	r31, r3
    102c:	ff 76       	andi	r31, 0x6F	; 111
    102e:	3f 2e       	mov	r3, r31
    1030:	97 ff       	sbrs	r25, 7
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <vfprintf+0x212>
    1034:	90 95       	com	r25
    1036:	80 95       	com	r24
    1038:	70 95       	com	r23
    103a:	61 95       	neg	r22
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	8f 4f       	sbci	r24, 0xFF	; 255
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	f0 68       	ori	r31, 0x80	; 128
    1044:	3f 2e       	mov	r3, r31
    1046:	2a e0       	ldi	r18, 0x0A	; 10
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	a3 01       	movw	r20, r6
    104c:	0e 94 4d 09 	call	0x129a	; 0x129a <__ultoa_invert>
    1050:	88 2e       	mov	r8, r24
    1052:	86 18       	sub	r8, r6
    1054:	45 c0       	rjmp	.+138    	; 0x10e0 <vfprintf+0x2ac>
    1056:	85 37       	cpi	r24, 0x75	; 117
    1058:	31 f4       	brne	.+12     	; 0x1066 <vfprintf+0x232>
    105a:	23 2d       	mov	r18, r3
    105c:	2f 7e       	andi	r18, 0xEF	; 239
    105e:	b2 2e       	mov	r11, r18
    1060:	2a e0       	ldi	r18, 0x0A	; 10
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	25 c0       	rjmp	.+74     	; 0x10b0 <vfprintf+0x27c>
    1066:	93 2d       	mov	r25, r3
    1068:	99 7f       	andi	r25, 0xF9	; 249
    106a:	b9 2e       	mov	r11, r25
    106c:	8f 36       	cpi	r24, 0x6F	; 111
    106e:	c1 f0       	breq	.+48     	; 0x10a0 <vfprintf+0x26c>
    1070:	18 f4       	brcc	.+6      	; 0x1078 <vfprintf+0x244>
    1072:	88 35       	cpi	r24, 0x58	; 88
    1074:	79 f0       	breq	.+30     	; 0x1094 <vfprintf+0x260>
    1076:	b5 c0       	rjmp	.+362    	; 0x11e2 <vfprintf+0x3ae>
    1078:	80 37       	cpi	r24, 0x70	; 112
    107a:	19 f0       	breq	.+6      	; 0x1082 <vfprintf+0x24e>
    107c:	88 37       	cpi	r24, 0x78	; 120
    107e:	21 f0       	breq	.+8      	; 0x1088 <vfprintf+0x254>
    1080:	b0 c0       	rjmp	.+352    	; 0x11e2 <vfprintf+0x3ae>
    1082:	e9 2f       	mov	r30, r25
    1084:	e0 61       	ori	r30, 0x10	; 16
    1086:	be 2e       	mov	r11, r30
    1088:	b4 fe       	sbrs	r11, 4
    108a:	0d c0       	rjmp	.+26     	; 0x10a6 <vfprintf+0x272>
    108c:	fb 2d       	mov	r31, r11
    108e:	f4 60       	ori	r31, 0x04	; 4
    1090:	bf 2e       	mov	r11, r31
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <vfprintf+0x272>
    1094:	34 fe       	sbrs	r3, 4
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <vfprintf+0x278>
    1098:	29 2f       	mov	r18, r25
    109a:	26 60       	ori	r18, 0x06	; 6
    109c:	b2 2e       	mov	r11, r18
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0x278>
    10a0:	28 e0       	ldi	r18, 0x08	; 8
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <vfprintf+0x27c>
    10a6:	20 e1       	ldi	r18, 0x10	; 16
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <vfprintf+0x27c>
    10ac:	20 e1       	ldi	r18, 0x10	; 16
    10ae:	32 e0       	ldi	r19, 0x02	; 2
    10b0:	f8 01       	movw	r30, r16
    10b2:	b7 fe       	sbrs	r11, 7
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <vfprintf+0x290>
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	93 81       	ldd	r25, Z+3	; 0x03
    10be:	0c 5f       	subi	r16, 0xFC	; 252
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <vfprintf+0x29c>
    10c4:	60 81       	ld	r22, Z
    10c6:	71 81       	ldd	r23, Z+1	; 0x01
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 5f       	subi	r16, 0xFE	; 254
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	a3 01       	movw	r20, r6
    10d2:	0e 94 4d 09 	call	0x129a	; 0x129a <__ultoa_invert>
    10d6:	88 2e       	mov	r8, r24
    10d8:	86 18       	sub	r8, r6
    10da:	fb 2d       	mov	r31, r11
    10dc:	ff 77       	andi	r31, 0x7F	; 127
    10de:	3f 2e       	mov	r3, r31
    10e0:	36 fe       	sbrs	r3, 6
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <vfprintf+0x2ca>
    10e4:	23 2d       	mov	r18, r3
    10e6:	2e 7f       	andi	r18, 0xFE	; 254
    10e8:	a2 2e       	mov	r10, r18
    10ea:	89 14       	cp	r8, r9
    10ec:	58 f4       	brcc	.+22     	; 0x1104 <vfprintf+0x2d0>
    10ee:	34 fe       	sbrs	r3, 4
    10f0:	0b c0       	rjmp	.+22     	; 0x1108 <vfprintf+0x2d4>
    10f2:	32 fc       	sbrc	r3, 2
    10f4:	09 c0       	rjmp	.+18     	; 0x1108 <vfprintf+0x2d4>
    10f6:	83 2d       	mov	r24, r3
    10f8:	8e 7e       	andi	r24, 0xEE	; 238
    10fa:	a8 2e       	mov	r10, r24
    10fc:	05 c0       	rjmp	.+10     	; 0x1108 <vfprintf+0x2d4>
    10fe:	b8 2c       	mov	r11, r8
    1100:	a3 2c       	mov	r10, r3
    1102:	03 c0       	rjmp	.+6      	; 0x110a <vfprintf+0x2d6>
    1104:	b8 2c       	mov	r11, r8
    1106:	01 c0       	rjmp	.+2      	; 0x110a <vfprintf+0x2d6>
    1108:	b9 2c       	mov	r11, r9
    110a:	a4 fe       	sbrs	r10, 4
    110c:	0f c0       	rjmp	.+30     	; 0x112c <vfprintf+0x2f8>
    110e:	fe 01       	movw	r30, r28
    1110:	e8 0d       	add	r30, r8
    1112:	f1 1d       	adc	r31, r1
    1114:	80 81       	ld	r24, Z
    1116:	80 33       	cpi	r24, 0x30	; 48
    1118:	21 f4       	brne	.+8      	; 0x1122 <vfprintf+0x2ee>
    111a:	9a 2d       	mov	r25, r10
    111c:	99 7e       	andi	r25, 0xE9	; 233
    111e:	a9 2e       	mov	r10, r25
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <vfprintf+0x300>
    1122:	a2 fe       	sbrs	r10, 2
    1124:	06 c0       	rjmp	.+12     	; 0x1132 <vfprintf+0x2fe>
    1126:	b3 94       	inc	r11
    1128:	b3 94       	inc	r11
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <vfprintf+0x300>
    112c:	8a 2d       	mov	r24, r10
    112e:	86 78       	andi	r24, 0x86	; 134
    1130:	09 f0       	breq	.+2      	; 0x1134 <vfprintf+0x300>
    1132:	b3 94       	inc	r11
    1134:	a3 fc       	sbrc	r10, 3
    1136:	11 c0       	rjmp	.+34     	; 0x115a <vfprintf+0x326>
    1138:	a0 fe       	sbrs	r10, 0
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <vfprintf+0x314>
    113c:	b2 14       	cp	r11, r2
    113e:	88 f4       	brcc	.+34     	; 0x1162 <vfprintf+0x32e>
    1140:	28 0c       	add	r2, r8
    1142:	92 2c       	mov	r9, r2
    1144:	9b 18       	sub	r9, r11
    1146:	0e c0       	rjmp	.+28     	; 0x1164 <vfprintf+0x330>
    1148:	b2 14       	cp	r11, r2
    114a:	60 f4       	brcc	.+24     	; 0x1164 <vfprintf+0x330>
    114c:	b6 01       	movw	r22, r12
    114e:	80 e2       	ldi	r24, 0x20	; 32
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 11 09 	call	0x1222	; 0x1222 <fputc>
    1156:	b3 94       	inc	r11
    1158:	f7 cf       	rjmp	.-18     	; 0x1148 <vfprintf+0x314>
    115a:	b2 14       	cp	r11, r2
    115c:	18 f4       	brcc	.+6      	; 0x1164 <vfprintf+0x330>
    115e:	2b 18       	sub	r2, r11
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <vfprintf+0x332>
    1162:	98 2c       	mov	r9, r8
    1164:	21 2c       	mov	r2, r1
    1166:	a4 fe       	sbrs	r10, 4
    1168:	10 c0       	rjmp	.+32     	; 0x118a <vfprintf+0x356>
    116a:	b6 01       	movw	r22, r12
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 11 09 	call	0x1222	; 0x1222 <fputc>
    1174:	a2 fe       	sbrs	r10, 2
    1176:	17 c0       	rjmp	.+46     	; 0x11a6 <vfprintf+0x372>
    1178:	a1 fc       	sbrc	r10, 1
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <vfprintf+0x34e>
    117c:	88 e7       	ldi	r24, 0x78	; 120
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <vfprintf+0x352>
    1182:	88 e5       	ldi	r24, 0x58	; 88
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	b6 01       	movw	r22, r12
    1188:	0c c0       	rjmp	.+24     	; 0x11a2 <vfprintf+0x36e>
    118a:	8a 2d       	mov	r24, r10
    118c:	86 78       	andi	r24, 0x86	; 134
    118e:	59 f0       	breq	.+22     	; 0x11a6 <vfprintf+0x372>
    1190:	a1 fe       	sbrs	r10, 1
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <vfprintf+0x364>
    1194:	8b e2       	ldi	r24, 0x2B	; 43
    1196:	01 c0       	rjmp	.+2      	; 0x119a <vfprintf+0x366>
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	a7 fc       	sbrc	r10, 7
    119c:	8d e2       	ldi	r24, 0x2D	; 45
    119e:	b6 01       	movw	r22, r12
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 11 09 	call	0x1222	; 0x1222 <fputc>
    11a6:	89 14       	cp	r8, r9
    11a8:	38 f4       	brcc	.+14     	; 0x11b8 <vfprintf+0x384>
    11aa:	b6 01       	movw	r22, r12
    11ac:	80 e3       	ldi	r24, 0x30	; 48
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 11 09 	call	0x1222	; 0x1222 <fputc>
    11b4:	9a 94       	dec	r9
    11b6:	f7 cf       	rjmp	.-18     	; 0x11a6 <vfprintf+0x372>
    11b8:	8a 94       	dec	r8
    11ba:	f3 01       	movw	r30, r6
    11bc:	e8 0d       	add	r30, r8
    11be:	f1 1d       	adc	r31, r1
    11c0:	80 81       	ld	r24, Z
    11c2:	b6 01       	movw	r22, r12
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 11 09 	call	0x1222	; 0x1222 <fputc>
    11ca:	81 10       	cpse	r8, r1
    11cc:	f5 cf       	rjmp	.-22     	; 0x11b8 <vfprintf+0x384>
    11ce:	22 20       	and	r2, r2
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <vfprintf+0x3a0>
    11d2:	42 ce       	rjmp	.-892    	; 0xe58 <vfprintf+0x24>
    11d4:	b6 01       	movw	r22, r12
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 11 09 	call	0x1222	; 0x1222 <fputc>
    11de:	2a 94       	dec	r2
    11e0:	f6 cf       	rjmp	.-20     	; 0x11ce <vfprintf+0x39a>
    11e2:	f6 01       	movw	r30, r12
    11e4:	86 81       	ldd	r24, Z+6	; 0x06
    11e6:	97 81       	ldd	r25, Z+7	; 0x07
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <vfprintf+0x3ba>
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	9f ef       	ldi	r25, 0xFF	; 255
    11ee:	2b 96       	adiw	r28, 0x0b	; 11
    11f0:	e2 e1       	ldi	r30, 0x12	; 18
    11f2:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__epilogue_restores__>

000011f6 <strnlen_P>:
    11f6:	fc 01       	movw	r30, r24
    11f8:	05 90       	lpm	r0, Z+
    11fa:	61 50       	subi	r22, 0x01	; 1
    11fc:	70 40       	sbci	r23, 0x00	; 0
    11fe:	01 10       	cpse	r0, r1
    1200:	d8 f7       	brcc	.-10     	; 0x11f8 <strnlen_P+0x2>
    1202:	80 95       	com	r24
    1204:	90 95       	com	r25
    1206:	8e 0f       	add	r24, r30
    1208:	9f 1f       	adc	r25, r31
    120a:	08 95       	ret

0000120c <strnlen>:
    120c:	fc 01       	movw	r30, r24
    120e:	61 50       	subi	r22, 0x01	; 1
    1210:	70 40       	sbci	r23, 0x00	; 0
    1212:	01 90       	ld	r0, Z+
    1214:	01 10       	cpse	r0, r1
    1216:	d8 f7       	brcc	.-10     	; 0x120e <strnlen+0x2>
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	8e 0f       	add	r24, r30
    121e:	9f 1f       	adc	r25, r31
    1220:	08 95       	ret

00001222 <fputc>:
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	fb 01       	movw	r30, r22
    122c:	23 81       	ldd	r18, Z+3	; 0x03
    122e:	21 fd       	sbrc	r18, 1
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <fputc+0x16>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	2c c0       	rjmp	.+88     	; 0x1290 <fputc+0x6e>
    1238:	22 ff       	sbrs	r18, 2
    123a:	16 c0       	rjmp	.+44     	; 0x1268 <fputc+0x46>
    123c:	46 81       	ldd	r20, Z+6	; 0x06
    123e:	57 81       	ldd	r21, Z+7	; 0x07
    1240:	24 81       	ldd	r18, Z+4	; 0x04
    1242:	35 81       	ldd	r19, Z+5	; 0x05
    1244:	42 17       	cp	r20, r18
    1246:	53 07       	cpc	r21, r19
    1248:	44 f4       	brge	.+16     	; 0x125a <fputc+0x38>
    124a:	a0 81       	ld	r26, Z
    124c:	b1 81       	ldd	r27, Z+1	; 0x01
    124e:	9d 01       	movw	r18, r26
    1250:	2f 5f       	subi	r18, 0xFF	; 255
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	31 83       	std	Z+1, r19	; 0x01
    1256:	20 83       	st	Z, r18
    1258:	8c 93       	st	X, r24
    125a:	26 81       	ldd	r18, Z+6	; 0x06
    125c:	37 81       	ldd	r19, Z+7	; 0x07
    125e:	2f 5f       	subi	r18, 0xFF	; 255
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	37 83       	std	Z+7, r19	; 0x07
    1264:	26 83       	std	Z+6, r18	; 0x06
    1266:	14 c0       	rjmp	.+40     	; 0x1290 <fputc+0x6e>
    1268:	8b 01       	movw	r16, r22
    126a:	ec 01       	movw	r28, r24
    126c:	fb 01       	movw	r30, r22
    126e:	00 84       	ldd	r0, Z+8	; 0x08
    1270:	f1 85       	ldd	r31, Z+9	; 0x09
    1272:	e0 2d       	mov	r30, r0
    1274:	09 95       	icall
    1276:	89 2b       	or	r24, r25
    1278:	e1 f6       	brne	.-72     	; 0x1232 <fputc+0x10>
    127a:	d8 01       	movw	r26, r16
    127c:	16 96       	adiw	r26, 0x06	; 6
    127e:	8d 91       	ld	r24, X+
    1280:	9c 91       	ld	r25, X
    1282:	17 97       	sbiw	r26, 0x07	; 7
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	17 96       	adiw	r26, 0x07	; 7
    1288:	9c 93       	st	X, r25
    128a:	8e 93       	st	-X, r24
    128c:	16 97       	sbiw	r26, 0x06	; 6
    128e:	ce 01       	movw	r24, r28
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <__ultoa_invert>:
    129a:	fa 01       	movw	r30, r20
    129c:	aa 27       	eor	r26, r26
    129e:	28 30       	cpi	r18, 0x08	; 8
    12a0:	51 f1       	breq	.+84     	; 0x12f6 <__ultoa_invert+0x5c>
    12a2:	20 31       	cpi	r18, 0x10	; 16
    12a4:	81 f1       	breq	.+96     	; 0x1306 <__ultoa_invert+0x6c>
    12a6:	e8 94       	clt
    12a8:	6f 93       	push	r22
    12aa:	6e 7f       	andi	r22, 0xFE	; 254
    12ac:	6e 5f       	subi	r22, 0xFE	; 254
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	af 4f       	sbci	r26, 0xFF	; 255
    12b6:	b1 e0       	ldi	r27, 0x01	; 1
    12b8:	3e d0       	rcall	.+124    	; 0x1336 <__ultoa_invert+0x9c>
    12ba:	b4 e0       	ldi	r27, 0x04	; 4
    12bc:	3c d0       	rcall	.+120    	; 0x1336 <__ultoa_invert+0x9c>
    12be:	67 0f       	add	r22, r23
    12c0:	78 1f       	adc	r23, r24
    12c2:	89 1f       	adc	r24, r25
    12c4:	9a 1f       	adc	r25, r26
    12c6:	a1 1d       	adc	r26, r1
    12c8:	68 0f       	add	r22, r24
    12ca:	79 1f       	adc	r23, r25
    12cc:	8a 1f       	adc	r24, r26
    12ce:	91 1d       	adc	r25, r1
    12d0:	a1 1d       	adc	r26, r1
    12d2:	6a 0f       	add	r22, r26
    12d4:	71 1d       	adc	r23, r1
    12d6:	81 1d       	adc	r24, r1
    12d8:	91 1d       	adc	r25, r1
    12da:	a1 1d       	adc	r26, r1
    12dc:	20 d0       	rcall	.+64     	; 0x131e <__ultoa_invert+0x84>
    12de:	09 f4       	brne	.+2      	; 0x12e2 <__ultoa_invert+0x48>
    12e0:	68 94       	set
    12e2:	3f 91       	pop	r19
    12e4:	2a e0       	ldi	r18, 0x0A	; 10
    12e6:	26 9f       	mul	r18, r22
    12e8:	11 24       	eor	r1, r1
    12ea:	30 19       	sub	r19, r0
    12ec:	30 5d       	subi	r19, 0xD0	; 208
    12ee:	31 93       	st	Z+, r19
    12f0:	de f6       	brtc	.-74     	; 0x12a8 <__ultoa_invert+0xe>
    12f2:	cf 01       	movw	r24, r30
    12f4:	08 95       	ret
    12f6:	46 2f       	mov	r20, r22
    12f8:	47 70       	andi	r20, 0x07	; 7
    12fa:	40 5d       	subi	r20, 0xD0	; 208
    12fc:	41 93       	st	Z+, r20
    12fe:	b3 e0       	ldi	r27, 0x03	; 3
    1300:	0f d0       	rcall	.+30     	; 0x1320 <__ultoa_invert+0x86>
    1302:	c9 f7       	brne	.-14     	; 0x12f6 <__ultoa_invert+0x5c>
    1304:	f6 cf       	rjmp	.-20     	; 0x12f2 <__ultoa_invert+0x58>
    1306:	46 2f       	mov	r20, r22
    1308:	4f 70       	andi	r20, 0x0F	; 15
    130a:	40 5d       	subi	r20, 0xD0	; 208
    130c:	4a 33       	cpi	r20, 0x3A	; 58
    130e:	18 f0       	brcs	.+6      	; 0x1316 <__ultoa_invert+0x7c>
    1310:	49 5d       	subi	r20, 0xD9	; 217
    1312:	31 fd       	sbrc	r19, 1
    1314:	40 52       	subi	r20, 0x20	; 32
    1316:	41 93       	st	Z+, r20
    1318:	02 d0       	rcall	.+4      	; 0x131e <__ultoa_invert+0x84>
    131a:	a9 f7       	brne	.-22     	; 0x1306 <__ultoa_invert+0x6c>
    131c:	ea cf       	rjmp	.-44     	; 0x12f2 <__ultoa_invert+0x58>
    131e:	b4 e0       	ldi	r27, 0x04	; 4
    1320:	a6 95       	lsr	r26
    1322:	97 95       	ror	r25
    1324:	87 95       	ror	r24
    1326:	77 95       	ror	r23
    1328:	67 95       	ror	r22
    132a:	ba 95       	dec	r27
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__ultoa_invert+0x86>
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 05       	cpc	r22, r1
    1332:	71 05       	cpc	r23, r1
    1334:	08 95       	ret
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	0a 2e       	mov	r0, r26
    133c:	06 94       	lsr	r0
    133e:	57 95       	ror	r21
    1340:	47 95       	ror	r20
    1342:	37 95       	ror	r19
    1344:	27 95       	ror	r18
    1346:	ba 95       	dec	r27
    1348:	c9 f7       	brne	.-14     	; 0x133c <__ultoa_invert+0xa2>
    134a:	62 0f       	add	r22, r18
    134c:	73 1f       	adc	r23, r19
    134e:	84 1f       	adc	r24, r20
    1350:	95 1f       	adc	r25, r21
    1352:	a0 1d       	adc	r26, r0
    1354:	08 95       	ret

00001356 <__prologue_saves__>:
    1356:	2f 92       	push	r2
    1358:	3f 92       	push	r3
    135a:	4f 92       	push	r4
    135c:	5f 92       	push	r5
    135e:	6f 92       	push	r6
    1360:	7f 92       	push	r7
    1362:	8f 92       	push	r8
    1364:	9f 92       	push	r9
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	ca 1b       	sub	r28, r26
    1380:	db 0b       	sbc	r29, r27
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	09 94       	ijmp

0000138e <__epilogue_restores__>:
    138e:	2a 88       	ldd	r2, Y+18	; 0x12
    1390:	39 88       	ldd	r3, Y+17	; 0x11
    1392:	48 88       	ldd	r4, Y+16	; 0x10
    1394:	5f 84       	ldd	r5, Y+15	; 0x0f
    1396:	6e 84       	ldd	r6, Y+14	; 0x0e
    1398:	7d 84       	ldd	r7, Y+13	; 0x0d
    139a:	8c 84       	ldd	r8, Y+12	; 0x0c
    139c:	9b 84       	ldd	r9, Y+11	; 0x0b
    139e:	aa 84       	ldd	r10, Y+10	; 0x0a
    13a0:	b9 84       	ldd	r11, Y+9	; 0x09
    13a2:	c8 84       	ldd	r12, Y+8	; 0x08
    13a4:	df 80       	ldd	r13, Y+7	; 0x07
    13a6:	ee 80       	ldd	r14, Y+6	; 0x06
    13a8:	fd 80       	ldd	r15, Y+5	; 0x05
    13aa:	0c 81       	ldd	r16, Y+4	; 0x04
    13ac:	1b 81       	ldd	r17, Y+3	; 0x03
    13ae:	aa 81       	ldd	r26, Y+2	; 0x02
    13b0:	b9 81       	ldd	r27, Y+1	; 0x01
    13b2:	ce 0f       	add	r28, r30
    13b4:	d1 1d       	adc	r29, r1
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	ed 01       	movw	r28, r26
    13c2:	08 95       	ret

000013c4 <_exit>:
    13c4:	f8 94       	cli

000013c6 <__stop_program>:
    13c6:	ff cf       	rjmp	.-2      	; 0x13c6 <__stop_program>
